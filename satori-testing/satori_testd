#!/usr/bin/env python3
# vim:ts=4:sts=4:sw=4:expandtab

import argparse
import cgi
import hashlib
from http.server import HTTPServer, BaseHTTPRequestHandler
import logging
import math
import os
import re
import signal
import subprocess
import traceback
from urllib.parse import urlparse, urlencode, parse_qsl
import uuid
from xml.dom import minidom
import yaml

TESTD_HOST = '0.0.0.0'
TESTD_PORT = 8766
TESTD_SERVERSTRING = 'Satori Test Daemon'
TESTD_TEST = None
TESTD_SUBMIT = None
TESTD_RESULT = None
TESTD_SESSION = uuid.uuid4().hex 

def setup():
    signal.signal(signal.SIGTERM, lambda signum, stack_frame: sys.exit(1))
    global TESTD_HOST, TESTD_PORT, TESTD_SESSION, TESTD_TEST, TESTD_SUBMIT, TESTD_RESULT
    TESTD_HOST = os.environ.get('SATORI_TESTD', TESTD_HOST)+':'+str(TESTD_PORT)
    TESTD_PORT = int(TESTD_HOST.split(':')[1])
    TESTD_HOST = TESTD_HOST.split(':')[0]
    parser = argparse.ArgumentParser()
    parser.add_argument('-H', '--host', default=TESTD_HOST, help='listen on address')
    parser.add_argument('-P', '--port', type=int, default=TESTD_PORT, help='listen on port')
    parser.add_argument('-S', '--session', default=TESTD_SESSION, help='set session')
    parser.add_argument('--test', default=TESTD_TEST, help='test specification')
    parser.add_argument('--submit', default=TESTD_SUBMIT, help='submit file')
    parser.add_argument('--result', default=TESTD_RESULT, help='result dir')
    parser.add_argument('-v', '--verbose', action='store_true', default=False, help='show more info')
    parser.add_argument('-d', '--debug', action='store_true', default=False, help='show debug info')
    args = parser.parse_args()
    TESTD_HOST = args.host
    TESTD_PORT = args.port
    TESTD_SESSION = args.session
    TESTD_TEST = args.test
    TESTD_SUBMIT = args.submit
    TESTD_RESULT = args.result
    level=logging.WARNING
    if args.verbose:
        level=logging.INFO
    if args.debug:
        level=logging.DEBUG
    logging.basicConfig(level=level)

def run():
    with TestServer() as server:
        server.serve_forever()

def xml_get_attr(e, name, d=None):
    if e.hasAttribute(name):
        return e.getAttribute(name)
    return d

def parse_judge(judge, subsections):
    ret = list()
    checker_xml = ' '.join([line[2:].strip() for line in judge.split('\n') if line[0:2] == '#@'])
    checker = minidom.parseString(checker_xml).getElementsByTagNameNS('*', 'checker')[0]
    for subsection in subsections:
        ret.append(dict([ (xml_get_attr(e, 'name'), (xml_get_attr(e, 'type'), xml_get_attr(e, 'required', '')=='true', xml_get_attr(e, 'default'))) for e in 
        checker.getElementsByTagNameNS('*', subsection)[0].getElementsByTagNameNS('*', 'param')]))
    return ret

def blob_file_open(path):
    return (os.path.basename(path), os.stat(path).st_size, open(path, 'rb'))

def copy_file(src, dst, length):
    while length > 0:
        l = min(length, 2048)
        buf = src.read(l)
        dst.write(buf)
        length -= len(buf)

class Test:
    def __init__(self):
        judge = self.blob('judge')
        with judge[2] as judge_blob:
            judge = judge_blob.read(judge[1]).decode('utf-8')
        self.judge_spec, self.result_spec = parse_judge(judge, ['input', 'output'])

    def data(self):
        result = dict()
        for k,v in self.test_spec.items():
            if k in self.judge_spec:
                if k not in [ 'image' ]:
                    if self.judge_spec[k][0] == 'blob':
                        result[k] = self.filename(v)
                    else:
                        result[k] = v
            else:
                if k not in [ 'image', 'judge' ]:
                    logging.warning('Field \'%s\' is not defined in judge specification' % (k,))
        for k,v in self.judge_spec.items():
            if k not in result and v[1] and v[2] is not None:
                result[k] = v[2]
        return result

    def image(self):
        result = dict()
        result['image'] = self.test_spec['image']
        return result

    def blob(self, name):
        assert name in self.test_spec
        if name != 'judge':
            assert name in self.judge_spec
            assert self.judge_spec.get(name, '')[0] == 'blob'
        return self._blob(name)

class TestLocal(Test):
    def __init__(self, test):
        self.test_dir = os.path.dirname(os.path.abspath(test))
        with open(test) as test_yaml:
            self.test_spec = yaml.safe_load(test_yaml)
        super().__init__()
    def _blob(self, name):
        return blob_file_open(os.path.join(self.test_dir, self.test_spec[name]))
    def filename(self, v):
        return os.path.basename(v)

class Submit:
    def __init__(self):
        pass
    def data(self):
        return dict([('content', self.filename())])
    def blob(self, name):
        assert name == 'content'
        return self._blob()

class SubmitLocal(Submit):
    def __init__(self, submit):
        self.submit_file = submit
        super().__init__()
    def _blob(self):
        return blob_file_open(self.submit_file)
    def filename(self):
        return os.path.basename(self.submit_file)

class Result:
    def __init__(self, test):
        self.judge_spec = test.result_spec
        self.result = dict()

    def data(self):
        result = dict()
        for k,v in self.result.items():
            if self.judge_spec[k][0] == 'blob':
                result[k] = self.filename(v)
            else:
                result[k] = v
        return result

    def blob(self, name):
        assert name in self.result
        assert self.judge_spec.get(name, '')[0] == 'blob'
        return self._blob(name)

    def set(self, params):
        for name in params:
            assert name in self.judge_spec
            assert self.judge_spec.get(name)[0] != 'blob'
            self.result[name] = params[name]
        self.cleanup()

    def set_blob(self, name, filename, size, fd):
        assert self.judge_spec.get(name, '')[0] == 'blob'
        with self._sblob(name, filename, size) as blob_file:
            copy_file(fd, blob_file, int(size))
        self.cleanup()

    def cleanup(self):
        self._cleanup()

class ResultLocal(Result):
    def __init__(self, test, result):
        super().__init__(test)
        self.result_dir = result
        os.makedirs(self.result_dir, exist_ok=True)
    def _blob(self, name):
        return blob_file_open(os.path.join(self.result_dir, self.result[name]))
    def filename(self, v):
        return os.path.basename(v)
    def _sblob(self, name, filename, size):
        os.makedirs(os.path.join(self.result_dir, name), exist_ok=True)
        self.result[name] = os.path.join(name, filename)
        blob_file = open(os.path.join(self.result_dir, name, filename), 'wb')
        return blob_file
    def _cleanup(self):
        logging.debug('Writing result.yaml')
        with open(os.path.join(self.result_dir, 'result.yaml'), 'w') as result_file:
            yaml.safe_dump(self.result, result_file)

class TestHandler(BaseHTTPRequestHandler):
    def test(self):
        return self.server.test
    def submit(self):
        return self.server.submit
    def result(self):
        return self.server.result

    def version_string(self):
        return TESTD_SERVERSTRING

#    def log_request(self, *args, **kwargs):
#        pass

    def do_HEAD(self):
        self.send_response(200)

    def do_POST(self):
        try:
            post_data = dict()
            if 'Content-Length' in self.headers:
                post_length   = int(self.headers['Content-Length'])
                if 'Content-Type' in self.headers:
                    post_type, post_type_dict  = cgi.parse_header(self.headers['Content-Type'])
                    post_charset = post_type_dict.get('charset', 'utf-8')
                    if post_type == 'application/x-www-form-urlencoded':
                        post_data = dict(parse_qsl(self.rfile.read(post_length).decode(post_charset)))
        except:
            self.send_error(400)
            return
        else:
            return self.do_GET(params_override=post_data)

    def do_PUT(self):
        return self.do_GET()

    def do_GET(self, params_override={}):
        try:
            url = urlparse(self.path)
            path = url.path.strip('/ ').lower()
            subpath = '/'.join(url.path.strip('/ ').split('/')[1:]).strip('/ ')
            params = dict(parse_qsl(url.query))
            params.update(params_override)
        except:
            self.send_error(400)
            return
        else:
            return self.cmd(path, subpath, params)

    def cmd(self, path, subpath, params):
        if not params.get('session_id', '') == TESTD_SESSION:
            self.send_error(403)
            return
        del params['session_id']
        fun = self.cmd_default
        if path.startswith('image'):
            fun = self.cmd_image
        elif path.startswith('test'):
            fun = self.cmd_test
        elif path.startswith('submit'):
            fun = self.cmd_submit
        elif path.startswith('result'):
            fun = self.cmd_result
        try:
            result = fun(subpath, params)
        except:
            traceback.print_exc()
            self.send_error(500)
            return
        else:
            if isinstance(result, dict):
                result = bytes(urlencode(result), 'utf-8')
                self.send_response(200)
                self.send_header('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')
                self.send_header('Content-Length', len(result))
                self.end_headers()
                self.wfile.write(result)
            else:
                name, size, fd = result
                self.send_response(200)
                self.send_header('Content-Length', int(size))
                self.send_header('Content-Disposition', 'attachment; filename='+name)
                self.end_headers()
                copy_file(fd, self.wfile, int(size))

    def cmd_default(self, subpath, params):
        raise Exception('method unknown')
        return result

    def cmd_test(self, subpath, params):
        result = dict()
        if subpath == '':
            result = self.test().data()
        else:
            result = self.test().blob(subpath.split('/')[0])
        return result

    def cmd_image(self, subpath, params):
        return self.test().image()

    def cmd_submit(self, subpath, params):
        result = dict()
        if subpath == '':
            result = self.submit().data()
        else:
            result = self.submit().blob(subpath.split('/')[0])
        return result

    def cmd_result(self, subpath, params):
        result = dict()
        if subpath == '':
            self.result().set(params)
            result = self.result().data()
        else:
            if self.command == 'PUT':
                self.result().set_blob(subpath.split('/')[0], subpath.split('/')[1], self.headers['Content-Length'], self.rfile)
            else:
                result = self.result().blob(subpath.split('/')[0])
        return result

class TestServer(HTTPServer):
    def __init__(self):
        super().__init__((TESTD_HOST, TESTD_PORT), TestHandler)

    def __enter__(self, *args, **kwargs):
        #super().__enter__(*args, **kwargs)
        self.test = TestLocal(TESTD_TEST)
        self.submit = SubmitLocal(TESTD_SUBMIT)
        self.result = ResultLocal(self.test, TESTD_RESULT)
        return self
    def __exit__(self, *args, **kwargs):
        self.result.cleanup()
        #super().__exit__(*args, **kwargs)

if __name__ == '__main__':
    setup()
    run()
