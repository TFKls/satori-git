#!/bin/sh

# set -e

export PATH=/usr/bin:/usr/sbin:/bin:/sbin

mkdir -p /casper
mount -t tmpfs tmpfs /casper

mountpoint=/casper/cdrom
LIVE_MEDIA_PATH=casper
[ -f /conf/uuid.conf ] && UUID="$(cat /conf/uuid.conf)"

root_persistence="casper-rw"
home_persistence="home-rw"
root_snapshot_label="casper-sn"
home_snapshot_label="home-sn"

USERNAME=casper
USERFULLNAME="Live session user"
HOST=live
BUILD_SYSTEM=Custom

mkdir -p $mountpoint
tried=/tmp/tried

[ -f /etc/casper.conf ] && . /etc/casper.conf
export USERNAME USERFULLNAME HOST BUILD_SYSTEM

. /scripts/casper-helpers

if [ ! -f /casper.vars ]; then
    touch /casper.vars
fi

parse_cmdline() {
    for x in $(cat /proc/cmdline); do
        case $x in
            showmounts|show-cow)
                export SHOWMOUNTS='Yes' ;;
            persistent)
                export PERSISTENT="Yes" ;;
            nopersistent)
                export PERSISTENT="" ;;
            persistent-path=*)
                export PERSISTENT_PATH="${x#persistent-path=}" ;;
            union=*)
                export UNIONFS="${x#union=}";;
            ip=*)
                STATICIP=${x#ip=}
                if [ "${STATICIP}" = "" ]; then
                    STATICIP="frommedia"
                fi
                export STATICIP ;;
            uuid=*)
                UUID=${x#uuid=} ;;
            ignore_uuid)
                UUID="" ;;
            live-media=*)
                LIVEMEDIA="${x#live-media=}"
                export LIVEMEDIA
                echo "export LIVEMEDIA=\"$LIVEMEDIA\"" >> /etc/casper.conf ;;
            live-media-path=*)
                LIVE_MEDIA_PATH="${x#live-media-path=}"
                export LIVE_MEDIA_PATH
                echo "export LIVE_MEDIA_PATH=\"$LIVE_MEDIA_PATH\"" >> /etc/casper.conf ;;
            toram)
                export TORAM="Yes" ;;
            todisk=*)
                export TODISK="${x#todisk=}" ;;
            hostname=*)
                export CMD_HOST="${x#hostname=}" ;;
            userfullname=*)
                export CMD_USERFULLNAME="${x#userfullname=}" ;;
            username=*)
                export CMD_USERNAME="${x#username=}" ;;
            cowsize=*)
                export COWSIZE="${x#cowsize=}" ;;
        esac
    done
    if [ "${UNIONFS}" = "" ]; then
        export UNIONFS="DEFAULT"
    fi
}

is_casper_path() {
    path=$1
    if [ -d "$path/$LIVE_MEDIA_PATH" ]; then
        if [ "$(echo $path/$LIVE_MEDIA_PATH/*.squashfs)" != "$path/$LIVE_MEDIA_PATH/*.squashfs" ] ||
            [ "$(echo $path/$LIVE_MEDIA_PATH/*.nbd)" != "$path/$LIVE_MEDIA_PATH/*.nbd" ] ||
            [ "$(echo $path/$LIVE_MEDIA_PATH/*.ext2)" != "$path/$LIVE_MEDIA_PATH/*.ext2" ] ||
            [ "$(echo $path/$LIVE_MEDIA_PATH/*.dir)" != "$path/$LIVE_MEDIA_PATH/*.dir" ]; then
            return 0
        fi
    fi
    if [ -d "$path" ]; then
        if [ "$(echo $path/*.squashfs)" != "$path/*.squashfs" ] ||
            [ "$(echo $path/*.nbd)" != "$path/*.nbd" ] ||
            [ "$(echo $path/*.ext2)" != "$path/*.ext2" ] ||
            [ "$(echo $path/*.dir)" != "$path/*.dir" ]; then
            return 0
        fi
    fi
    return 1
}

matches_uuid() {
    if [ -z "$UUID" ]; then
        return 0
    fi
    path="$1"
    for try_uuid_file in "$path/.disk/casper-uuid"* "$path/uuid"*; do
        [ -e "$try_uuid_file" ] || continue
        try_uuid="$(cat "$try_uuid_file")"
        if [ "$UUID" = "$try_uuid" ]; then
            return 0
        fi
    done
    return 1
}

get_backing_device() {
    case "$1" in
        *.squashfs|*.ext2)
            echo $(setup_loop "$1" "loop" "/sys/block/loop*")
            ;;
        *.nbd)
            echo $(setup_nbd "$(cat "$1" |cut -d : -f 1)" "$(cat "$1" |cut -d : -f 2)")
            ;;
        *.dir)
            echo "directory"
            ;;
        *)
            panic "Unrecognized casper filesystem: $1"
            ;;
    esac
}

match_files_in_dir() {
    # Does any files match pattern $1 ?

    local pattern="$1"
    if [ "$(echo $pattern)" != "$pattern" ]; then
        return 0
    fi
    return 1
}

mount_images_in_directory() {
    directory="$1"
    rootmnt="$2"
    if match_files_in_dir "$directory/$LIVE_MEDIA_PATH/*.squashfs" ||
        match_files_in_dir "$directory/$LIVE_MEDIA_PATH/*.nbd" ||
        match_files_in_dir "$directory/$LIVE_MEDIA_PATH/*.ext2" ||
        match_files_in_dir "$directory/$LIVE_MEDIA_PATH/*.dir"; then
        setup_unionfs "$directory/$LIVE_MEDIA_PATH" "$rootmnt"
    elif match_files_in_dir "$directory/*.squashfs" ||
        match_files_in_dir "$directory/*.nbd" ||
        match_files_in_dir "$directory/*.ext2" ||
        match_files_in_dir "$directory/*.dir"; then
        setup_unionfs "$directory" "$rootmnt"
    else
        :
    fi
}

is_nice_device() {
    sysfs_path="${1#/sys}"
    if /sbin/udevadm info --query=all --path="${sysfs_path}" | egrep -q "DEVTYPE=disk"; then
        return 0
    fi
    if echo ${sysfs_path} | grep -q "^/block/dm-"; then
        return 0
    fi
    return 1
}

copy_live_to() {
    copyfrom="${1}"
    copytodev="${2}"
    copyto="/casper/swap"

    size=$(fs_size "" ${copyfrom} "used")

    if [ "${copytodev}" = "ram" ]; then
        # copying to ram:
        freespace=$(awk '/^MemFree:/{f=$2} /^Cached:/{c=$2} END{print f+c}' /proc/meminfo)
        mount_options="-o size=${size}k"
        free_string="memory"
        fstype="tmpfs"
        dev="/dev/shm"
    else
        # it should be a writable block device
        if [ -b "${copytodev}" ]; then
            dev="${copytodev}"
            free_string="space"
            fstype=$(get_fstype "${dev}")
            freespace=$(fs_size "${dev}")
        else
            [ "$quiet" != "y" ] && log_warning_msg "${copytodev} is not a block device."
            return 1
        fi
    fi
    if [ "${freespace}" -lt "${size}" ] ; then
        [ "$quiet" != "y" ] && log_warning_msg "Not enough free ${free_string} (${freespace}k > ${size}k) to copy live media in ${copytodev}."
#        return 1
    fi

    # begin copying..
    mkdir -p "${copyto}"
    echo ""
    echo "mount -t ${fstype} ${mount_options} ${dev} ${copyto}"
    echo ""
    echo "Please be patient. This operation may take some time..."
    mount -t "${fstype}" ${mount_options} "${dev}" "${copyto}"

    cd "${copyfrom}"
    for t in *.torrent; do
        if [ -f "$t" ]; then
            /bin/cp -L -R --preserve=all "$t" "${copyto}"
        fi
    done
    cd "${copyto}"
    for t in *.torrent; do
        if [ -f "$t" ]; then
            ctorrent -p 6882 -e "0.0" "$t" > /dev/console 2>&1
        fi
    done
    cd /

    /bin/cp -L -R --preserve=all -u ${copyfrom}/* ${copyto}
    if [ -e ${copyfrom}/.disk ]; then
        /bin/cp -L -R --preserve=all -u ${copyfrom}/.disk ${copyto}
    fi

    rec_umount "${mountpoint}"
    mkdir -p ${copyfrom}
    mount -r -o move ${copyto} ${copyfrom}
    rmdir ${copyto}
    return 0
}

do_netmount() {
    rc=1

    modprobe "${MP_QUIET}" af_packet # For DHCP

    udevadm trigger
    udevadm settle

    configure_networking
    export DEVICE

    if [ "${NFSROOT}" = "auto" ]; then
        NFSROOT=${ROOTSERVER}:${ROOTPATH}
    fi

    if [ -n "${NFSROOT}" -a "${NFSROOT%%:*}"  = "" ]; then
        NFSROOT=${ROOTSERVER}:${NFSROOT#*:}
    fi

    [ "$quiet" != "y" ] && log_begin_msg "Trying netboot from ${NFSROOT}"

    if [ "${NETBOOT}" != "nfs" ] && do_cifsmount ; then
        rc=0
    elif do_nfsmount ; then
        NETBOOT="nfs"
        export NETBOOT
        rc=0
    fi

    [ "$quiet" != "y" ] && log_end_msg
    return ${rc}
}

do_nfssubmount() {
    rc=1
    subdir="${1}"
    subdir="${subdir#/}"
    subdir="${subdir%/}"
    nfsdir="${NFSROOT}"
    destdir="${mountpoint}"
    if [ "${subdir}" != "." -a "${subdir}" != "" ]; then
        nfsdir="${NFSROOT}/${subdir}"
        destdir="${mountpoint}/${subdir}"
    fi
    [ "$quiet" != "y" ] && log_begin_msg "Trying nfsmount -o nolock -o ro ${NFSOPTS} ${nfsdir} ${destdir}"
    mkdir -p ${destdir}
    i=0
    while [ "$i" -lt 10 ]; do
        mount -t nfs ${NFSOPTS} "${nfsdir}" "${destdir}" && rc=0 && break
        sleep 1
        i="$(($i + 1))"
    done
    [ "$quiet" != "y" ] && log_end_msg
    return ${rc}
}

do_nfsmount() {
    rc=1
    modprobe "${MP_QUIET}" nfs
    if [ -z "${NFSOPTS}" ]; then
        NFSOPTS="-o ro,nolock"
    else
        NFSOPTS="-o ro,nolock,${NFSOPTS}"
    fi
    NFSDIR=${NFSROOT#*/./}
    if [ -z "${NFSDIR}" ]; then
        NFSDIR="."
    fi
    NFSROOT=${NFSROOT%/./*}
    if do_nfssubmount ${NFSDIR} ; then
        rc=0
    fi
    return ${rc}
}

do_cifsmount() {
    rc=1
    if [ -x "/sbin/mount.cifs" ]; then
        if [ -z "${NFSOPTS}" ]; then
            CIFSOPTS="-ouser=root,password="
        else
            CIFSOPTS="${NFSOPTS}"
        fi

        [ "$quiet" != "y" ] && log_begin_msg "Trying mount.cifs ${NFSROOT} ${mountpoint} ${CIFSOPTS}"
        modprobe "${MP_QUIET}" cifs

        if mount.cifs "${NFSROOT}" "${mountpoint}" "${CIFSOPTS}" ; then
            rc=0
        fi
    fi
    return ${rc}
}

do_snap_copy ()
{
    fromdev="${1}"
    todir="${2}"
    snap_type="${3}"

    size=$(fs_size "${fromdev}" "" "used")

    if [ -b "${fromdev}" ]; then
        # look for free mem
        if [ -n "${HOMEMOUNTED}" -a "${snap_type}" = "HOME" ]; then
            todev=$(cat /proc/mounts | grep -s " $(base_path ${todir}) " | awk '{print $1}' )
            freespace=$(df -k  | grep -s ${todev} | awk '{print $4}')
        else
            freespace=$(awk '/^MemFree:/{f=$2} /^Cached:/{c=$2} END{print f+c}' /proc/meminfo)
        fi

        tomount="/mnt/tmpsnap"
        if [ ! -d "${tomount}" ] ; then
            mkdir -p "${tomount}"
        fi

        fstype=$(get_fstype "${fromdev}")
        if [ -n "${fstype}" ]; then
            # Copying stuff...
            mount -t "${fstype}" -o ro,noatime "${fromdev}" "${tomount}"
            cp -a "${tomount}"/* ${todir}
            umount "${tomount}"
        else
            log_warning_msg "Unrecognized fstype: ${fstype} on ${fromdev}:${snap_type}"
        fi

        rmdir "${tomount}"
        if echo ${fromdev} | grep -qs loop; then
           losetup -d "${fromdev}"
        fi
        return 0
    else
        return 1
        [ "$quiet" != "y" ] && log_warning_msg "Unable to find the snapshot ${snap_type} medium"
    fi
}

try_snap ()
{
    # Look for $snap_label.* in block devices and copy the contents to $snap_mount
    #   and remember the device and filename for resync on exit in casper.init

    snap_label="${1}"
    snap_mount="${2}"
    snap_type="${3}"

    snapdata=$(find_files "${snap_label}.squashfs ${snap_label}.cpio.gz ${snap_label}.ext2")
    if [ ! -z "${snapdata}" ]; then
        snapdev="$(echo ${snapdata} | cut -f1 -d ' ')"
        snapback="$(echo ${snapdata} | cut -f2 -d ' ')"
        snapfile="$(echo ${snapdata} | cut -f3 -d ' ')"
        if echo "${snapfile}" | grep -qs '\(squashfs\|ext2\)'; then
            # squashfs or ext2 snapshot
            dev=$(get_backing_device "${snapback}/${snapfile}")
            if ! do_snap_copy "${dev}" "${snap_mount}" "${snap_type}"; then
                 log_warning_msg "Impossible to include the ${snapfile} Snapshot"
                 return 1
            fi
        else
            # cpio.gz snapshot
            # Unfortunately klibc's cpio is incompatible with the rest of
            # the world; everything else requires -u -d, while klibc doesn't
            # implement them. Try to detect whether it's in use.
            cpiopath="$(which cpio)" || true
            if [ "$cpiopath" ] && grep -aq /lib/klibc "$cpiopath"; then
                cpioargs=
            else
                cpioargs='-u -d'
            fi
            if ! (cd "${snap_mount}" && zcat "${snapback}/${snapfile}" | cpio -i $cpioargs 2>/dev/null) ; then
                log_warning_msg "Impossible to include the ${snapfile} Snapshot"
                return 1
            fi
        fi
        umount "${snapback}"
    else
        dev=$(find_cow_device "${snap_label}")
        if [ -b "${dev}" ]; then
            if echo "${dev}" | grep -qs loop; then
                # strange things happens, user confused?
                snaploop=$( losetup ${dev} | awk '{print $3}' | tr -d '()' )
                snapfile=$(basename ${snaploop})
                snapdev=$(cat /proc/mounts | awk '{print $2,$1}' | grep -es "^$( dirname ${snaploop} )" | cut -f2 -d ' ')
            else
                snapdev="${dev}"
            fi
            if ! do_snap_copy "${dev}" "${snap_mount}" "${snap_type}" ; then
                log_warning_msg "Impossible to include the ${snap_label} Snapshot"
                return 1
            else
                if [ -n "${snapfile}" ]; then
                     # it was a loop device, user confused
                     umount ${snapdev}
                fi
            fi
        else
            log_warning_msg "Impossible to include the ${snap_label} Snapshot"
            return 1
        fi
    fi
    echo "export ${snap_type}SNAP="/cow${snap_mount#$rootmnt}":${snapdev}:${snapfile}" >> /etc/casper.conf # for resync on reboot/halt
    return 0
}

setup_unionfs() {
    image_directory="$1"
    rootmnt="$2"

    if [ "${UNIONFS}" = 'DEFAULT' ]; then
        for union in 'overlayfs' 'aufs' 'unionfs'
        do
            modprobe "${MP_QUIET}" -b ${union} || true
            if cut -f2 /proc/filesystems | grep -q "^${union}\$"; then
                UNIONFS="${union}"
                break
            fi
        done
    fi
    if [ "${UNIONFS}" = 'DEFAULT' -a -x /bin/unionfs-fuse ]; then
        UNIONFS="unionfs-fuse"
    fi
    # If all else fails fall back to aufs.
    if [ "${UNIONFS}" = 'DEFAULT' ]; then
        UNIONFS='aufs'
    fi

    # run-init can't deal with images in a subdir, but we're going to
    # move all of these away before it runs anyway.  No, we're not,
    # put them in / since move-mounting them into / breaks mono and
    # some other apps.

    croot="/casper/rofs"

    # Let's just mount the read-only file systems first
    rofsstring=""
    rofslist=""
    if [ "${UNIONFS}" = "aufs" ]; then
        if [ "${NETBOOT}" = "nfs" ] ; then
            roopt="nfsro"
        else
            roopt="rr"
        fi
    elif [ "${UNIONFS}" = "unionfs-fuse" ]; then
        roopt="RO"
    else
        roopt="ro"
    fi

    mkdir -p "${croot}"
    image_counter=0
    for image_type in "squashfs" "nbd" "ext2" "dir" ; do
        for image in "${image_directory}"/*."${image_type}"; do
            if [ "${image_counter}" -lt "${image_count}" ]; then
            imagename=$(basename "${image}")
            if [ -d "${image}" ]; then
                # it is a plain directory: do nothing
                rofsstring="${image}=${roopt}:${rofsstring}"
                rofslist="${image} ${rofslist}"
            elif [ -f "${image}" ]; then
                backdev=$(get_backing_device "$image")
                fstype=$(get_fstype "${backdev}")
                if [ "${fstype}" = "unknown" ]; then
                    panic "Unknown file system type on ${backdev} (${image})"
                fi
                mkdir -p "${croot}/${imagename}"
                echo mount -t "${fstype}" -o ro,noatime "${backdev}" "${croot}/${imagename}"
                mount -t "${fstype}" -o ro,noatime "${backdev}" "${croot}/${imagename}" || panic "Can not mount $backdev ($image) on ${croot}/${imagename}" && rofsstring="${croot}/${imagename}=${roopt}:${rofsstring}" && rofslist="${croot}/${imagename} ${rofslist}"
            fi
            else
            echo "Not using ${image} because limit of ${image_count} images was reached (${image_counter})" > /dev/console 2>&1
            log_warning_msg "Not using ${image} because limit of ${image_count} images was reached (${image_counter})"
            fi
        done
    done
    rofsstring=${rofsstring%:}

    mkdir -p /casper/cow
    cowdevice="tmpfs"
    cow_fstype="tmpfs"
    cow_mountopt="rw,noatime,mode=755"
    if [ -n "${COWSIZE}" ]; then
        cow_mountopt="${cow_mountopts},size=${COWSIZE}"
    fi

    # Looking for "${root_persistence}" device or file
    if [ -n "${PERSISTENT}" ]; then
        cowprobe=$(find_cow_device "${root_persistence}")
        if [ -b "${cowprobe}" ]; then
            cowdevice=${cowprobe}
            cow_fstype=$(get_fstype "${cowprobe}")
            cow_mountopt="rw,noatime"
        else
            [ "$quiet" != "y" ] && log_warning_msg "Unable to find the persistent medium"
        fi
    fi

    mount -t ${cow_fstype} -o ${cow_mountopt} ${cowdevice} /casper/cow || panic "Can not mount $cowdevice on /casper/cow"

    case ${UNIONFS} in
        unionfs-fuse)
            (ulimit -n 16384; unionfs-fuse -o cow -o noinitgroups -o default_permissions -o allow_other -o use_ino -o suid /casper/cow=RW:$rofsstring "$rootmnt" || panic "${UNIONFS} mount failed")
            mkdir -p /dev/.initramfs/varrun
            pidof unionfs-fuse >> /dev/.initramfs/varrun/sendsigs.omit || true
            ;;
        aufs|unionfs)
            mount -t ${UNIONFS} -o noatime,dirs=/casper/cow=rw:$rofsstring ${UNIONFS} "$rootmnt" || panic "${UNIONFS} mount failed"
            ;;
        overlayfs)
            # Mount the layers pairwise from the bottom onto rootmnt,
            # for the second and later layers rootmnt forms the lower layer.
            mounts=""
            for mount in /casper/cow $rofslist
            do
                mounts="$mount $mounts"
            done
            lower=""
            for mount in $mounts
            do
                if [ "$lower" = "" ]; then
                    lower="$mount"
                    continue
                fi
                mount -t overlayfs -o "upperdir=$mount,lowerdir=$lower" \
                    "$mount" "$rootmnt"
                lower="$rootmnt"
            done
            ;;
    esac

    # Adding other custom mounts
    if [ -n "${PERSISTENT}" ]; then
        # directly mount /home
        # FIXME: add a custom mounts configurable system
        homecow=$(find_cow_device "${home_persistence}" )
        if [ -b "${homecow}" ]; then
            mount -t $(get_fstype "${homecow}") -o rw,noatime "${homecow}" "${rootmnt}/home"
            export HOMEMOUNTED=1 # used to proper calculate free space in do_snap_copy()
        else
            [ "$quiet" != "y" ] && log_warning_msg "Unable to find the persistent home medium"
        fi
        # Look for other snapshots to copy in
        try_snap "${root_snapshot_label}" "${rootmnt}" "ROOT"
        try_snap "${home_snapshot_label}" "${rootmnt}/home" "HOME"
    fi

    mkdir -p "${rootmnt}/casper"
    mount -o move /casper "${rootmnt}/casper"
    rmdir /casper
    ln -s "${rootmnt}/casper" /casper
    ln -s "${image_directory}" "${rootmnt}/livefs"
}

check_dev ()
{
    sysdev="${1}"
    devname="${2}"
    skip_uuid_check="${3}"
    if [ -z "${devname}" ]; then
        devname=$(sys2dev "${sysdev}")
    fi

    if [ -d "${devname}" ]; then
        mount -o bind "${devname}" $mountpoint || continue
        if is_casper_path $mountpoint; then
            echo $mountpoint
            return 0
        else
            umount $mountpoint
        fi
    fi
    [ -e "$devname" ] || continue

    if [ -n "${LIVEMEDIA_OFFSET}" ]; then
        loopdevname=$(setup_loop "${devname}" "loop" "/sys/block/loop*" "${LIVEMEDIA_OFFSET}")
        devname="${loopdevname}" 
    fi

    fstype=$(get_fstype "${devname}")
    if is_supported_fs ${fstype}; then
        devuid=$(blkid -o value -s UUID "$devname")
        [ -n "$devuid" ] && grep -qs "\<$devuid\>" $tried && continue
        mount -t ${fstype} -o ro,noatime "${devname}" $mountpoint || continue
        [ -n "$devuid" ] && echo "$devuid" >> $tried
        if is_casper_path $mountpoint && \
           ([ "$skip_uuid_check" ] || [ "$UUID" = "$devuid" ] || matches_uuid $mountpoint); then
            echo $mountpoint
            return 0
        else
            umount $mountpoint
        fi
    fi

    if [ -n "${LIVEMEDIA_OFFSET}" ]; then
        losetup -d "${loopdevname}"
    fi
    return 1
}

is_mapper() {
    dev="$1"
    # we don't consider control a mapper device
    echo "$dev" |grep "/dev/mapper/control" >/dev/null && return 1
    echo "$dev" |grep "/dev/mapper/.\+" >/dev/null && return 0
    return 1
}

is_md() {
    dev="$1"
    echo "$dev" |grep "/dev/md[0-9]" >/dev/null && return 0
    return 1
}

find_livefs() {
    timeout="${1}"
    # first look at the one specified in the command line
    if [ ! -z "${LIVEMEDIA}" ]; then
        if check_dev "null" "${LIVEMEDIA}" "skip_uuid_check"; then
            return 0
        fi
    fi
    # don't start autodetection before timeout has expired
    if [ -n "${LIVEMEDIA_TIMEOUT}" ]; then
        if [ "${timeout}" -lt "${LIVEMEDIA_TIMEOUT}" ]; then
            return 1
        fi
    fi
    # or do the scan of block devices
    for sysblock in $(echo /sys/block/* | tr ' ' '\n' | egrep -v "/(loop|ram|fd|md)"); do
        devname=$(sys2dev "${sysblock}")
        [ -e "$devname" ] || continue
        fstype=$(get_fstype "${devname}")
        if /lib/udev/cdrom_id ${devname} > /dev/null; then
            if check_dev "null" "${devname}" ; then
                return 0
            fi
        elif is_nice_device "${sysblock}" ; then
            for dev in $(subdevices "${sysblock}"); do
                if check_dev "${dev}" ; then
                    return 0
                fi
            done
        elif is_md "${devname}" || is_mapper "${devname}" ; then
            if check_dev "null" "${devname}" ; then
                return 0
            fi
        elif [ "${fstype}" = "squashfs" -o \
                "${fstype}" = "ext4" -o \
                "${fstype}" = "ext3" -o \
                "${fstype}" = "ext2" -o \
                "${fstype}" = "btrfs" ]; then
            # This is an ugly hack situation, the block device has
            # an image directly on it.  It's hopefully
            # casper, so take it and run with it.
            ln -s "${devname}" "${devname}.${fstype}"
            echo "${devname}.${fstype}"
            return 0
        fi
    done
    return 1
}

mountroot() {
    exec 6>&1
    exec 7>&2
    exec > casper.log
    exec 2>&1
    tail -f casper.log >&7 &
    tailpid="$!"

    parse_cmdline

    [ "$quiet" != "y" ] && log_begin_msg "Running /scripts/casper-premount"
    run_scripts /scripts/casper-premount
    [ "$quiet" != "y" ] && log_end_msg

    if [ ! -z "${NETBOOT}" ]; then
        if do_netmount ; then
            livefs_root="${mountpoint}"
            for sub in $(get_network_config_list); do
                if [ -e "${mountpoint}/${NFSDIR}/${sub}" -o -h "${mountpoint}/${NFSDIR}/${sub}" ]; then
                    dir=`/bin/readlink -m "${mountpoint}/${NFSDIR}/${sub}"`
                    check1=$(substr "${dir}" 0 ${#mountpoint})
                    check2="${mountpoint}/${NFSDIR}"
                    check3=$(substr "${dir}" 0 ${#check2})
                    if [ "${check1}" != "${mountpoint}" -o "${check2}" == "${check3}" ]; then
                        continue
                    fi
                    if [ ! -e "${dir}" ]; then
                        subdir=${dir#${mountpoint}}
                        do_nfssubmount ${subdir}
                    fi
                    if [ -d "${dir}" ]; then
                        if is_casper_path "${dir}"; then
                            livefs_root="${dir}"
                            break
                        fi
                    fi
                fi
            done
        else
            panic "Unable to find a live file system on the network"
        fi
    else
        # Scan local devices for the image
        i=0
        while [ "$i" -lt 60 ]; do
            livefs_root=$(find_livefs $i)
            if [ "${livefs_root}" ]; then
                break
            fi
            sleep 1
            i="$(($i + 1))"
        done
    fi

    if [ -z "${livefs_root}" ]; then
        panic "Unable to find a medium containing a live file system"
    fi

    if [ -d "${livefs_root}/casper" ]; then
        livefs_root="${livefs_root}/casper"
    fi
    echo "Found livefs: ${livefs_root}"

    [ -f "${livefs_root}"/casper.conf ] && . "${livefs_root}"/casper.conf

    if [ "${TORAM}" ]; then
        live_dest="ram"
    elif [ "${TODISK}" ]; then
        live_dest="${TODISK}"
    fi
    if [ "${live_dest}" ]; then
        log_begin_msg "Copying live_media to ${live_dest}"
        copy_live_to "${livefs_root}" "${live_dest}"
        log_end_msg
    fi

    mount_images_in_directory "${livefs_root}" "${rootmnt}"

    log_end_msg

    # Apply command lines override of HOST, USERNAME and USERFULLNAME
    [ -n "$CMD_HOST" ] && HOST=$CMD_HOST && export HOST
    [ -n "$CMD_USERNAME" ] && USERNAME=$CMD_USERNAME && export USERNAME
    [ -n "$CMD_USERFULLNAME" ] && USERFULLNAME=$CMD_USERFULLNAME && export USERFULLNAME
    if [ -n "$CMD_HOST" ] || [ -n "$CMD_USERNAME" ] || [ -n "$CMD_USERFULLNAME" ]; then
        sed -i "s,USERNAME=.*,USERNAME=\"$USERNAME\",g; s,USERFULLNAME=.*,USERFULLNAME=\"$USERFULLNAME\",g; s,HOST=.*,HOST=\"$HOST\",g" /etc/casper.conf
    fi

    # unionfs-fuse needs /dev to be bind-mounted for the duration of
    # casper-bottom; udev's init script will take care of things after that
    if [ "${UNIONFS}" = unionfs-fuse ]; then
        mount -n -o bind /dev "${rootmnt}/dev"
    fi

    # Open up two fifo's fd's for debconf-communicate to use. Speeds up
    # the Casper process considerably.
    log_begin_msg "Creating debconf-communicate fifo mechanism"
    mkfifo /tmp/debconf-in.fifo
    mkfifo /tmp/debconf-out.fifo

    # Make the template database read-only, so that passthrough debconf
    # instances can write to it directly; otherwise templates are only
    # passed through when necessary.  Use temporary config databases as
    # well; we'll copy their contents back at the end.
    DEBCONF_TMPDIR="$(chroot /root mktemp -dt debconf.XXXXXX)"
    cp -a /root/var/cache/debconf/config.dat "/root$DEBCONF_TMPDIR/"
    cp -a /root/var/cache/debconf/passwords.dat "/root$DEBCONF_TMPDIR/"
    sed "s,^Filename: /var/cache/debconf/\(config\|passwords\).dat$,Filename: $DEBCONF_TMPDIR/\1.dat,; /^Name: templatedb/a\
Readonly: true" /root/etc/debconf.conf >"/root$DEBCONF_TMPDIR/debconf.conf"

    DEBCONF_SYSTEMRC="$DEBCONF_TMPDIR/debconf.conf" chroot /root debconf-communicate -fnoninteractive casper > /tmp/debconf-out.fifo < /tmp/debconf-in.fifo &
    debconfpid="$!"

    if [ ! -p /tmp/debconf-in.fifo ] || [ ! -p /tmp/debconf-out.fifo ]; then
        log_warning_msg "failed to setup debconf-communicate channel"
    fi
    log_end_msg

    # Order matters!
    # These file descriptors must stay open until we're finished with
    # debconf-communicate.
    exec 4</tmp/debconf-out.fifo 3>/tmp/debconf-in.fifo

    maybe_break casper-bottom
    [ "$quiet" != "y" ] && log_begin_msg "Running /scripts/casper-bottom"

    run_scripts /scripts/casper-bottom
    [ "$quiet" != "y" ] && log_end_msg

    if [ "${UNIONFS}" = unionfs-fuse ]; then
        rec_umount "${rootmnt}/dev"
    fi

    # Close the fd's associated with debconf-communicate.
    exec 3>&- 4<&-
    rm -f /tmp/debconf-in.fifo
    rm -f /tmp/debconf-out.fifo
    wait $debconfpid

    # Copy config database changes back to the master files.
    chroot /root debconf-copydb tmpdb config \
        --config=Name:tmpdb --config=Driver:File \
        --config="Filename:$DEBCONF_TMPDIR/config.dat"
    chroot /root debconf-copydb tmpdb passwords \
        --config=Name:tmpdb --config=Driver:File \
        --config="Filename:$DEBCONF_TMPDIR/passwords.dat"
    rm -rf "$DEBCONF_TMPDIR"

    exec 1>&6 6>&-
    exec 2>&7 7>&-
    kill "$tailpid"
    cp casper.log "${rootmnt}/var/log/"
    if [ -f /etc/casper.conf ]; then
        cp /etc/casper.conf "${rootmnt}/etc/"
    fi

    if [ -n "$SHOWMOUNTS" ]; then
        echo "Leaving casper mounts"
    else
        echo "Hiding casper mounts"
        umount -l "${rootmnt}/casper"
        rmdir "${rootmnt}/casper"
    fi
}
