#!/usr/bin/env python3
# vim:ts=4:sts=4:sw=4:expandtab

import argparse
import cgi
import hashlib
from http.server import HTTPServer, BaseHTTPRequestHandler
import logging
import math
import os
import re
import signal
import subprocess
import traceback
from urllib.parse import urlparse, urlencode, parse_qsl
import uuid

RUND_HOST = ''
RUND_PORT = 8765
RUND_SERVERSTRING = 'Satori Run Daemon'
RUND_SALT = uuid.uuid4().hex 

RUND_CGROUPS = [ 'memory', 'cpuacct', 'perf_event', 'blkio', 'cpuset', 'freezer' ]

def setup():
    global RUND_HOST, RUND_PORT, RUND_SALT
    RUND_HOST = os.environ.get('SATORI_RUND', RUND_HOST)+':'+str(RUND_PORT)
    RUND_PORT = int(RUND_HOST.split(':')[1])
    RUND_HOST = RUND_HOST.split(':')[0]
    RUND_SALT = os.environ.get('SATORI_RUND_SALT', RUND_SALT)
    parser = argparse.ArgumentParser()
    parser.add_argument("-H", "--host", default=RUND_HOST, help='listen on address')
    parser.add_argument("-P", "--port", type=int, default=RUND_PORT, help='listen on port')
    parser.add_argument("-v", "--verbose", action="store_true", default=False, help='show more info')
    parser.add_argument("-d", "--debug", action="store_true", default=False, help='show debug info')
    args = parser.parse_args()
    RUND_HOST = args.host
    RUND_PORT = args.port
    level=logging.WARNING
    if args.verbose:
        level=logging.INFO
    if args.debug:
        level=logging.DEBUG
    logging.basicConfig(level=level)

def run():
    with RunnerServer() as server:
        server.serve_forever()

class ControlGroupSystem:
    def __init__(self):
        assert os.path.exists('/proc/cgroups')
        with open('/proc/cgroups') as f:
            available_groups = [line.strip().split()[0] for line in f.readlines() if not line.startswith('#')]
        for group in RUND_CGROUPS:
            assert group in available_groups

        sys_fs_cgroup_prepared = False
        self.mount_points = dict()
        with open('/proc/mounts') as f:
            for line in [line.strip().split() for line in f.readlines()]:
                if line[1] == '/sys/fs/cgroup':
                    sys_fs_cgroup_prepared = True
                if line[0] == 'cgroup':
                    groups = line[3].split(',')
                    for group in RUND_CGROUPS:
                        if group in groups:
                            logging.debug('Found \'%s\' control group at mount point \'%s\''%(group, line[1]))
                            self.mount_points[group] = line[1]

        for group in RUND_CGROUPS:
            if group not in self.mount_points:
                if not sys_fs_cgroup_prepared:
                    os.makedirs('/sys/fs/cgroup', exist_ok=True)
                    logging.info('Mounting \'/sys/fs/cgroup\'')
                    assert 0 == subprocess.call(['mount', '-t', 'tmpfs', '-o', 'uid=0,gid=0,mode=0755', 'cgroup', '/sys/fs/cgroup'])
                    sys_fs_cgroup_prepared = True
                group_dir = os.path.join('/sys/fs/cgroup', group)
                os.makedirs(group_dir, exist_ok=True)
                logging.info('Mounting \'%s\' control group at mount point \'%s\''%(group,group_dir))
                assert 0 == subprocess.call(['mount', '-n', '-t', 'cgroup', '-o', group, 'cgroup', group_dir]) 
                self.mount_points[group] = group_dir

    def mount_point(self, group):
        assert group in self.mount_points
        return self.mount_points[group]


class Session:
    def control_group_system(self):
        return self.registry.control_group_system

    def initial_group_path(self, group, path='/', subpath='/'):
        return os.path.abspath(os.path.join(self.control_group_system().mount_point(group), path.strip('/'), 'satori_rund_'+self.id, subpath.strip('/')))

    def process_groups(self, pid):
        groups_file = os.path.join('/proc', str(pid), 'cgroup')
        with open(groups_file) as f:
            return dict([line.strip().split(':')[1:3] for line in f.readlines()])

    def group_path(self, group, subpath='/', filename=''):
        assert group in self.groups
        return os.path.join(self.groups[group], subpath.strip('/'), filename.strip('/'))

    def list_group(self, group, subpath='/'):
        result = set()
        path = self.group_path(group, subpath=subpath)
        for d, _, _ in os.walk(path):
            group_list_file = os.path.join(path, d, 'cgroup.procs')
            if os.path.exists(group_list_file):
                with open(group_list_file) as f:
                    result.update([line.strip() for line in f.readlines()])
        return list(result)

    def cpuset_cpus(self, path):
        path=os.path.abspath(path)
        while path.startswith(self.control_group_system().mount_point('cpuset')):
            cpuset_file = os.path.join(path, 'cpuset.cpus')
            if os.path.exists(cpuset_file):
                with open(cpuset_file) as f:
                    cpus = f.readline().strip()
                if cpus != '':
                    cpuset=list()
                    for cpu_range in [(c+'-'+c).split('-')[0:2] for c in cpus.split(',')]:
                        for cpu in range(int(cpu_range[0]), int(cpu_range[1])+1):
                            cpuset.append(cpu)
                    return sorted(cpuset)

    def __init__(self, registry, session_id, pid):
        self.registry = registry
        self.id = session_id
        process_groups = self.process_groups(pid)
        self.groups = dict()
        for group in RUND_CGROUPS:
            self.groups[group] = self.initial_group_path(group, process_groups[group])
        for group in RUND_CGROUPS:
            if group == 'memory':
                with open(os.path.normpath(os.path.join(self.groups[group], '..', 'memory.use_hierarchy')), 'w') as f:
                    f.write('1')
            os.makedirs(self.groups[group], exist_ok=True)
            if group == 'cpuset':
                for inherit in ['cpuset.cpus', 'cpuset.mems']:
                    with open(os.path.normpath(os.path.join(self.groups[group], '..', inherit))) as f:
                        with open(os.path.join(self.groups[group], inherit), 'w') as t:
                            t.write(f.read())
        logging.debug('Created session %s with paths [%s]'%(self.id, ','.join(self.groups.values())))

    def attach(self, subpath, pid):
        #TODO: Create subpath if needed!
        process_groups = self.process_groups(pid)
        for group in RUND_CGROUPS:
            assert self.initial_group_path(group, process_groups[group]).startswith(self.groups[group])
        for group in RUND_CGROUPS:
            tasks_file = self.group_path(group, subpath=subpath, filename='tasks')
            with open(tasks_file, 'w') as f:
                f.write(str(pid))
        logging.debug('Attached process %s to session %s [%s]'%(str(pid), self.id, subpath))

    def limit(self, subpath, memory=None, cpus=None):
        if memory:
            assert 'memory' in self.groups
            limit_file = self.group_path('memory', subpath=subpath, filename='memory.limit_in_bytes')
            with open(limit_file, 'w') as f:
                f.write(str(memory))
            logging.debug('Limited session %s [%s] memory to %s bytes'%(self.id, subpath, memory))
        if cpus:
            assert 'cpuset' in self.groups
            cpuset_cpus = [str(c) for c in self.cpuset_cpus(os.path.normpath(os.path.join(self.group_path('cpuset', subpath=subpath), '..')))]
            logging.debug('Available cpus: %s', ','.join(cpuset_cpus))
            if len(cpuset_cpus) > cpus:
                cpuset_cpus = cpuset_cpus[0:cpus]
            limit_file = self.group_path('cpuset', subpath=subpath, filename='cpuset.cpus')
            with open(limit_file, 'w') as f:
                f.write(','.join(cpuset_cpus))
            logging.debug('Limited session %s [%s] cpus to %s'%(self.id, subpath, ','.join(cpuset_cpus)))

    def freeze(self, subpath, freeze=True):
        assert 'freezer' in self.groups
        if freeze:
            command = 'FROZEN'
        else:
            command = 'THAWED'
        state_file = self.group_path('freezer', subpath=subpath, filename='freezer.state')
        with open(state_file, 'w') as f:
            f.write(command)
        logging.debug('%s session %s [%s]'%(command, self.id, subpath))
        if freeze:
            while True:
                with open(state_file) as f:
                    if f.readline().strip().lower() == 'frozen':
                        return
        #TODO: wait for FROZEN. Is this code good?

    def freezing(self, subpath):
        assert 'freezer' in self.groups
        state_file = self.group_path('freezer', subpath=subpath, filename='freezer.self_freezing')
        with open(state_file) as f:
            return f.readline().strip() == '1'

    def query(self, subpath):
        result = dict()
        if 'memory' in self.groups:
            usage_file = self.group_path('memory', subpath=subpath, filename='memory.max_usage_in_bytes')
            with open(usage_file) as f:
                result['memory'] = f.readline().strip()
        if 'cpuacct' in self.groups:
            usage_file = self.group_path('cpuacct', subpath=subpath, filename='cpuacct.usage')
            with open(usage_file) as f:
                result['cpu'] = f.readline().strip()
            usage_file = self.group_path('cpuacct', subpath=subpath, filename='cpuacct.stat')
            with open(usage_file) as f:
                stats = dict([line.strip().split() for line in f.readlines()])
            result['cpu.user'] = stats['user']
            result['cpu.system'] = stats['system']
            usage_file = self.group_path('cpuacct', subpath=subpath, filename='cpuacct.usage_percpu')
            with open(usage_file) as f:
                cpusplit = f.readline().strip().split()
            for i,c in zip(range(len(cpusplit)), cpusplit):
                result['cpu.'+str(i)] = c
            result['procs'] = str(len(self.list_group('cpuacct', subpath=subpath)))
        return result

    def kill(self, subpath):
        state = self.freezing(subpath=subpath)
        self.freeze(subpath=subpath, freeze=True)

        pids = self.list_group('cpuacct', subpath=subpath)
        for pid in pids:
            try:
                os.kill(int(pid), signal.SIGKILL)
            except OSError:
                pass
        logging.debug('KILLED session %s [%s]'%(self.id, subpath))

        self.freeze(subpath=subpath, freeze=state)

    def close(self, subpath):
        state = self.freezing(subpath=subpath)
        self.freeze(subpath=subpath, freeze=True)

        for group in sorted(RUND_CGROUPS, key=lambda x: 1 if x == 'freezer' else 0):
            src_path = self.group_path(group, subpath=subpath)
            dst_path = os.path.normpath(os.path.join(src_path, '..', 'tasks'))
            for d, _, _ in os.walk(src_path, topdown=False):
                group_list_file = os.path.join(src_path, d, 'cgroup.procs')
                if os.path.exists(group_list_file):
                    with open(dst_path, 'w') as t:
                        with open(group_list_file) as f:
                            t.write(f.read())
                os.rmdir(os.path.join(src_path, d))
        logging.debug('CLOSED session %s [%s]'%(self.id, subpath))
            
class SessionRegistry:
    def __init__(self):
        self.sessions = dict()
        self.control_group_system = ControlGroupSystem()

    def cleanup(self):
        for session_id in dict(self.sessions):
            self.close(session_id)

    def open(self, session_id, pid):
        if session_id not in self.sessions:
            self.sessions[session_id] = Session(self, session_id, pid)

    def attach(self, session_id, subpath, pid):
        if session_id not in self.sessions:
            self.sessions[session_id] = Session(self, session_id, pid)
        return self.sessions[session_id].attach(subpath, pid);

    def limit(self, session_id, subpath='/', memory=None, cpus=None):
        assert session_id in self.sessions
        return self.sessions[session_id].limit(subpath=subpath, memory=memory, cpus=cpus)

    def query(self, session_id, subpath='/'):
        if session_id in self.sessions:
            return self.sessions[session_id].query(subpath=subpath)
        else:
            result = dict()
            result['memory'] = 0
            result['cpu'] = 0
            result['cpu.user'] = 0
            result['cpu.system'] = 0
            result['procs'] = 0
            return result

    def freeze(self, session_id, subpath='/'):
        assert session_id in self.sessions
        return self.sessions[session_id].freeze(subpath=subpath, freeze=True)

    def thaw(self, session_id, subpath='/'):
        assert session_id in self.sessions
        return self.sessions[session_id].freeze(subpath=subpath, freeze=False)

    def kill(self, session_id, subpath='/'):
        if session_id not in self.sessions:
            return
        self.sessions[session_id].kill(subpath=subpath)

    def close(self, session_id, subpath='/'):
        if session_id not in self.sessions:
            return
        self.sessions[session_id].close(subpath=subpath)
        del self.sessions[session_id]

class RunnerHandler(BaseHTTPRequestHandler):
    def session_registry(self):
        return self.server.session_registry

    def version_string(self):
        return RUND_SERVERSTRING

    def log_request(self, *args, **kwargs):
        pass

    def do_HEAD(self):
        self.send_response(200)

    def do_POST(self):
        try:
            post_data = dict()
            if 'Content-Length' in self.headers:
                post_length   = int(self.headers['Content-Length'])
                if 'Content-Type' in self.headers:
                    post_type, post_type_dict  = cgi.parse_header(self.headers['Content-Type'])
                    post_charset = post_type_dict.get('charset', 'utf-8')
                    if post_type == 'application/x-www-form-urlencoded':
                        post_data = dict(parse_qsl(self.rfile.read(post_length).decode(post_charset)))
        except:
            self.send_error(400)
            return
        else:
            return self.do_GET(params_override=post_data)

    def do_GET(self, params_override={}):
        try:
            url = urlparse(self.path)
            path = url.path.strip('/ ').lower()
            params = dict(parse_qsl(url.query))
            params.update(params_override)
        except:
            self.send_error(400)
            return
        else:
            return self.cmd(path, params)

    def cmd(self, path, params):
        check_session = False
        fun = self.cmd_default
        if path == '':
            fun = self.cmd_root
        elif path == 'open':
            fun = self.cmd_open
            check_session = True
        elif path == 'attach':
            fun = self.cmd_attach
            check_session = True
        elif path == 'limit':
            fun = self.cmd_limit
            check_session = True
        elif path == 'freeze':
            fun = self.cmd_freeze
            check_session = True
        elif path == 'thaw':
            fun = self.cmd_thaw
            check_session = True
        elif path == 'query':
            if not params.get('session_id', ''):
                self.send_error(400)
                return
            fun = self.cmd_query
        elif path == 'kill':
            fun = self.cmd_kill
            check_session = True
        elif path == 'close':
            fun = self.cmd_close
            check_session = True

        if 'group' in params:
            group = params['group']
            if not re.match(r'[a-z0-9_.]*', group) or len(group) > 32:
                self.send_error(403)
                return

        if check_session:
            if not self.check_secret(params.get('session_id', ''), params.get('secret', '')):
                self.send_error(403)
                return
        try:
            result = urlencode(fun(params))
        except:
            traceback.print_exc()
            self.send_error(500)
            return
        else:
            result = bytes(result, 'utf-8')
            self.send_response(200)
            self.send_header('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')
            self.send_header('Content-Length', len(result))
            self.end_headers()
            self.wfile.write(result)

    def cmd_default(self, params):
        raise Exception('method unknown')

    def cmd_root(self, params):
        result = dict()
        result['session_id'] = self.generate_session_id()
        result['secret'] = self.generate_secret(result['session_id'])
        return result

    def cmd_open(self, params, attach=False):
        result = dict()
        filename = os.path.basename(params.get('file', ''))
        prefix = 'satori_rund_'+params['session_id']
        if not filename.startswith(prefix):
            raise Exception('Filename must start with ' + prefix)
        if not re.match(r'[a-z0-9_.]*', filename) or len(filename) > 128:
            raise Exception('Filename is invalid')
        pid = self.find_pid(filename)
        if pid == None:
            raise Exception('Process not found')
        if attach:
            self.session_registry().attach(params['session_id'], params.get('group', '/'), pid)
        else:
            self.session_registry().open(params['session_id'], pid)
        return result

    def cmd_attach(self, params):
        return self.cmd_open(params, attach=True)

    def cmd_limit(self, params):
        result = dict()
        memory = self.parse_memory(params.get('memory', ''))
        cpus = self.parse_cpus(params.get('cpus', ''))
        self.session_registry().limit(params['session_id'], params.get('group', '/'), memory, cpus)
        return result

    def cmd_query(self, params):
        result = dict()
        result.update(self.session_registry().query(params['session_id'], params.get('group', '/')))
        return result

    def cmd_kill(self, params):
        result = dict()
        self.session_registry().kill(params['session_id'], params.get('group', '/'))
        return result

    def cmd_close(self, params):
        result = dict()
        self.session_registry().close(params['session_id'], params.get('group', '/'))
        return result

    def generate_session_id(self):
        return uuid.uuid4().hex

    def generate_secret(self, session_id):
        return hashlib.sha1(bytes(RUND_SALT+session_id, 'utf-8')).hexdigest()

    def check_secret(self, session_id, secret):
        return secret and session_id and secret == self.generate_secret(session_id)

    def find_pid(self, filename):
        name = os.path.basename(filename)
        for pid in os.listdir('/proc'):
            try:
                for fd in os.listdir(os.path.join('/proc', pid, 'fd')):
                    path = os.path.basename(os.path.realpath(os.path.join('/proc', pid, 'fd', fd)))
                    if path == name:
                        return pid
            except:
                pass
        return None

    def parse_memory(self, memory):
        if not memory:
            return None
        mul = 1
        memstr = memory.strip().lower()
        if memstr[-1] == 'b':
            mul = 1
            memstr = memstr[:-1]
        if memstr[-1] == 'k':
            mul = 1024
            memstr = memstr[:-1]
        elif memstr[-1] == 'm':
            mul = 1024**2
            memstr = memstr[:-1]
        elif memstr[-1] == 'g':
            mul = 1024**3
            memstr = memstr[:-1]
        elif memstr[-1] == 't':
            mul = 1024**4
            memstr = memstr[:-1]
        elif memstr[-1] == 'p':
            mul = 1024**5
            memstr = memstr[:-1]
        return int(math.ceil(float(memstr) * mul))

    def parse_cpus(self, cpus):
        if not cpus:
            return None
        return int(cpus)

class RunnerServer(HTTPServer):
    def __init__(self):
        super().__init__((RUND_HOST, RUND_PORT), RunnerHandler)

    def __enter__(self, *args, **kwargs):
        #super().__enter__(*args, **kwargs)
        self.session_registry = SessionRegistry()
        return self
    def __exit__(self, *args, **kwargs):
        self.session_registry.cleanup()
        #super().__exit__(*args, **kwargs)

if __name__ == '__main__':
    setup()
    run()
