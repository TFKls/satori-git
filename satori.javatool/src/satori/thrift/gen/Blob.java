/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package satori.thrift.gen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class Blob {

  public interface Iface {

    public void Blob_create(String token, int length, int on_close) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException;

    public boolean Blob_exists(String token, String hash) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException;

    public void Blob_open(String token, String hash, String filename, int on_close) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException;

  }

  public interface AsyncIface {

    public void Blob_create(String token, int length, int on_close, AsyncMethodCallback<AsyncClient.Blob_create_call> resultHandler) throws TException;

    public void Blob_exists(String token, String hash, AsyncMethodCallback<AsyncClient.Blob_exists_call> resultHandler) throws TException;

    public void Blob_open(String token, String hash, String filename, int on_close, AsyncMethodCallback<AsyncClient.Blob_open_call> resultHandler) throws TException;

  }

  public static class Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public void Blob_create(String token, int length, int on_close) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      send_Blob_create(token, length, on_close);
      recv_Blob_create();
    }

    public void send_Blob_create(String token, int length, int on_close) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("Blob_create", TMessageType.CALL, ++seqid_));
      Blob_create_args args = new Blob_create_args();
      args.setToken(token);
      args.setLength(length);
      args.setOn_close(on_close);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_Blob_create() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "Blob_create failed: out of sequence response");
      }
      Blob_create_result result = new Blob_create_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      return;
    }

    public boolean Blob_exists(String token, String hash) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      send_Blob_exists(token, hash);
      return recv_Blob_exists();
    }

    public void send_Blob_exists(String token, String hash) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("Blob_exists", TMessageType.CALL, ++seqid_));
      Blob_exists_args args = new Blob_exists_args();
      args.setToken(token);
      args.setHash(hash);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_Blob_exists() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "Blob_exists failed: out of sequence response");
      }
      Blob_exists_result result = new Blob_exists_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "Blob_exists failed: unknown result");
    }

    public void Blob_open(String token, String hash, String filename, int on_close) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      send_Blob_open(token, hash, filename, on_close);
      recv_Blob_open();
    }

    public void send_Blob_open(String token, String hash, String filename, int on_close) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("Blob_open", TMessageType.CALL, ++seqid_));
      Blob_open_args args = new Blob_open_args();
      args.setToken(token);
      args.setHash(hash);
      args.setFilename(filename);
      args.setOn_close(on_close);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_Blob_open() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "Blob_open failed: out of sequence response");
      }
      Blob_open_result result = new Blob_open_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      return;
    }

  }
  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void Blob_create(String token, int length, int on_close, AsyncMethodCallback<Blob_create_call> resultHandler) throws TException {
      checkReady();
      Blob_create_call method_call = new Blob_create_call(token, length, on_close, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class Blob_create_call extends TAsyncMethodCall {
      private String token;
      private int length;
      private int on_close;
      public Blob_create_call(String token, int length, int on_close, AsyncMethodCallback<Blob_create_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.length = length;
        this.on_close = on_close;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("Blob_create", TMessageType.CALL, 0));
        Blob_create_args args = new Blob_create_args();
        args.setToken(token);
        args.setLength(length);
        args.setOn_close(on_close);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Blob_create();
      }
    }

    public void Blob_exists(String token, String hash, AsyncMethodCallback<Blob_exists_call> resultHandler) throws TException {
      checkReady();
      Blob_exists_call method_call = new Blob_exists_call(token, hash, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class Blob_exists_call extends TAsyncMethodCall {
      private String token;
      private String hash;
      public Blob_exists_call(String token, String hash, AsyncMethodCallback<Blob_exists_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.hash = hash;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("Blob_exists", TMessageType.CALL, 0));
        Blob_exists_args args = new Blob_exists_args();
        args.setToken(token);
        args.setHash(hash);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Blob_exists();
      }
    }

    public void Blob_open(String token, String hash, String filename, int on_close, AsyncMethodCallback<Blob_open_call> resultHandler) throws TException {
      checkReady();
      Blob_open_call method_call = new Blob_open_call(token, hash, filename, on_close, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class Blob_open_call extends TAsyncMethodCall {
      private String token;
      private String hash;
      private String filename;
      private int on_close;
      public Blob_open_call(String token, String hash, String filename, int on_close, AsyncMethodCallback<Blob_open_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.hash = hash;
        this.filename = filename;
        this.on_close = on_close;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("Blob_open", TMessageType.CALL, 0));
        Blob_open_args args = new Blob_open_args();
        args.setToken(token);
        args.setHash(hash);
        args.setFilename(filename);
        args.setOn_close(on_close);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Blob_open();
      }
    }

  }

  public static class Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("Blob_create", new Blob_create());
      processMap_.put("Blob_exists", new Blob_exists());
      processMap_.put("Blob_open", new Blob_open());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class Blob_create implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        Blob_create_args args = new Blob_create_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("Blob_create", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        Blob_create_result result = new Blob_create_result();
        try {
          iface_.Blob_create(args.token, args.length, args.on_close);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing Blob_create", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing Blob_create");
          oprot.writeMessageBegin(new TMessage("Blob_create", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("Blob_create", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class Blob_exists implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        Blob_exists_args args = new Blob_exists_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("Blob_exists", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        Blob_exists_result result = new Blob_exists_result();
        try {
          result.success = iface_.Blob_exists(args.token, args.hash);
          result.setSuccessIsSet(true);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing Blob_exists", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing Blob_exists");
          oprot.writeMessageBegin(new TMessage("Blob_exists", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("Blob_exists", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class Blob_open implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        Blob_open_args args = new Blob_open_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("Blob_open", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        Blob_open_result result = new Blob_open_result();
        try {
          iface_.Blob_open(args.token, args.hash, args.filename, args.on_close);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing Blob_open", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing Blob_open");
          oprot.writeMessageBegin(new TMessage("Blob_open", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("Blob_open", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class Blob_create_args implements TBase<Blob_create_args, Blob_create_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Blob_create_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField LENGTH_FIELD_DESC = new TField("length", TType.I32, (short)2);
    private static final TField ON_CLOSE_FIELD_DESC = new TField("on_close", TType.I32, (short)3);

    public String token;
    public int length;
    public int on_close;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      LENGTH((short)2, "length"),
      ON_CLOSE((short)3, "on_close");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // LENGTH
            return LENGTH;
          case 3: // ON_CLOSE
            return ON_CLOSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LENGTH_ISSET_ID = 0;
    private static final int __ON_CLOSE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.LENGTH, new FieldMetaData("length", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.ON_CLOSE, new FieldMetaData("on_close", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Blob_create_args.class, metaDataMap);
    }

    public Blob_create_args() {
    }

    public Blob_create_args(
      String token,
      int length,
      int on_close)
    {
      this();
      this.token = token;
      this.length = length;
      setLengthIsSet(true);
      this.on_close = on_close;
      setOn_closeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Blob_create_args(Blob_create_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this.length = other.length;
      this.on_close = other.on_close;
    }

    public Blob_create_args deepCopy() {
      return new Blob_create_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      setLengthIsSet(false);
      this.length = 0;
      setOn_closeIsSet(false);
      this.on_close = 0;
    }

    public String getToken() {
      return this.token;
    }

    public Blob_create_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public int getLength() {
      return this.length;
    }

    public Blob_create_args setLength(int length) {
      this.length = length;
      setLengthIsSet(true);
      return this;
    }

    public void unsetLength() {
      __isset_bit_vector.clear(__LENGTH_ISSET_ID);
    }

    /** Returns true if field length is set (has been asigned a value) and false otherwise */
    public boolean isSetLength() {
      return __isset_bit_vector.get(__LENGTH_ISSET_ID);
    }

    public void setLengthIsSet(boolean value) {
      __isset_bit_vector.set(__LENGTH_ISSET_ID, value);
    }

    public int getOn_close() {
      return this.on_close;
    }

    public Blob_create_args setOn_close(int on_close) {
      this.on_close = on_close;
      setOn_closeIsSet(true);
      return this;
    }

    public void unsetOn_close() {
      __isset_bit_vector.clear(__ON_CLOSE_ISSET_ID);
    }

    /** Returns true if field on_close is set (has been asigned a value) and false otherwise */
    public boolean isSetOn_close() {
      return __isset_bit_vector.get(__ON_CLOSE_ISSET_ID);
    }

    public void setOn_closeIsSet(boolean value) {
      __isset_bit_vector.set(__ON_CLOSE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case LENGTH:
        if (value == null) {
          unsetLength();
        } else {
          setLength((Integer)value);
        }
        break;

      case ON_CLOSE:
        if (value == null) {
          unsetOn_close();
        } else {
          setOn_close((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case LENGTH:
        return new Integer(getLength());

      case ON_CLOSE:
        return new Integer(getOn_close());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case LENGTH:
        return isSetLength();
      case ON_CLOSE:
        return isSetOn_close();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Blob_create_args)
        return this.equals((Blob_create_args)that);
      return false;
    }

    public boolean equals(Blob_create_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      boolean this_present_on_close = true;
      boolean that_present_on_close = true;
      if (this_present_on_close || that_present_on_close) {
        if (!(this_present_on_close && that_present_on_close))
          return false;
        if (this.on_close != that.on_close)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Blob_create_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Blob_create_args typedOther = (Blob_create_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLength()).compareTo(typedOther.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = TBaseHelper.compareTo(this.length, typedOther.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOn_close()).compareTo(typedOther.isSetOn_close());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOn_close()) {
        lastComparison = TBaseHelper.compareTo(this.on_close, typedOther.on_close);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // LENGTH
            if (field.type == TType.I32) {
              this.length = iprot.readI32();
              setLengthIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ON_CLOSE
            if (field.type == TType.I32) {
              this.on_close = iprot.readI32();
              setOn_closeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeI32(this.length);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ON_CLOSE_FIELD_DESC);
      oprot.writeI32(this.on_close);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Blob_create_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
      if (!first) sb.append(", ");
      sb.append("on_close:");
      sb.append(this.on_close);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Blob_create_result implements TBase<Blob_create_result, Blob_create_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Blob_create_result");

    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);

    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Blob_create_result.class, metaDataMap);
    }

    public Blob_create_result() {
    }

    public Blob_create_result(
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5)
    {
      this();
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Blob_create_result(Blob_create_result other) {
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
    }

    public Blob_create_result deepCopy() {
      return new Blob_create_result(this);
    }

    @Override
    public void clear() {
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public Blob_create_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public Blob_create_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public Blob_create_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public Blob_create_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public Blob_create_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Blob_create_result)
        return this.equals((Blob_create_result)that);
      return false;
    }

    public boolean equals(Blob_create_result that) {
      if (that == null)
        return false;

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Blob_create_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Blob_create_result typedOther = (Blob_create_result)other;

      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Blob_create_result(");
      boolean first = true;

      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Blob_exists_args implements TBase<Blob_exists_args, Blob_exists_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Blob_exists_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField HASH_FIELD_DESC = new TField("hash", TType.STRING, (short)2);

    public String token;
    public String hash;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      HASH((short)2, "hash");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // HASH
            return HASH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.HASH, new FieldMetaData("hash", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Blob_exists_args.class, metaDataMap);
    }

    public Blob_exists_args() {
    }

    public Blob_exists_args(
      String token,
      String hash)
    {
      this();
      this.token = token;
      this.hash = hash;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Blob_exists_args(Blob_exists_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetHash()) {
        this.hash = other.hash;
      }
    }

    public Blob_exists_args deepCopy() {
      return new Blob_exists_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.hash = null;
    }

    public String getToken() {
      return this.token;
    }

    public Blob_exists_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getHash() {
      return this.hash;
    }

    public Blob_exists_args setHash(String hash) {
      this.hash = hash;
      return this;
    }

    public void unsetHash() {
      this.hash = null;
    }

    /** Returns true if field hash is set (has been asigned a value) and false otherwise */
    public boolean isSetHash() {
      return this.hash != null;
    }

    public void setHashIsSet(boolean value) {
      if (!value) {
        this.hash = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case HASH:
        if (value == null) {
          unsetHash();
        } else {
          setHash((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case HASH:
        return getHash();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case HASH:
        return isSetHash();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Blob_exists_args)
        return this.equals((Blob_exists_args)that);
      return false;
    }

    public boolean equals(Blob_exists_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_hash = true && this.isSetHash();
      boolean that_present_hash = true && that.isSetHash();
      if (this_present_hash || that_present_hash) {
        if (!(this_present_hash && that_present_hash))
          return false;
        if (!this.hash.equals(that.hash))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Blob_exists_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Blob_exists_args typedOther = (Blob_exists_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHash()).compareTo(typedOther.isSetHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHash()) {
        lastComparison = TBaseHelper.compareTo(this.hash, typedOther.hash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HASH
            if (field.type == TType.STRING) {
              this.hash = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.hash != null) {
        oprot.writeFieldBegin(HASH_FIELD_DESC);
        oprot.writeString(this.hash);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Blob_exists_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hash:");
      if (this.hash == null) {
        sb.append("null");
      } else {
        sb.append(this.hash);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Blob_exists_result implements TBase<Blob_exists_result, Blob_exists_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Blob_exists_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);

    public boolean success;
    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Blob_exists_result.class, metaDataMap);
    }

    public Blob_exists_result() {
    }

    public Blob_exists_result(
      boolean success,
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Blob_exists_result(Blob_exists_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
    }

    public Blob_exists_result deepCopy() {
      return new Blob_exists_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public Blob_exists_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public Blob_exists_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public Blob_exists_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public Blob_exists_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public Blob_exists_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public Blob_exists_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Blob_exists_result)
        return this.equals((Blob_exists_result)that);
      return false;
    }

    public boolean equals(Blob_exists_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Blob_exists_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Blob_exists_result typedOther = (Blob_exists_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Blob_exists_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Blob_open_args implements TBase<Blob_open_args, Blob_open_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Blob_open_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField HASH_FIELD_DESC = new TField("hash", TType.STRING, (short)2);
    private static final TField FILENAME_FIELD_DESC = new TField("filename", TType.STRING, (short)3);
    private static final TField ON_CLOSE_FIELD_DESC = new TField("on_close", TType.I32, (short)4);

    public String token;
    public String hash;
    public String filename;
    public int on_close;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      HASH((short)2, "hash"),
      FILENAME((short)3, "filename"),
      ON_CLOSE((short)4, "on_close");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // HASH
            return HASH;
          case 3: // FILENAME
            return FILENAME;
          case 4: // ON_CLOSE
            return ON_CLOSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ON_CLOSE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.HASH, new FieldMetaData("hash", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.FILENAME, new FieldMetaData("filename", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.ON_CLOSE, new FieldMetaData("on_close", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Blob_open_args.class, metaDataMap);
    }

    public Blob_open_args() {
    }

    public Blob_open_args(
      String token,
      String hash,
      String filename,
      int on_close)
    {
      this();
      this.token = token;
      this.hash = hash;
      this.filename = filename;
      this.on_close = on_close;
      setOn_closeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Blob_open_args(Blob_open_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetHash()) {
        this.hash = other.hash;
      }
      if (other.isSetFilename()) {
        this.filename = other.filename;
      }
      this.on_close = other.on_close;
    }

    public Blob_open_args deepCopy() {
      return new Blob_open_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.hash = null;
      this.filename = null;
      setOn_closeIsSet(false);
      this.on_close = 0;
    }

    public String getToken() {
      return this.token;
    }

    public Blob_open_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getHash() {
      return this.hash;
    }

    public Blob_open_args setHash(String hash) {
      this.hash = hash;
      return this;
    }

    public void unsetHash() {
      this.hash = null;
    }

    /** Returns true if field hash is set (has been asigned a value) and false otherwise */
    public boolean isSetHash() {
      return this.hash != null;
    }

    public void setHashIsSet(boolean value) {
      if (!value) {
        this.hash = null;
      }
    }

    public String getFilename() {
      return this.filename;
    }

    public Blob_open_args setFilename(String filename) {
      this.filename = filename;
      return this;
    }

    public void unsetFilename() {
      this.filename = null;
    }

    /** Returns true if field filename is set (has been asigned a value) and false otherwise */
    public boolean isSetFilename() {
      return this.filename != null;
    }

    public void setFilenameIsSet(boolean value) {
      if (!value) {
        this.filename = null;
      }
    }

    public int getOn_close() {
      return this.on_close;
    }

    public Blob_open_args setOn_close(int on_close) {
      this.on_close = on_close;
      setOn_closeIsSet(true);
      return this;
    }

    public void unsetOn_close() {
      __isset_bit_vector.clear(__ON_CLOSE_ISSET_ID);
    }

    /** Returns true if field on_close is set (has been asigned a value) and false otherwise */
    public boolean isSetOn_close() {
      return __isset_bit_vector.get(__ON_CLOSE_ISSET_ID);
    }

    public void setOn_closeIsSet(boolean value) {
      __isset_bit_vector.set(__ON_CLOSE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case HASH:
        if (value == null) {
          unsetHash();
        } else {
          setHash((String)value);
        }
        break;

      case FILENAME:
        if (value == null) {
          unsetFilename();
        } else {
          setFilename((String)value);
        }
        break;

      case ON_CLOSE:
        if (value == null) {
          unsetOn_close();
        } else {
          setOn_close((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case HASH:
        return getHash();

      case FILENAME:
        return getFilename();

      case ON_CLOSE:
        return new Integer(getOn_close());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case HASH:
        return isSetHash();
      case FILENAME:
        return isSetFilename();
      case ON_CLOSE:
        return isSetOn_close();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Blob_open_args)
        return this.equals((Blob_open_args)that);
      return false;
    }

    public boolean equals(Blob_open_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_hash = true && this.isSetHash();
      boolean that_present_hash = true && that.isSetHash();
      if (this_present_hash || that_present_hash) {
        if (!(this_present_hash && that_present_hash))
          return false;
        if (!this.hash.equals(that.hash))
          return false;
      }

      boolean this_present_filename = true && this.isSetFilename();
      boolean that_present_filename = true && that.isSetFilename();
      if (this_present_filename || that_present_filename) {
        if (!(this_present_filename && that_present_filename))
          return false;
        if (!this.filename.equals(that.filename))
          return false;
      }

      boolean this_present_on_close = true;
      boolean that_present_on_close = true;
      if (this_present_on_close || that_present_on_close) {
        if (!(this_present_on_close && that_present_on_close))
          return false;
        if (this.on_close != that.on_close)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Blob_open_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Blob_open_args typedOther = (Blob_open_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHash()).compareTo(typedOther.isSetHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHash()) {
        lastComparison = TBaseHelper.compareTo(this.hash, typedOther.hash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilename()).compareTo(typedOther.isSetFilename());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilename()) {
        lastComparison = TBaseHelper.compareTo(this.filename, typedOther.filename);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOn_close()).compareTo(typedOther.isSetOn_close());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOn_close()) {
        lastComparison = TBaseHelper.compareTo(this.on_close, typedOther.on_close);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HASH
            if (field.type == TType.STRING) {
              this.hash = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // FILENAME
            if (field.type == TType.STRING) {
              this.filename = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ON_CLOSE
            if (field.type == TType.I32) {
              this.on_close = iprot.readI32();
              setOn_closeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.hash != null) {
        oprot.writeFieldBegin(HASH_FIELD_DESC);
        oprot.writeString(this.hash);
        oprot.writeFieldEnd();
      }
      if (this.filename != null) {
        oprot.writeFieldBegin(FILENAME_FIELD_DESC);
        oprot.writeString(this.filename);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ON_CLOSE_FIELD_DESC);
      oprot.writeI32(this.on_close);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Blob_open_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hash:");
      if (this.hash == null) {
        sb.append("null");
      } else {
        sb.append(this.hash);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filename:");
      if (this.filename == null) {
        sb.append("null");
      } else {
        sb.append(this.filename);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("on_close:");
      sb.append(this.on_close);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Blob_open_result implements TBase<Blob_open_result, Blob_open_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Blob_open_result");

    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);

    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Blob_open_result.class, metaDataMap);
    }

    public Blob_open_result() {
    }

    public Blob_open_result(
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5)
    {
      this();
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Blob_open_result(Blob_open_result other) {
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
    }

    public Blob_open_result deepCopy() {
      return new Blob_open_result(this);
    }

    @Override
    public void clear() {
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public Blob_open_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public Blob_open_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public Blob_open_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public Blob_open_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public Blob_open_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Blob_open_result)
        return this.equals((Blob_open_result)that);
      return false;
    }

    public boolean equals(Blob_open_result that) {
      if (that == null)
        return false;

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Blob_open_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Blob_open_result typedOther = (Blob_open_result)other;

      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Blob_open_result(");
      boolean first = true;

      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
