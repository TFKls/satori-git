/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package satori.thrift.gen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class Entity {

  public interface Iface {

    public void Entity_delete(String token, long _self) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException;

    public List<EntityStruct> Entity_filter(String token, EntityStruct arg_struct) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException;

    public EntityStruct Entity_get_struct(String token, long _self) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException;

    public void Entity_oa_add_list(String token, long _self, List<Attribute> attributes) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException;

    public void Entity_oa_add_map(String token, long _self, Map<String,AnonymousAttribute> attributes) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException;

    public void Entity_oa_delete(String token, long _self, String name) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException;

    public Attribute Entity_oa_get(String token, long _self, String name) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException;

    public String Entity_oa_get_blob(String token, long _self, String name) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, BadAttributeType, TException;

    public String Entity_oa_get_blob_hash(String token, long _self, String name) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, BadAttributeType, TException;

    public List<Attribute> Entity_oa_get_list(String token, long _self) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException;

    public Map<String,AnonymousAttribute> Entity_oa_get_map(String token, long _self) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException;

    public String Entity_oa_get_str(String token, long _self, String name) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, BadAttributeType, TException;

    public void Entity_oa_set(String token, long _self, Attribute value) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException;

    public void Entity_oa_set_blob(String token, long _self, String name, int length, String filename) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException;

    public void Entity_oa_set_blob_hash(String token, long _self, String name, String value, String filename) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException;

    public void Entity_oa_set_list(String token, long _self, List<Attribute> attributes) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException;

    public void Entity_oa_set_map(String token, long _self, Map<String,AnonymousAttribute> attributes) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException;

    public void Entity_oa_set_str(String token, long _self, String name, String value) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException;

  }

  public interface AsyncIface {

    public void Entity_delete(String token, long _self, AsyncMethodCallback<AsyncClient.Entity_delete_call> resultHandler) throws TException;

    public void Entity_filter(String token, EntityStruct arg_struct, AsyncMethodCallback<AsyncClient.Entity_filter_call> resultHandler) throws TException;

    public void Entity_get_struct(String token, long _self, AsyncMethodCallback<AsyncClient.Entity_get_struct_call> resultHandler) throws TException;

    public void Entity_oa_add_list(String token, long _self, List<Attribute> attributes, AsyncMethodCallback<AsyncClient.Entity_oa_add_list_call> resultHandler) throws TException;

    public void Entity_oa_add_map(String token, long _self, Map<String,AnonymousAttribute> attributes, AsyncMethodCallback<AsyncClient.Entity_oa_add_map_call> resultHandler) throws TException;

    public void Entity_oa_delete(String token, long _self, String name, AsyncMethodCallback<AsyncClient.Entity_oa_delete_call> resultHandler) throws TException;

    public void Entity_oa_get(String token, long _self, String name, AsyncMethodCallback<AsyncClient.Entity_oa_get_call> resultHandler) throws TException;

    public void Entity_oa_get_blob(String token, long _self, String name, AsyncMethodCallback<AsyncClient.Entity_oa_get_blob_call> resultHandler) throws TException;

    public void Entity_oa_get_blob_hash(String token, long _self, String name, AsyncMethodCallback<AsyncClient.Entity_oa_get_blob_hash_call> resultHandler) throws TException;

    public void Entity_oa_get_list(String token, long _self, AsyncMethodCallback<AsyncClient.Entity_oa_get_list_call> resultHandler) throws TException;

    public void Entity_oa_get_map(String token, long _self, AsyncMethodCallback<AsyncClient.Entity_oa_get_map_call> resultHandler) throws TException;

    public void Entity_oa_get_str(String token, long _self, String name, AsyncMethodCallback<AsyncClient.Entity_oa_get_str_call> resultHandler) throws TException;

    public void Entity_oa_set(String token, long _self, Attribute value, AsyncMethodCallback<AsyncClient.Entity_oa_set_call> resultHandler) throws TException;

    public void Entity_oa_set_blob(String token, long _self, String name, int length, String filename, AsyncMethodCallback<AsyncClient.Entity_oa_set_blob_call> resultHandler) throws TException;

    public void Entity_oa_set_blob_hash(String token, long _self, String name, String value, String filename, AsyncMethodCallback<AsyncClient.Entity_oa_set_blob_hash_call> resultHandler) throws TException;

    public void Entity_oa_set_list(String token, long _self, List<Attribute> attributes, AsyncMethodCallback<AsyncClient.Entity_oa_set_list_call> resultHandler) throws TException;

    public void Entity_oa_set_map(String token, long _self, Map<String,AnonymousAttribute> attributes, AsyncMethodCallback<AsyncClient.Entity_oa_set_map_call> resultHandler) throws TException;

    public void Entity_oa_set_str(String token, long _self, String name, String value, AsyncMethodCallback<AsyncClient.Entity_oa_set_str_call> resultHandler) throws TException;

  }

  public static class Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public void Entity_delete(String token, long _self) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      send_Entity_delete(token, _self);
      recv_Entity_delete();
    }

    public void send_Entity_delete(String token, long _self) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("Entity_delete", TMessageType.CALL, ++seqid_));
      Entity_delete_args args = new Entity_delete_args();
      args.setToken(token);
      args.set_self(_self);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_Entity_delete() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "Entity_delete failed: out of sequence response");
      }
      Entity_delete_result result = new Entity_delete_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      return;
    }

    public List<EntityStruct> Entity_filter(String token, EntityStruct arg_struct) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      send_Entity_filter(token, arg_struct);
      return recv_Entity_filter();
    }

    public void send_Entity_filter(String token, EntityStruct arg_struct) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("Entity_filter", TMessageType.CALL, ++seqid_));
      Entity_filter_args args = new Entity_filter_args();
      args.setToken(token);
      args.setArg_struct(arg_struct);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<EntityStruct> recv_Entity_filter() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "Entity_filter failed: out of sequence response");
      }
      Entity_filter_result result = new Entity_filter_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "Entity_filter failed: unknown result");
    }

    public EntityStruct Entity_get_struct(String token, long _self) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      send_Entity_get_struct(token, _self);
      return recv_Entity_get_struct();
    }

    public void send_Entity_get_struct(String token, long _self) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("Entity_get_struct", TMessageType.CALL, ++seqid_));
      Entity_get_struct_args args = new Entity_get_struct_args();
      args.setToken(token);
      args.set_self(_self);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public EntityStruct recv_Entity_get_struct() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "Entity_get_struct failed: out of sequence response");
      }
      Entity_get_struct_result result = new Entity_get_struct_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "Entity_get_struct failed: unknown result");
    }

    public void Entity_oa_add_list(String token, long _self, List<Attribute> attributes) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      send_Entity_oa_add_list(token, _self, attributes);
      recv_Entity_oa_add_list();
    }

    public void send_Entity_oa_add_list(String token, long _self, List<Attribute> attributes) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("Entity_oa_add_list", TMessageType.CALL, ++seqid_));
      Entity_oa_add_list_args args = new Entity_oa_add_list_args();
      args.setToken(token);
      args.set_self(_self);
      args.setAttributes(attributes);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_Entity_oa_add_list() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "Entity_oa_add_list failed: out of sequence response");
      }
      Entity_oa_add_list_result result = new Entity_oa_add_list_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      return;
    }

    public void Entity_oa_add_map(String token, long _self, Map<String,AnonymousAttribute> attributes) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      send_Entity_oa_add_map(token, _self, attributes);
      recv_Entity_oa_add_map();
    }

    public void send_Entity_oa_add_map(String token, long _self, Map<String,AnonymousAttribute> attributes) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("Entity_oa_add_map", TMessageType.CALL, ++seqid_));
      Entity_oa_add_map_args args = new Entity_oa_add_map_args();
      args.setToken(token);
      args.set_self(_self);
      args.setAttributes(attributes);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_Entity_oa_add_map() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "Entity_oa_add_map failed: out of sequence response");
      }
      Entity_oa_add_map_result result = new Entity_oa_add_map_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      return;
    }

    public void Entity_oa_delete(String token, long _self, String name) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      send_Entity_oa_delete(token, _self, name);
      recv_Entity_oa_delete();
    }

    public void send_Entity_oa_delete(String token, long _self, String name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("Entity_oa_delete", TMessageType.CALL, ++seqid_));
      Entity_oa_delete_args args = new Entity_oa_delete_args();
      args.setToken(token);
      args.set_self(_self);
      args.setName(name);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_Entity_oa_delete() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "Entity_oa_delete failed: out of sequence response");
      }
      Entity_oa_delete_result result = new Entity_oa_delete_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      return;
    }

    public Attribute Entity_oa_get(String token, long _self, String name) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      send_Entity_oa_get(token, _self, name);
      return recv_Entity_oa_get();
    }

    public void send_Entity_oa_get(String token, long _self, String name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("Entity_oa_get", TMessageType.CALL, ++seqid_));
      Entity_oa_get_args args = new Entity_oa_get_args();
      args.setToken(token);
      args.set_self(_self);
      args.setName(name);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Attribute recv_Entity_oa_get() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "Entity_oa_get failed: out of sequence response");
      }
      Entity_oa_get_result result = new Entity_oa_get_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "Entity_oa_get failed: unknown result");
    }

    public String Entity_oa_get_blob(String token, long _self, String name) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, BadAttributeType, TException
    {
      send_Entity_oa_get_blob(token, _self, name);
      return recv_Entity_oa_get_blob();
    }

    public void send_Entity_oa_get_blob(String token, long _self, String name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("Entity_oa_get_blob", TMessageType.CALL, ++seqid_));
      Entity_oa_get_blob_args args = new Entity_oa_get_blob_args();
      args.setToken(token);
      args.set_self(_self);
      args.setName(name);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_Entity_oa_get_blob() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, BadAttributeType, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "Entity_oa_get_blob failed: out of sequence response");
      }
      Entity_oa_get_blob_result result = new Entity_oa_get_blob_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      if (result.error6 != null) {
        throw result.error6;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "Entity_oa_get_blob failed: unknown result");
    }

    public String Entity_oa_get_blob_hash(String token, long _self, String name) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, BadAttributeType, TException
    {
      send_Entity_oa_get_blob_hash(token, _self, name);
      return recv_Entity_oa_get_blob_hash();
    }

    public void send_Entity_oa_get_blob_hash(String token, long _self, String name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("Entity_oa_get_blob_hash", TMessageType.CALL, ++seqid_));
      Entity_oa_get_blob_hash_args args = new Entity_oa_get_blob_hash_args();
      args.setToken(token);
      args.set_self(_self);
      args.setName(name);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_Entity_oa_get_blob_hash() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, BadAttributeType, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "Entity_oa_get_blob_hash failed: out of sequence response");
      }
      Entity_oa_get_blob_hash_result result = new Entity_oa_get_blob_hash_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      if (result.error6 != null) {
        throw result.error6;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "Entity_oa_get_blob_hash failed: unknown result");
    }

    public List<Attribute> Entity_oa_get_list(String token, long _self) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      send_Entity_oa_get_list(token, _self);
      return recv_Entity_oa_get_list();
    }

    public void send_Entity_oa_get_list(String token, long _self) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("Entity_oa_get_list", TMessageType.CALL, ++seqid_));
      Entity_oa_get_list_args args = new Entity_oa_get_list_args();
      args.setToken(token);
      args.set_self(_self);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<Attribute> recv_Entity_oa_get_list() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "Entity_oa_get_list failed: out of sequence response");
      }
      Entity_oa_get_list_result result = new Entity_oa_get_list_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "Entity_oa_get_list failed: unknown result");
    }

    public Map<String,AnonymousAttribute> Entity_oa_get_map(String token, long _self) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      send_Entity_oa_get_map(token, _self);
      return recv_Entity_oa_get_map();
    }

    public void send_Entity_oa_get_map(String token, long _self) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("Entity_oa_get_map", TMessageType.CALL, ++seqid_));
      Entity_oa_get_map_args args = new Entity_oa_get_map_args();
      args.setToken(token);
      args.set_self(_self);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Map<String,AnonymousAttribute> recv_Entity_oa_get_map() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "Entity_oa_get_map failed: out of sequence response");
      }
      Entity_oa_get_map_result result = new Entity_oa_get_map_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "Entity_oa_get_map failed: unknown result");
    }

    public String Entity_oa_get_str(String token, long _self, String name) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, BadAttributeType, TException
    {
      send_Entity_oa_get_str(token, _self, name);
      return recv_Entity_oa_get_str();
    }

    public void send_Entity_oa_get_str(String token, long _self, String name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("Entity_oa_get_str", TMessageType.CALL, ++seqid_));
      Entity_oa_get_str_args args = new Entity_oa_get_str_args();
      args.setToken(token);
      args.set_self(_self);
      args.setName(name);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_Entity_oa_get_str() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, BadAttributeType, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "Entity_oa_get_str failed: out of sequence response");
      }
      Entity_oa_get_str_result result = new Entity_oa_get_str_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      if (result.error6 != null) {
        throw result.error6;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "Entity_oa_get_str failed: unknown result");
    }

    public void Entity_oa_set(String token, long _self, Attribute value) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      send_Entity_oa_set(token, _self, value);
      recv_Entity_oa_set();
    }

    public void send_Entity_oa_set(String token, long _self, Attribute value) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("Entity_oa_set", TMessageType.CALL, ++seqid_));
      Entity_oa_set_args args = new Entity_oa_set_args();
      args.setToken(token);
      args.set_self(_self);
      args.setValue(value);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_Entity_oa_set() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "Entity_oa_set failed: out of sequence response");
      }
      Entity_oa_set_result result = new Entity_oa_set_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      return;
    }

    public void Entity_oa_set_blob(String token, long _self, String name, int length, String filename) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      send_Entity_oa_set_blob(token, _self, name, length, filename);
      recv_Entity_oa_set_blob();
    }

    public void send_Entity_oa_set_blob(String token, long _self, String name, int length, String filename) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("Entity_oa_set_blob", TMessageType.CALL, ++seqid_));
      Entity_oa_set_blob_args args = new Entity_oa_set_blob_args();
      args.setToken(token);
      args.set_self(_self);
      args.setName(name);
      args.setLength(length);
      args.setFilename(filename);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_Entity_oa_set_blob() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "Entity_oa_set_blob failed: out of sequence response");
      }
      Entity_oa_set_blob_result result = new Entity_oa_set_blob_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      return;
    }

    public void Entity_oa_set_blob_hash(String token, long _self, String name, String value, String filename) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      send_Entity_oa_set_blob_hash(token, _self, name, value, filename);
      recv_Entity_oa_set_blob_hash();
    }

    public void send_Entity_oa_set_blob_hash(String token, long _self, String name, String value, String filename) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("Entity_oa_set_blob_hash", TMessageType.CALL, ++seqid_));
      Entity_oa_set_blob_hash_args args = new Entity_oa_set_blob_hash_args();
      args.setToken(token);
      args.set_self(_self);
      args.setName(name);
      args.setValue(value);
      args.setFilename(filename);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_Entity_oa_set_blob_hash() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "Entity_oa_set_blob_hash failed: out of sequence response");
      }
      Entity_oa_set_blob_hash_result result = new Entity_oa_set_blob_hash_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      return;
    }

    public void Entity_oa_set_list(String token, long _self, List<Attribute> attributes) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      send_Entity_oa_set_list(token, _self, attributes);
      recv_Entity_oa_set_list();
    }

    public void send_Entity_oa_set_list(String token, long _self, List<Attribute> attributes) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("Entity_oa_set_list", TMessageType.CALL, ++seqid_));
      Entity_oa_set_list_args args = new Entity_oa_set_list_args();
      args.setToken(token);
      args.set_self(_self);
      args.setAttributes(attributes);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_Entity_oa_set_list() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "Entity_oa_set_list failed: out of sequence response");
      }
      Entity_oa_set_list_result result = new Entity_oa_set_list_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      return;
    }

    public void Entity_oa_set_map(String token, long _self, Map<String,AnonymousAttribute> attributes) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      send_Entity_oa_set_map(token, _self, attributes);
      recv_Entity_oa_set_map();
    }

    public void send_Entity_oa_set_map(String token, long _self, Map<String,AnonymousAttribute> attributes) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("Entity_oa_set_map", TMessageType.CALL, ++seqid_));
      Entity_oa_set_map_args args = new Entity_oa_set_map_args();
      args.setToken(token);
      args.set_self(_self);
      args.setAttributes(attributes);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_Entity_oa_set_map() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "Entity_oa_set_map failed: out of sequence response");
      }
      Entity_oa_set_map_result result = new Entity_oa_set_map_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      return;
    }

    public void Entity_oa_set_str(String token, long _self, String name, String value) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      send_Entity_oa_set_str(token, _self, name, value);
      recv_Entity_oa_set_str();
    }

    public void send_Entity_oa_set_str(String token, long _self, String name, String value) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("Entity_oa_set_str", TMessageType.CALL, ++seqid_));
      Entity_oa_set_str_args args = new Entity_oa_set_str_args();
      args.setToken(token);
      args.set_self(_self);
      args.setName(name);
      args.setValue(value);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_Entity_oa_set_str() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "Entity_oa_set_str failed: out of sequence response");
      }
      Entity_oa_set_str_result result = new Entity_oa_set_str_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      return;
    }

  }
  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void Entity_delete(String token, long _self, AsyncMethodCallback<Entity_delete_call> resultHandler) throws TException {
      checkReady();
      Entity_delete_call method_call = new Entity_delete_call(token, _self, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class Entity_delete_call extends TAsyncMethodCall {
      private String token;
      private long _self;
      public Entity_delete_call(String token, long _self, AsyncMethodCallback<Entity_delete_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this._self = _self;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("Entity_delete", TMessageType.CALL, 0));
        Entity_delete_args args = new Entity_delete_args();
        args.setToken(token);
        args.set_self(_self);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Entity_delete();
      }
    }

    public void Entity_filter(String token, EntityStruct arg_struct, AsyncMethodCallback<Entity_filter_call> resultHandler) throws TException {
      checkReady();
      Entity_filter_call method_call = new Entity_filter_call(token, arg_struct, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class Entity_filter_call extends TAsyncMethodCall {
      private String token;
      private EntityStruct arg_struct;
      public Entity_filter_call(String token, EntityStruct arg_struct, AsyncMethodCallback<Entity_filter_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.arg_struct = arg_struct;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("Entity_filter", TMessageType.CALL, 0));
        Entity_filter_args args = new Entity_filter_args();
        args.setToken(token);
        args.setArg_struct(arg_struct);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<EntityStruct> getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Entity_filter();
      }
    }

    public void Entity_get_struct(String token, long _self, AsyncMethodCallback<Entity_get_struct_call> resultHandler) throws TException {
      checkReady();
      Entity_get_struct_call method_call = new Entity_get_struct_call(token, _self, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class Entity_get_struct_call extends TAsyncMethodCall {
      private String token;
      private long _self;
      public Entity_get_struct_call(String token, long _self, AsyncMethodCallback<Entity_get_struct_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this._self = _self;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("Entity_get_struct", TMessageType.CALL, 0));
        Entity_get_struct_args args = new Entity_get_struct_args();
        args.setToken(token);
        args.set_self(_self);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public EntityStruct getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Entity_get_struct();
      }
    }

    public void Entity_oa_add_list(String token, long _self, List<Attribute> attributes, AsyncMethodCallback<Entity_oa_add_list_call> resultHandler) throws TException {
      checkReady();
      Entity_oa_add_list_call method_call = new Entity_oa_add_list_call(token, _self, attributes, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class Entity_oa_add_list_call extends TAsyncMethodCall {
      private String token;
      private long _self;
      private List<Attribute> attributes;
      public Entity_oa_add_list_call(String token, long _self, List<Attribute> attributes, AsyncMethodCallback<Entity_oa_add_list_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this._self = _self;
        this.attributes = attributes;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("Entity_oa_add_list", TMessageType.CALL, 0));
        Entity_oa_add_list_args args = new Entity_oa_add_list_args();
        args.setToken(token);
        args.set_self(_self);
        args.setAttributes(attributes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Entity_oa_add_list();
      }
    }

    public void Entity_oa_add_map(String token, long _self, Map<String,AnonymousAttribute> attributes, AsyncMethodCallback<Entity_oa_add_map_call> resultHandler) throws TException {
      checkReady();
      Entity_oa_add_map_call method_call = new Entity_oa_add_map_call(token, _self, attributes, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class Entity_oa_add_map_call extends TAsyncMethodCall {
      private String token;
      private long _self;
      private Map<String,AnonymousAttribute> attributes;
      public Entity_oa_add_map_call(String token, long _self, Map<String,AnonymousAttribute> attributes, AsyncMethodCallback<Entity_oa_add_map_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this._self = _self;
        this.attributes = attributes;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("Entity_oa_add_map", TMessageType.CALL, 0));
        Entity_oa_add_map_args args = new Entity_oa_add_map_args();
        args.setToken(token);
        args.set_self(_self);
        args.setAttributes(attributes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Entity_oa_add_map();
      }
    }

    public void Entity_oa_delete(String token, long _self, String name, AsyncMethodCallback<Entity_oa_delete_call> resultHandler) throws TException {
      checkReady();
      Entity_oa_delete_call method_call = new Entity_oa_delete_call(token, _self, name, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class Entity_oa_delete_call extends TAsyncMethodCall {
      private String token;
      private long _self;
      private String name;
      public Entity_oa_delete_call(String token, long _self, String name, AsyncMethodCallback<Entity_oa_delete_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this._self = _self;
        this.name = name;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("Entity_oa_delete", TMessageType.CALL, 0));
        Entity_oa_delete_args args = new Entity_oa_delete_args();
        args.setToken(token);
        args.set_self(_self);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Entity_oa_delete();
      }
    }

    public void Entity_oa_get(String token, long _self, String name, AsyncMethodCallback<Entity_oa_get_call> resultHandler) throws TException {
      checkReady();
      Entity_oa_get_call method_call = new Entity_oa_get_call(token, _self, name, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class Entity_oa_get_call extends TAsyncMethodCall {
      private String token;
      private long _self;
      private String name;
      public Entity_oa_get_call(String token, long _self, String name, AsyncMethodCallback<Entity_oa_get_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this._self = _self;
        this.name = name;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("Entity_oa_get", TMessageType.CALL, 0));
        Entity_oa_get_args args = new Entity_oa_get_args();
        args.setToken(token);
        args.set_self(_self);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Attribute getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Entity_oa_get();
      }
    }

    public void Entity_oa_get_blob(String token, long _self, String name, AsyncMethodCallback<Entity_oa_get_blob_call> resultHandler) throws TException {
      checkReady();
      Entity_oa_get_blob_call method_call = new Entity_oa_get_blob_call(token, _self, name, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class Entity_oa_get_blob_call extends TAsyncMethodCall {
      private String token;
      private long _self;
      private String name;
      public Entity_oa_get_blob_call(String token, long _self, String name, AsyncMethodCallback<Entity_oa_get_blob_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this._self = _self;
        this.name = name;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("Entity_oa_get_blob", TMessageType.CALL, 0));
        Entity_oa_get_blob_args args = new Entity_oa_get_blob_args();
        args.setToken(token);
        args.set_self(_self);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, BadAttributeType, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Entity_oa_get_blob();
      }
    }

    public void Entity_oa_get_blob_hash(String token, long _self, String name, AsyncMethodCallback<Entity_oa_get_blob_hash_call> resultHandler) throws TException {
      checkReady();
      Entity_oa_get_blob_hash_call method_call = new Entity_oa_get_blob_hash_call(token, _self, name, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class Entity_oa_get_blob_hash_call extends TAsyncMethodCall {
      private String token;
      private long _self;
      private String name;
      public Entity_oa_get_blob_hash_call(String token, long _self, String name, AsyncMethodCallback<Entity_oa_get_blob_hash_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this._self = _self;
        this.name = name;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("Entity_oa_get_blob_hash", TMessageType.CALL, 0));
        Entity_oa_get_blob_hash_args args = new Entity_oa_get_blob_hash_args();
        args.setToken(token);
        args.set_self(_self);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, BadAttributeType, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Entity_oa_get_blob_hash();
      }
    }

    public void Entity_oa_get_list(String token, long _self, AsyncMethodCallback<Entity_oa_get_list_call> resultHandler) throws TException {
      checkReady();
      Entity_oa_get_list_call method_call = new Entity_oa_get_list_call(token, _self, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class Entity_oa_get_list_call extends TAsyncMethodCall {
      private String token;
      private long _self;
      public Entity_oa_get_list_call(String token, long _self, AsyncMethodCallback<Entity_oa_get_list_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this._self = _self;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("Entity_oa_get_list", TMessageType.CALL, 0));
        Entity_oa_get_list_args args = new Entity_oa_get_list_args();
        args.setToken(token);
        args.set_self(_self);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Attribute> getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Entity_oa_get_list();
      }
    }

    public void Entity_oa_get_map(String token, long _self, AsyncMethodCallback<Entity_oa_get_map_call> resultHandler) throws TException {
      checkReady();
      Entity_oa_get_map_call method_call = new Entity_oa_get_map_call(token, _self, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class Entity_oa_get_map_call extends TAsyncMethodCall {
      private String token;
      private long _self;
      public Entity_oa_get_map_call(String token, long _self, AsyncMethodCallback<Entity_oa_get_map_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this._self = _self;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("Entity_oa_get_map", TMessageType.CALL, 0));
        Entity_oa_get_map_args args = new Entity_oa_get_map_args();
        args.setToken(token);
        args.set_self(_self);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,AnonymousAttribute> getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Entity_oa_get_map();
      }
    }

    public void Entity_oa_get_str(String token, long _self, String name, AsyncMethodCallback<Entity_oa_get_str_call> resultHandler) throws TException {
      checkReady();
      Entity_oa_get_str_call method_call = new Entity_oa_get_str_call(token, _self, name, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class Entity_oa_get_str_call extends TAsyncMethodCall {
      private String token;
      private long _self;
      private String name;
      public Entity_oa_get_str_call(String token, long _self, String name, AsyncMethodCallback<Entity_oa_get_str_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this._self = _self;
        this.name = name;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("Entity_oa_get_str", TMessageType.CALL, 0));
        Entity_oa_get_str_args args = new Entity_oa_get_str_args();
        args.setToken(token);
        args.set_self(_self);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, BadAttributeType, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Entity_oa_get_str();
      }
    }

    public void Entity_oa_set(String token, long _self, Attribute value, AsyncMethodCallback<Entity_oa_set_call> resultHandler) throws TException {
      checkReady();
      Entity_oa_set_call method_call = new Entity_oa_set_call(token, _self, value, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class Entity_oa_set_call extends TAsyncMethodCall {
      private String token;
      private long _self;
      private Attribute value;
      public Entity_oa_set_call(String token, long _self, Attribute value, AsyncMethodCallback<Entity_oa_set_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this._self = _self;
        this.value = value;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("Entity_oa_set", TMessageType.CALL, 0));
        Entity_oa_set_args args = new Entity_oa_set_args();
        args.setToken(token);
        args.set_self(_self);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Entity_oa_set();
      }
    }

    public void Entity_oa_set_blob(String token, long _self, String name, int length, String filename, AsyncMethodCallback<Entity_oa_set_blob_call> resultHandler) throws TException {
      checkReady();
      Entity_oa_set_blob_call method_call = new Entity_oa_set_blob_call(token, _self, name, length, filename, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class Entity_oa_set_blob_call extends TAsyncMethodCall {
      private String token;
      private long _self;
      private String name;
      private int length;
      private String filename;
      public Entity_oa_set_blob_call(String token, long _self, String name, int length, String filename, AsyncMethodCallback<Entity_oa_set_blob_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this._self = _self;
        this.name = name;
        this.length = length;
        this.filename = filename;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("Entity_oa_set_blob", TMessageType.CALL, 0));
        Entity_oa_set_blob_args args = new Entity_oa_set_blob_args();
        args.setToken(token);
        args.set_self(_self);
        args.setName(name);
        args.setLength(length);
        args.setFilename(filename);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Entity_oa_set_blob();
      }
    }

    public void Entity_oa_set_blob_hash(String token, long _self, String name, String value, String filename, AsyncMethodCallback<Entity_oa_set_blob_hash_call> resultHandler) throws TException {
      checkReady();
      Entity_oa_set_blob_hash_call method_call = new Entity_oa_set_blob_hash_call(token, _self, name, value, filename, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class Entity_oa_set_blob_hash_call extends TAsyncMethodCall {
      private String token;
      private long _self;
      private String name;
      private String value;
      private String filename;
      public Entity_oa_set_blob_hash_call(String token, long _self, String name, String value, String filename, AsyncMethodCallback<Entity_oa_set_blob_hash_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this._self = _self;
        this.name = name;
        this.value = value;
        this.filename = filename;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("Entity_oa_set_blob_hash", TMessageType.CALL, 0));
        Entity_oa_set_blob_hash_args args = new Entity_oa_set_blob_hash_args();
        args.setToken(token);
        args.set_self(_self);
        args.setName(name);
        args.setValue(value);
        args.setFilename(filename);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Entity_oa_set_blob_hash();
      }
    }

    public void Entity_oa_set_list(String token, long _self, List<Attribute> attributes, AsyncMethodCallback<Entity_oa_set_list_call> resultHandler) throws TException {
      checkReady();
      Entity_oa_set_list_call method_call = new Entity_oa_set_list_call(token, _self, attributes, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class Entity_oa_set_list_call extends TAsyncMethodCall {
      private String token;
      private long _self;
      private List<Attribute> attributes;
      public Entity_oa_set_list_call(String token, long _self, List<Attribute> attributes, AsyncMethodCallback<Entity_oa_set_list_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this._self = _self;
        this.attributes = attributes;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("Entity_oa_set_list", TMessageType.CALL, 0));
        Entity_oa_set_list_args args = new Entity_oa_set_list_args();
        args.setToken(token);
        args.set_self(_self);
        args.setAttributes(attributes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Entity_oa_set_list();
      }
    }

    public void Entity_oa_set_map(String token, long _self, Map<String,AnonymousAttribute> attributes, AsyncMethodCallback<Entity_oa_set_map_call> resultHandler) throws TException {
      checkReady();
      Entity_oa_set_map_call method_call = new Entity_oa_set_map_call(token, _self, attributes, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class Entity_oa_set_map_call extends TAsyncMethodCall {
      private String token;
      private long _self;
      private Map<String,AnonymousAttribute> attributes;
      public Entity_oa_set_map_call(String token, long _self, Map<String,AnonymousAttribute> attributes, AsyncMethodCallback<Entity_oa_set_map_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this._self = _self;
        this.attributes = attributes;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("Entity_oa_set_map", TMessageType.CALL, 0));
        Entity_oa_set_map_args args = new Entity_oa_set_map_args();
        args.setToken(token);
        args.set_self(_self);
        args.setAttributes(attributes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Entity_oa_set_map();
      }
    }

    public void Entity_oa_set_str(String token, long _self, String name, String value, AsyncMethodCallback<Entity_oa_set_str_call> resultHandler) throws TException {
      checkReady();
      Entity_oa_set_str_call method_call = new Entity_oa_set_str_call(token, _self, name, value, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class Entity_oa_set_str_call extends TAsyncMethodCall {
      private String token;
      private long _self;
      private String name;
      private String value;
      public Entity_oa_set_str_call(String token, long _self, String name, String value, AsyncMethodCallback<Entity_oa_set_str_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this._self = _self;
        this.name = name;
        this.value = value;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("Entity_oa_set_str", TMessageType.CALL, 0));
        Entity_oa_set_str_args args = new Entity_oa_set_str_args();
        args.setToken(token);
        args.set_self(_self);
        args.setName(name);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Entity_oa_set_str();
      }
    }

  }

  public static class Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("Entity_delete", new Entity_delete());
      processMap_.put("Entity_filter", new Entity_filter());
      processMap_.put("Entity_get_struct", new Entity_get_struct());
      processMap_.put("Entity_oa_add_list", new Entity_oa_add_list());
      processMap_.put("Entity_oa_add_map", new Entity_oa_add_map());
      processMap_.put("Entity_oa_delete", new Entity_oa_delete());
      processMap_.put("Entity_oa_get", new Entity_oa_get());
      processMap_.put("Entity_oa_get_blob", new Entity_oa_get_blob());
      processMap_.put("Entity_oa_get_blob_hash", new Entity_oa_get_blob_hash());
      processMap_.put("Entity_oa_get_list", new Entity_oa_get_list());
      processMap_.put("Entity_oa_get_map", new Entity_oa_get_map());
      processMap_.put("Entity_oa_get_str", new Entity_oa_get_str());
      processMap_.put("Entity_oa_set", new Entity_oa_set());
      processMap_.put("Entity_oa_set_blob", new Entity_oa_set_blob());
      processMap_.put("Entity_oa_set_blob_hash", new Entity_oa_set_blob_hash());
      processMap_.put("Entity_oa_set_list", new Entity_oa_set_list());
      processMap_.put("Entity_oa_set_map", new Entity_oa_set_map());
      processMap_.put("Entity_oa_set_str", new Entity_oa_set_str());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class Entity_delete implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        Entity_delete_args args = new Entity_delete_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("Entity_delete", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        Entity_delete_result result = new Entity_delete_result();
        try {
          iface_.Entity_delete(args.token, args._self);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing Entity_delete", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing Entity_delete");
          oprot.writeMessageBegin(new TMessage("Entity_delete", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("Entity_delete", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class Entity_filter implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        Entity_filter_args args = new Entity_filter_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("Entity_filter", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        Entity_filter_result result = new Entity_filter_result();
        try {
          result.success = iface_.Entity_filter(args.token, args.arg_struct);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing Entity_filter", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing Entity_filter");
          oprot.writeMessageBegin(new TMessage("Entity_filter", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("Entity_filter", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class Entity_get_struct implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        Entity_get_struct_args args = new Entity_get_struct_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("Entity_get_struct", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        Entity_get_struct_result result = new Entity_get_struct_result();
        try {
          result.success = iface_.Entity_get_struct(args.token, args._self);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing Entity_get_struct", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing Entity_get_struct");
          oprot.writeMessageBegin(new TMessage("Entity_get_struct", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("Entity_get_struct", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class Entity_oa_add_list implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        Entity_oa_add_list_args args = new Entity_oa_add_list_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("Entity_oa_add_list", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        Entity_oa_add_list_result result = new Entity_oa_add_list_result();
        try {
          iface_.Entity_oa_add_list(args.token, args._self, args.attributes);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing Entity_oa_add_list", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing Entity_oa_add_list");
          oprot.writeMessageBegin(new TMessage("Entity_oa_add_list", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("Entity_oa_add_list", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class Entity_oa_add_map implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        Entity_oa_add_map_args args = new Entity_oa_add_map_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("Entity_oa_add_map", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        Entity_oa_add_map_result result = new Entity_oa_add_map_result();
        try {
          iface_.Entity_oa_add_map(args.token, args._self, args.attributes);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing Entity_oa_add_map", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing Entity_oa_add_map");
          oprot.writeMessageBegin(new TMessage("Entity_oa_add_map", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("Entity_oa_add_map", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class Entity_oa_delete implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        Entity_oa_delete_args args = new Entity_oa_delete_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("Entity_oa_delete", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        Entity_oa_delete_result result = new Entity_oa_delete_result();
        try {
          iface_.Entity_oa_delete(args.token, args._self, args.name);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing Entity_oa_delete", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing Entity_oa_delete");
          oprot.writeMessageBegin(new TMessage("Entity_oa_delete", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("Entity_oa_delete", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class Entity_oa_get implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        Entity_oa_get_args args = new Entity_oa_get_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("Entity_oa_get", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        Entity_oa_get_result result = new Entity_oa_get_result();
        try {
          result.success = iface_.Entity_oa_get(args.token, args._self, args.name);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing Entity_oa_get", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing Entity_oa_get");
          oprot.writeMessageBegin(new TMessage("Entity_oa_get", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("Entity_oa_get", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class Entity_oa_get_blob implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        Entity_oa_get_blob_args args = new Entity_oa_get_blob_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("Entity_oa_get_blob", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        Entity_oa_get_blob_result result = new Entity_oa_get_blob_result();
        try {
          result.success = iface_.Entity_oa_get_blob(args.token, args._self, args.name);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (BadAttributeType error6) {
          result.error6 = error6;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing Entity_oa_get_blob", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing Entity_oa_get_blob");
          oprot.writeMessageBegin(new TMessage("Entity_oa_get_blob", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("Entity_oa_get_blob", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class Entity_oa_get_blob_hash implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        Entity_oa_get_blob_hash_args args = new Entity_oa_get_blob_hash_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("Entity_oa_get_blob_hash", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        Entity_oa_get_blob_hash_result result = new Entity_oa_get_blob_hash_result();
        try {
          result.success = iface_.Entity_oa_get_blob_hash(args.token, args._self, args.name);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (BadAttributeType error6) {
          result.error6 = error6;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing Entity_oa_get_blob_hash", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing Entity_oa_get_blob_hash");
          oprot.writeMessageBegin(new TMessage("Entity_oa_get_blob_hash", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("Entity_oa_get_blob_hash", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class Entity_oa_get_list implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        Entity_oa_get_list_args args = new Entity_oa_get_list_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("Entity_oa_get_list", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        Entity_oa_get_list_result result = new Entity_oa_get_list_result();
        try {
          result.success = iface_.Entity_oa_get_list(args.token, args._self);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing Entity_oa_get_list", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing Entity_oa_get_list");
          oprot.writeMessageBegin(new TMessage("Entity_oa_get_list", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("Entity_oa_get_list", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class Entity_oa_get_map implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        Entity_oa_get_map_args args = new Entity_oa_get_map_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("Entity_oa_get_map", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        Entity_oa_get_map_result result = new Entity_oa_get_map_result();
        try {
          result.success = iface_.Entity_oa_get_map(args.token, args._self);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing Entity_oa_get_map", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing Entity_oa_get_map");
          oprot.writeMessageBegin(new TMessage("Entity_oa_get_map", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("Entity_oa_get_map", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class Entity_oa_get_str implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        Entity_oa_get_str_args args = new Entity_oa_get_str_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("Entity_oa_get_str", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        Entity_oa_get_str_result result = new Entity_oa_get_str_result();
        try {
          result.success = iface_.Entity_oa_get_str(args.token, args._self, args.name);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (BadAttributeType error6) {
          result.error6 = error6;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing Entity_oa_get_str", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing Entity_oa_get_str");
          oprot.writeMessageBegin(new TMessage("Entity_oa_get_str", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("Entity_oa_get_str", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class Entity_oa_set implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        Entity_oa_set_args args = new Entity_oa_set_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("Entity_oa_set", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        Entity_oa_set_result result = new Entity_oa_set_result();
        try {
          iface_.Entity_oa_set(args.token, args._self, args.value);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing Entity_oa_set", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing Entity_oa_set");
          oprot.writeMessageBegin(new TMessage("Entity_oa_set", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("Entity_oa_set", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class Entity_oa_set_blob implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        Entity_oa_set_blob_args args = new Entity_oa_set_blob_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("Entity_oa_set_blob", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        Entity_oa_set_blob_result result = new Entity_oa_set_blob_result();
        try {
          iface_.Entity_oa_set_blob(args.token, args._self, args.name, args.length, args.filename);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing Entity_oa_set_blob", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing Entity_oa_set_blob");
          oprot.writeMessageBegin(new TMessage("Entity_oa_set_blob", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("Entity_oa_set_blob", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class Entity_oa_set_blob_hash implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        Entity_oa_set_blob_hash_args args = new Entity_oa_set_blob_hash_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("Entity_oa_set_blob_hash", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        Entity_oa_set_blob_hash_result result = new Entity_oa_set_blob_hash_result();
        try {
          iface_.Entity_oa_set_blob_hash(args.token, args._self, args.name, args.value, args.filename);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing Entity_oa_set_blob_hash", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing Entity_oa_set_blob_hash");
          oprot.writeMessageBegin(new TMessage("Entity_oa_set_blob_hash", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("Entity_oa_set_blob_hash", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class Entity_oa_set_list implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        Entity_oa_set_list_args args = new Entity_oa_set_list_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("Entity_oa_set_list", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        Entity_oa_set_list_result result = new Entity_oa_set_list_result();
        try {
          iface_.Entity_oa_set_list(args.token, args._self, args.attributes);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing Entity_oa_set_list", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing Entity_oa_set_list");
          oprot.writeMessageBegin(new TMessage("Entity_oa_set_list", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("Entity_oa_set_list", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class Entity_oa_set_map implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        Entity_oa_set_map_args args = new Entity_oa_set_map_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("Entity_oa_set_map", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        Entity_oa_set_map_result result = new Entity_oa_set_map_result();
        try {
          iface_.Entity_oa_set_map(args.token, args._self, args.attributes);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing Entity_oa_set_map", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing Entity_oa_set_map");
          oprot.writeMessageBegin(new TMessage("Entity_oa_set_map", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("Entity_oa_set_map", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class Entity_oa_set_str implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        Entity_oa_set_str_args args = new Entity_oa_set_str_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("Entity_oa_set_str", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        Entity_oa_set_str_result result = new Entity_oa_set_str_result();
        try {
          iface_.Entity_oa_set_str(args.token, args._self, args.name, args.value);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing Entity_oa_set_str", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing Entity_oa_set_str");
          oprot.writeMessageBegin(new TMessage("Entity_oa_set_str", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("Entity_oa_set_str", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class Entity_delete_args implements TBase<Entity_delete_args, Entity_delete_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_delete_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField _SELF_FIELD_DESC = new TField("_self", TType.I64, (short)2);

    public String token;
    public long _self;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      _SELF((short)2, "_self");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // _SELF
            return _SELF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SELF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields._SELF, new FieldMetaData("_self", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64          , "EntityId")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_delete_args.class, metaDataMap);
    }

    public Entity_delete_args() {
    }

    public Entity_delete_args(
      String token,
      long _self)
    {
      this();
      this.token = token;
      this._self = _self;
      set_selfIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_delete_args(Entity_delete_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this._self = other._self;
    }

    public Entity_delete_args deepCopy() {
      return new Entity_delete_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      set_selfIsSet(false);
      this._self = 0;
    }

    public String getToken() {
      return this.token;
    }

    public Entity_delete_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long get_self() {
      return this._self;
    }

    public Entity_delete_args set_self(long _self) {
      this._self = _self;
      set_selfIsSet(true);
      return this;
    }

    public void unset_self() {
      __isset_bit_vector.clear(___SELF_ISSET_ID);
    }

    /** Returns true if field _self is set (has been asigned a value) and false otherwise */
    public boolean isSet_self() {
      return __isset_bit_vector.get(___SELF_ISSET_ID);
    }

    public void set_selfIsSet(boolean value) {
      __isset_bit_vector.set(___SELF_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case _SELF:
        if (value == null) {
          unset_self();
        } else {
          set_self((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case _SELF:
        return new Long(get_self());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case _SELF:
        return isSet_self();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_delete_args)
        return this.equals((Entity_delete_args)that);
      return false;
    }

    public boolean equals(Entity_delete_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present__self = true;
      boolean that_present__self = true;
      if (this_present__self || that_present__self) {
        if (!(this_present__self && that_present__self))
          return false;
        if (this._self != that._self)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_delete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_delete_args typedOther = (Entity_delete_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_self()).compareTo(typedOther.isSet_self());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_self()) {
        lastComparison = TBaseHelper.compareTo(this._self, typedOther._self);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // _SELF
            if (field.type == TType.I64) {
              this._self = iprot.readI64();
              set_selfIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_SELF_FIELD_DESC);
      oprot.writeI64(this._self);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_delete_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_self:");
      sb.append(this._self);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_delete_result implements TBase<Entity_delete_result, Entity_delete_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_delete_result");

    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);

    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_delete_result.class, metaDataMap);
    }

    public Entity_delete_result() {
    }

    public Entity_delete_result(
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5)
    {
      this();
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_delete_result(Entity_delete_result other) {
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
    }

    public Entity_delete_result deepCopy() {
      return new Entity_delete_result(this);
    }

    @Override
    public void clear() {
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public Entity_delete_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public Entity_delete_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public Entity_delete_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public Entity_delete_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public Entity_delete_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_delete_result)
        return this.equals((Entity_delete_result)that);
      return false;
    }

    public boolean equals(Entity_delete_result that) {
      if (that == null)
        return false;

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_delete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_delete_result typedOther = (Entity_delete_result)other;

      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_delete_result(");
      boolean first = true;

      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_filter_args implements TBase<Entity_filter_args, Entity_filter_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_filter_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField ARG_STRUCT_FIELD_DESC = new TField("arg_struct", TType.STRUCT, (short)2);

    public String token;
    public EntityStruct arg_struct;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      ARG_STRUCT((short)2, "arg_struct");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // ARG_STRUCT
            return ARG_STRUCT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.ARG_STRUCT, new FieldMetaData("arg_struct", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, EntityStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_filter_args.class, metaDataMap);
    }

    public Entity_filter_args() {
    }

    public Entity_filter_args(
      String token,
      EntityStruct arg_struct)
    {
      this();
      this.token = token;
      this.arg_struct = arg_struct;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_filter_args(Entity_filter_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetArg_struct()) {
        this.arg_struct = new EntityStruct(other.arg_struct);
      }
    }

    public Entity_filter_args deepCopy() {
      return new Entity_filter_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.arg_struct = null;
    }

    public String getToken() {
      return this.token;
    }

    public Entity_filter_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public EntityStruct getArg_struct() {
      return this.arg_struct;
    }

    public Entity_filter_args setArg_struct(EntityStruct arg_struct) {
      this.arg_struct = arg_struct;
      return this;
    }

    public void unsetArg_struct() {
      this.arg_struct = null;
    }

    /** Returns true if field arg_struct is set (has been asigned a value) and false otherwise */
    public boolean isSetArg_struct() {
      return this.arg_struct != null;
    }

    public void setArg_structIsSet(boolean value) {
      if (!value) {
        this.arg_struct = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case ARG_STRUCT:
        if (value == null) {
          unsetArg_struct();
        } else {
          setArg_struct((EntityStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case ARG_STRUCT:
        return getArg_struct();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case ARG_STRUCT:
        return isSetArg_struct();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_filter_args)
        return this.equals((Entity_filter_args)that);
      return false;
    }

    public boolean equals(Entity_filter_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_arg_struct = true && this.isSetArg_struct();
      boolean that_present_arg_struct = true && that.isSetArg_struct();
      if (this_present_arg_struct || that_present_arg_struct) {
        if (!(this_present_arg_struct && that_present_arg_struct))
          return false;
        if (!this.arg_struct.equals(that.arg_struct))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_filter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_filter_args typedOther = (Entity_filter_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg_struct()).compareTo(typedOther.isSetArg_struct());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg_struct()) {
        lastComparison = TBaseHelper.compareTo(this.arg_struct, typedOther.arg_struct);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ARG_STRUCT
            if (field.type == TType.STRUCT) {
              this.arg_struct = new EntityStruct();
              this.arg_struct.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.arg_struct != null) {
        oprot.writeFieldBegin(ARG_STRUCT_FIELD_DESC);
        this.arg_struct.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_filter_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg_struct:");
      if (this.arg_struct == null) {
        sb.append("null");
      } else {
        sb.append(this.arg_struct);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_filter_result implements TBase<Entity_filter_result, Entity_filter_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_filter_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);

    public List<EntityStruct> success;
    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, EntityStruct.class))));
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_filter_result.class, metaDataMap);
    }

    public Entity_filter_result() {
    }

    public Entity_filter_result(
      List<EntityStruct> success,
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5)
    {
      this();
      this.success = success;
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_filter_result(Entity_filter_result other) {
      if (other.isSetSuccess()) {
        List<EntityStruct> __this__success = new ArrayList<EntityStruct>();
        for (EntityStruct other_element : other.success) {
          __this__success.add(new EntityStruct(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
    }

    public Entity_filter_result deepCopy() {
      return new Entity_filter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<EntityStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(EntityStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<EntityStruct>();
      }
      this.success.add(elem);
    }

    public List<EntityStruct> getSuccess() {
      return this.success;
    }

    public Entity_filter_result setSuccess(List<EntityStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public Entity_filter_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public Entity_filter_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public Entity_filter_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public Entity_filter_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public Entity_filter_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<EntityStruct>)value);
        }
        break;

      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_filter_result)
        return this.equals((Entity_filter_result)that);
      return false;
    }

    public boolean equals(Entity_filter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_filter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_filter_result typedOther = (Entity_filter_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list22 = iprot.readListBegin();
                this.success = new ArrayList<EntityStruct>(_list22.size);
                for (int _i23 = 0; _i23 < _list22.size; ++_i23)
                {
                  EntityStruct _elem24;
                  _elem24 = new EntityStruct();
                  _elem24.read(iprot);
                  this.success.add(_elem24);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (EntityStruct _iter25 : this.success)
          {
            _iter25.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_filter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_get_struct_args implements TBase<Entity_get_struct_args, Entity_get_struct_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_get_struct_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField _SELF_FIELD_DESC = new TField("_self", TType.I64, (short)2);

    public String token;
    public long _self;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      _SELF((short)2, "_self");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // _SELF
            return _SELF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SELF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields._SELF, new FieldMetaData("_self", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64          , "EntityId")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_get_struct_args.class, metaDataMap);
    }

    public Entity_get_struct_args() {
    }

    public Entity_get_struct_args(
      String token,
      long _self)
    {
      this();
      this.token = token;
      this._self = _self;
      set_selfIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_get_struct_args(Entity_get_struct_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this._self = other._self;
    }

    public Entity_get_struct_args deepCopy() {
      return new Entity_get_struct_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      set_selfIsSet(false);
      this._self = 0;
    }

    public String getToken() {
      return this.token;
    }

    public Entity_get_struct_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long get_self() {
      return this._self;
    }

    public Entity_get_struct_args set_self(long _self) {
      this._self = _self;
      set_selfIsSet(true);
      return this;
    }

    public void unset_self() {
      __isset_bit_vector.clear(___SELF_ISSET_ID);
    }

    /** Returns true if field _self is set (has been asigned a value) and false otherwise */
    public boolean isSet_self() {
      return __isset_bit_vector.get(___SELF_ISSET_ID);
    }

    public void set_selfIsSet(boolean value) {
      __isset_bit_vector.set(___SELF_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case _SELF:
        if (value == null) {
          unset_self();
        } else {
          set_self((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case _SELF:
        return new Long(get_self());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case _SELF:
        return isSet_self();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_get_struct_args)
        return this.equals((Entity_get_struct_args)that);
      return false;
    }

    public boolean equals(Entity_get_struct_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present__self = true;
      boolean that_present__self = true;
      if (this_present__self || that_present__self) {
        if (!(this_present__self && that_present__self))
          return false;
        if (this._self != that._self)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_get_struct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_get_struct_args typedOther = (Entity_get_struct_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_self()).compareTo(typedOther.isSet_self());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_self()) {
        lastComparison = TBaseHelper.compareTo(this._self, typedOther._self);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // _SELF
            if (field.type == TType.I64) {
              this._self = iprot.readI64();
              set_selfIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_SELF_FIELD_DESC);
      oprot.writeI64(this._self);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_get_struct_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_self:");
      sb.append(this._self);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_get_struct_result implements TBase<Entity_get_struct_result, Entity_get_struct_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_get_struct_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);

    public EntityStruct success;
    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, EntityStruct.class)));
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_get_struct_result.class, metaDataMap);
    }

    public Entity_get_struct_result() {
    }

    public Entity_get_struct_result(
      EntityStruct success,
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5)
    {
      this();
      this.success = success;
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_get_struct_result(Entity_get_struct_result other) {
      if (other.isSetSuccess()) {
        this.success = new EntityStruct(other.success);
      }
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
    }

    public Entity_get_struct_result deepCopy() {
      return new Entity_get_struct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
    }

    public EntityStruct getSuccess() {
      return this.success;
    }

    public Entity_get_struct_result setSuccess(EntityStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public Entity_get_struct_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public Entity_get_struct_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public Entity_get_struct_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public Entity_get_struct_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public Entity_get_struct_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((EntityStruct)value);
        }
        break;

      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_get_struct_result)
        return this.equals((Entity_get_struct_result)that);
      return false;
    }

    public boolean equals(Entity_get_struct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_get_struct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_get_struct_result typedOther = (Entity_get_struct_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new EntityStruct();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_get_struct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_add_list_args implements TBase<Entity_oa_add_list_args, Entity_oa_add_list_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_add_list_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField _SELF_FIELD_DESC = new TField("_self", TType.I64, (short)2);
    private static final TField ATTRIBUTES_FIELD_DESC = new TField("attributes", TType.LIST, (short)3);

    public String token;
    public long _self;
    public List<Attribute> attributes;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      _SELF((short)2, "_self"),
      ATTRIBUTES((short)3, "attributes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // _SELF
            return _SELF;
          case 3: // ATTRIBUTES
            return ATTRIBUTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SELF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields._SELF, new FieldMetaData("_self", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64          , "EntityId")));
      tmpMap.put(_Fields.ATTRIBUTES, new FieldMetaData("attributes", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, Attribute.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_add_list_args.class, metaDataMap);
    }

    public Entity_oa_add_list_args() {
    }

    public Entity_oa_add_list_args(
      String token,
      long _self,
      List<Attribute> attributes)
    {
      this();
      this.token = token;
      this._self = _self;
      set_selfIsSet(true);
      this.attributes = attributes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_add_list_args(Entity_oa_add_list_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this._self = other._self;
      if (other.isSetAttributes()) {
        List<Attribute> __this__attributes = new ArrayList<Attribute>();
        for (Attribute other_element : other.attributes) {
          __this__attributes.add(new Attribute(other_element));
        }
        this.attributes = __this__attributes;
      }
    }

    public Entity_oa_add_list_args deepCopy() {
      return new Entity_oa_add_list_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      set_selfIsSet(false);
      this._self = 0;
      this.attributes = null;
    }

    public String getToken() {
      return this.token;
    }

    public Entity_oa_add_list_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long get_self() {
      return this._self;
    }

    public Entity_oa_add_list_args set_self(long _self) {
      this._self = _self;
      set_selfIsSet(true);
      return this;
    }

    public void unset_self() {
      __isset_bit_vector.clear(___SELF_ISSET_ID);
    }

    /** Returns true if field _self is set (has been asigned a value) and false otherwise */
    public boolean isSet_self() {
      return __isset_bit_vector.get(___SELF_ISSET_ID);
    }

    public void set_selfIsSet(boolean value) {
      __isset_bit_vector.set(___SELF_ISSET_ID, value);
    }

    public int getAttributesSize() {
      return (this.attributes == null) ? 0 : this.attributes.size();
    }

    public java.util.Iterator<Attribute> getAttributesIterator() {
      return (this.attributes == null) ? null : this.attributes.iterator();
    }

    public void addToAttributes(Attribute elem) {
      if (this.attributes == null) {
        this.attributes = new ArrayList<Attribute>();
      }
      this.attributes.add(elem);
    }

    public List<Attribute> getAttributes() {
      return this.attributes;
    }

    public Entity_oa_add_list_args setAttributes(List<Attribute> attributes) {
      this.attributes = attributes;
      return this;
    }

    public void unsetAttributes() {
      this.attributes = null;
    }

    /** Returns true if field attributes is set (has been asigned a value) and false otherwise */
    public boolean isSetAttributes() {
      return this.attributes != null;
    }

    public void setAttributesIsSet(boolean value) {
      if (!value) {
        this.attributes = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case _SELF:
        if (value == null) {
          unset_self();
        } else {
          set_self((Long)value);
        }
        break;

      case ATTRIBUTES:
        if (value == null) {
          unsetAttributes();
        } else {
          setAttributes((List<Attribute>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case _SELF:
        return new Long(get_self());

      case ATTRIBUTES:
        return getAttributes();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case _SELF:
        return isSet_self();
      case ATTRIBUTES:
        return isSetAttributes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_add_list_args)
        return this.equals((Entity_oa_add_list_args)that);
      return false;
    }

    public boolean equals(Entity_oa_add_list_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present__self = true;
      boolean that_present__self = true;
      if (this_present__self || that_present__self) {
        if (!(this_present__self && that_present__self))
          return false;
        if (this._self != that._self)
          return false;
      }

      boolean this_present_attributes = true && this.isSetAttributes();
      boolean that_present_attributes = true && that.isSetAttributes();
      if (this_present_attributes || that_present_attributes) {
        if (!(this_present_attributes && that_present_attributes))
          return false;
        if (!this.attributes.equals(that.attributes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_add_list_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_add_list_args typedOther = (Entity_oa_add_list_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_self()).compareTo(typedOther.isSet_self());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_self()) {
        lastComparison = TBaseHelper.compareTo(this._self, typedOther._self);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttributes()) {
        lastComparison = TBaseHelper.compareTo(this.attributes, typedOther.attributes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // _SELF
            if (field.type == TType.I64) {
              this._self = iprot.readI64();
              set_selfIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ATTRIBUTES
            if (field.type == TType.LIST) {
              {
                TList _list26 = iprot.readListBegin();
                this.attributes = new ArrayList<Attribute>(_list26.size);
                for (int _i27 = 0; _i27 < _list26.size; ++_i27)
                {
                  Attribute _elem28;
                  _elem28 = new Attribute();
                  _elem28.read(iprot);
                  this.attributes.add(_elem28);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_SELF_FIELD_DESC);
      oprot.writeI64(this._self);
      oprot.writeFieldEnd();
      if (this.attributes != null) {
        oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.attributes.size()));
          for (Attribute _iter29 : this.attributes)
          {
            _iter29.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_add_list_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_self:");
      sb.append(this._self);
      first = false;
      if (!first) sb.append(", ");
      sb.append("attributes:");
      if (this.attributes == null) {
        sb.append("null");
      } else {
        sb.append(this.attributes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_add_list_result implements TBase<Entity_oa_add_list_result, Entity_oa_add_list_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_add_list_result");

    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);

    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_add_list_result.class, metaDataMap);
    }

    public Entity_oa_add_list_result() {
    }

    public Entity_oa_add_list_result(
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5)
    {
      this();
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_add_list_result(Entity_oa_add_list_result other) {
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
    }

    public Entity_oa_add_list_result deepCopy() {
      return new Entity_oa_add_list_result(this);
    }

    @Override
    public void clear() {
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public Entity_oa_add_list_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public Entity_oa_add_list_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public Entity_oa_add_list_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public Entity_oa_add_list_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public Entity_oa_add_list_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_add_list_result)
        return this.equals((Entity_oa_add_list_result)that);
      return false;
    }

    public boolean equals(Entity_oa_add_list_result that) {
      if (that == null)
        return false;

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_add_list_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_add_list_result typedOther = (Entity_oa_add_list_result)other;

      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_add_list_result(");
      boolean first = true;

      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_add_map_args implements TBase<Entity_oa_add_map_args, Entity_oa_add_map_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_add_map_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField _SELF_FIELD_DESC = new TField("_self", TType.I64, (short)2);
    private static final TField ATTRIBUTES_FIELD_DESC = new TField("attributes", TType.MAP, (short)3);

    public String token;
    public long _self;
    public Map<String,AnonymousAttribute> attributes;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      _SELF((short)2, "_self"),
      ATTRIBUTES((short)3, "attributes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // _SELF
            return _SELF;
          case 3: // ATTRIBUTES
            return ATTRIBUTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SELF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields._SELF, new FieldMetaData("_self", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64          , "EntityId")));
      tmpMap.put(_Fields.ATTRIBUTES, new FieldMetaData("attributes", TFieldRequirementType.DEFAULT, 
          new MapMetaData(TType.MAP, 
              new FieldValueMetaData(TType.STRING), 
              new StructMetaData(TType.STRUCT, AnonymousAttribute.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_add_map_args.class, metaDataMap);
    }

    public Entity_oa_add_map_args() {
    }

    public Entity_oa_add_map_args(
      String token,
      long _self,
      Map<String,AnonymousAttribute> attributes)
    {
      this();
      this.token = token;
      this._self = _self;
      set_selfIsSet(true);
      this.attributes = attributes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_add_map_args(Entity_oa_add_map_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this._self = other._self;
      if (other.isSetAttributes()) {
        Map<String,AnonymousAttribute> __this__attributes = new HashMap<String,AnonymousAttribute>();
        for (Map.Entry<String, AnonymousAttribute> other_element : other.attributes.entrySet()) {

          String other_element_key = other_element.getKey();
          AnonymousAttribute other_element_value = other_element.getValue();

          String __this__attributes_copy_key = other_element_key;

          AnonymousAttribute __this__attributes_copy_value = new AnonymousAttribute(other_element_value);

          __this__attributes.put(__this__attributes_copy_key, __this__attributes_copy_value);
        }
        this.attributes = __this__attributes;
      }
    }

    public Entity_oa_add_map_args deepCopy() {
      return new Entity_oa_add_map_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      set_selfIsSet(false);
      this._self = 0;
      this.attributes = null;
    }

    public String getToken() {
      return this.token;
    }

    public Entity_oa_add_map_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long get_self() {
      return this._self;
    }

    public Entity_oa_add_map_args set_self(long _self) {
      this._self = _self;
      set_selfIsSet(true);
      return this;
    }

    public void unset_self() {
      __isset_bit_vector.clear(___SELF_ISSET_ID);
    }

    /** Returns true if field _self is set (has been asigned a value) and false otherwise */
    public boolean isSet_self() {
      return __isset_bit_vector.get(___SELF_ISSET_ID);
    }

    public void set_selfIsSet(boolean value) {
      __isset_bit_vector.set(___SELF_ISSET_ID, value);
    }

    public int getAttributesSize() {
      return (this.attributes == null) ? 0 : this.attributes.size();
    }

    public void putToAttributes(String key, AnonymousAttribute val) {
      if (this.attributes == null) {
        this.attributes = new HashMap<String,AnonymousAttribute>();
      }
      this.attributes.put(key, val);
    }

    public Map<String,AnonymousAttribute> getAttributes() {
      return this.attributes;
    }

    public Entity_oa_add_map_args setAttributes(Map<String,AnonymousAttribute> attributes) {
      this.attributes = attributes;
      return this;
    }

    public void unsetAttributes() {
      this.attributes = null;
    }

    /** Returns true if field attributes is set (has been asigned a value) and false otherwise */
    public boolean isSetAttributes() {
      return this.attributes != null;
    }

    public void setAttributesIsSet(boolean value) {
      if (!value) {
        this.attributes = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case _SELF:
        if (value == null) {
          unset_self();
        } else {
          set_self((Long)value);
        }
        break;

      case ATTRIBUTES:
        if (value == null) {
          unsetAttributes();
        } else {
          setAttributes((Map<String,AnonymousAttribute>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case _SELF:
        return new Long(get_self());

      case ATTRIBUTES:
        return getAttributes();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case _SELF:
        return isSet_self();
      case ATTRIBUTES:
        return isSetAttributes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_add_map_args)
        return this.equals((Entity_oa_add_map_args)that);
      return false;
    }

    public boolean equals(Entity_oa_add_map_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present__self = true;
      boolean that_present__self = true;
      if (this_present__self || that_present__self) {
        if (!(this_present__self && that_present__self))
          return false;
        if (this._self != that._self)
          return false;
      }

      boolean this_present_attributes = true && this.isSetAttributes();
      boolean that_present_attributes = true && that.isSetAttributes();
      if (this_present_attributes || that_present_attributes) {
        if (!(this_present_attributes && that_present_attributes))
          return false;
        if (!this.attributes.equals(that.attributes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_add_map_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_add_map_args typedOther = (Entity_oa_add_map_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_self()).compareTo(typedOther.isSet_self());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_self()) {
        lastComparison = TBaseHelper.compareTo(this._self, typedOther._self);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttributes()) {
        lastComparison = TBaseHelper.compareTo(this.attributes, typedOther.attributes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // _SELF
            if (field.type == TType.I64) {
              this._self = iprot.readI64();
              set_selfIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ATTRIBUTES
            if (field.type == TType.MAP) {
              {
                TMap _map30 = iprot.readMapBegin();
                this.attributes = new HashMap<String,AnonymousAttribute>(2*_map30.size);
                for (int _i31 = 0; _i31 < _map30.size; ++_i31)
                {
                  String _key32;
                  AnonymousAttribute _val33;
                  _key32 = iprot.readString();
                  _val33 = new AnonymousAttribute();
                  _val33.read(iprot);
                  this.attributes.put(_key32, _val33);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_SELF_FIELD_DESC);
      oprot.writeI64(this._self);
      oprot.writeFieldEnd();
      if (this.attributes != null) {
        oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.attributes.size()));
          for (Map.Entry<String, AnonymousAttribute> _iter34 : this.attributes.entrySet())
          {
            oprot.writeString(_iter34.getKey());
            _iter34.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_add_map_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_self:");
      sb.append(this._self);
      first = false;
      if (!first) sb.append(", ");
      sb.append("attributes:");
      if (this.attributes == null) {
        sb.append("null");
      } else {
        sb.append(this.attributes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_add_map_result implements TBase<Entity_oa_add_map_result, Entity_oa_add_map_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_add_map_result");

    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);

    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_add_map_result.class, metaDataMap);
    }

    public Entity_oa_add_map_result() {
    }

    public Entity_oa_add_map_result(
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5)
    {
      this();
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_add_map_result(Entity_oa_add_map_result other) {
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
    }

    public Entity_oa_add_map_result deepCopy() {
      return new Entity_oa_add_map_result(this);
    }

    @Override
    public void clear() {
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public Entity_oa_add_map_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public Entity_oa_add_map_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public Entity_oa_add_map_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public Entity_oa_add_map_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public Entity_oa_add_map_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_add_map_result)
        return this.equals((Entity_oa_add_map_result)that);
      return false;
    }

    public boolean equals(Entity_oa_add_map_result that) {
      if (that == null)
        return false;

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_add_map_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_add_map_result typedOther = (Entity_oa_add_map_result)other;

      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_add_map_result(");
      boolean first = true;

      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_delete_args implements TBase<Entity_oa_delete_args, Entity_oa_delete_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_delete_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField _SELF_FIELD_DESC = new TField("_self", TType.I64, (short)2);
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)3);

    public String token;
    public long _self;
    public String name;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      _SELF((short)2, "_self"),
      NAME((short)3, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // _SELF
            return _SELF;
          case 3: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SELF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields._SELF, new FieldMetaData("_self", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64          , "EntityId")));
      tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_delete_args.class, metaDataMap);
    }

    public Entity_oa_delete_args() {
    }

    public Entity_oa_delete_args(
      String token,
      long _self,
      String name)
    {
      this();
      this.token = token;
      this._self = _self;
      set_selfIsSet(true);
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_delete_args(Entity_oa_delete_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this._self = other._self;
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public Entity_oa_delete_args deepCopy() {
      return new Entity_oa_delete_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      set_selfIsSet(false);
      this._self = 0;
      this.name = null;
    }

    public String getToken() {
      return this.token;
    }

    public Entity_oa_delete_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long get_self() {
      return this._self;
    }

    public Entity_oa_delete_args set_self(long _self) {
      this._self = _self;
      set_selfIsSet(true);
      return this;
    }

    public void unset_self() {
      __isset_bit_vector.clear(___SELF_ISSET_ID);
    }

    /** Returns true if field _self is set (has been asigned a value) and false otherwise */
    public boolean isSet_self() {
      return __isset_bit_vector.get(___SELF_ISSET_ID);
    }

    public void set_selfIsSet(boolean value) {
      __isset_bit_vector.set(___SELF_ISSET_ID, value);
    }

    public String getName() {
      return this.name;
    }

    public Entity_oa_delete_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been asigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case _SELF:
        if (value == null) {
          unset_self();
        } else {
          set_self((Long)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case _SELF:
        return new Long(get_self());

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case _SELF:
        return isSet_self();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_delete_args)
        return this.equals((Entity_oa_delete_args)that);
      return false;
    }

    public boolean equals(Entity_oa_delete_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present__self = true;
      boolean that_present__self = true;
      if (this_present__self || that_present__self) {
        if (!(this_present__self && that_present__self))
          return false;
        if (this._self != that._self)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_delete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_delete_args typedOther = (Entity_oa_delete_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_self()).compareTo(typedOther.isSet_self());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_self()) {
        lastComparison = TBaseHelper.compareTo(this._self, typedOther._self);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // _SELF
            if (field.type == TType.I64) {
              this._self = iprot.readI64();
              set_selfIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NAME
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_SELF_FIELD_DESC);
      oprot.writeI64(this._self);
      oprot.writeFieldEnd();
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_delete_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_self:");
      sb.append(this._self);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_delete_result implements TBase<Entity_oa_delete_result, Entity_oa_delete_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_delete_result");

    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);

    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_delete_result.class, metaDataMap);
    }

    public Entity_oa_delete_result() {
    }

    public Entity_oa_delete_result(
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5)
    {
      this();
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_delete_result(Entity_oa_delete_result other) {
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
    }

    public Entity_oa_delete_result deepCopy() {
      return new Entity_oa_delete_result(this);
    }

    @Override
    public void clear() {
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public Entity_oa_delete_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public Entity_oa_delete_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public Entity_oa_delete_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public Entity_oa_delete_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public Entity_oa_delete_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_delete_result)
        return this.equals((Entity_oa_delete_result)that);
      return false;
    }

    public boolean equals(Entity_oa_delete_result that) {
      if (that == null)
        return false;

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_delete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_delete_result typedOther = (Entity_oa_delete_result)other;

      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_delete_result(");
      boolean first = true;

      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_get_args implements TBase<Entity_oa_get_args, Entity_oa_get_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_get_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField _SELF_FIELD_DESC = new TField("_self", TType.I64, (short)2);
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)3);

    public String token;
    public long _self;
    public String name;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      _SELF((short)2, "_self"),
      NAME((short)3, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // _SELF
            return _SELF;
          case 3: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SELF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields._SELF, new FieldMetaData("_self", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64          , "EntityId")));
      tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_get_args.class, metaDataMap);
    }

    public Entity_oa_get_args() {
    }

    public Entity_oa_get_args(
      String token,
      long _self,
      String name)
    {
      this();
      this.token = token;
      this._self = _self;
      set_selfIsSet(true);
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_get_args(Entity_oa_get_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this._self = other._self;
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public Entity_oa_get_args deepCopy() {
      return new Entity_oa_get_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      set_selfIsSet(false);
      this._self = 0;
      this.name = null;
    }

    public String getToken() {
      return this.token;
    }

    public Entity_oa_get_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long get_self() {
      return this._self;
    }

    public Entity_oa_get_args set_self(long _self) {
      this._self = _self;
      set_selfIsSet(true);
      return this;
    }

    public void unset_self() {
      __isset_bit_vector.clear(___SELF_ISSET_ID);
    }

    /** Returns true if field _self is set (has been asigned a value) and false otherwise */
    public boolean isSet_self() {
      return __isset_bit_vector.get(___SELF_ISSET_ID);
    }

    public void set_selfIsSet(boolean value) {
      __isset_bit_vector.set(___SELF_ISSET_ID, value);
    }

    public String getName() {
      return this.name;
    }

    public Entity_oa_get_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been asigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case _SELF:
        if (value == null) {
          unset_self();
        } else {
          set_self((Long)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case _SELF:
        return new Long(get_self());

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case _SELF:
        return isSet_self();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_get_args)
        return this.equals((Entity_oa_get_args)that);
      return false;
    }

    public boolean equals(Entity_oa_get_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present__self = true;
      boolean that_present__self = true;
      if (this_present__self || that_present__self) {
        if (!(this_present__self && that_present__self))
          return false;
        if (this._self != that._self)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_get_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_get_args typedOther = (Entity_oa_get_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_self()).compareTo(typedOther.isSet_self());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_self()) {
        lastComparison = TBaseHelper.compareTo(this._self, typedOther._self);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // _SELF
            if (field.type == TType.I64) {
              this._self = iprot.readI64();
              set_selfIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NAME
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_SELF_FIELD_DESC);
      oprot.writeI64(this._self);
      oprot.writeFieldEnd();
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_get_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_self:");
      sb.append(this._self);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_get_result implements TBase<Entity_oa_get_result, Entity_oa_get_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_get_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);

    public Attribute success;
    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Attribute.class)));
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_get_result.class, metaDataMap);
    }

    public Entity_oa_get_result() {
    }

    public Entity_oa_get_result(
      Attribute success,
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5)
    {
      this();
      this.success = success;
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_get_result(Entity_oa_get_result other) {
      if (other.isSetSuccess()) {
        this.success = new Attribute(other.success);
      }
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
    }

    public Entity_oa_get_result deepCopy() {
      return new Entity_oa_get_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
    }

    public Attribute getSuccess() {
      return this.success;
    }

    public Entity_oa_get_result setSuccess(Attribute success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public Entity_oa_get_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public Entity_oa_get_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public Entity_oa_get_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public Entity_oa_get_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public Entity_oa_get_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Attribute)value);
        }
        break;

      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_get_result)
        return this.equals((Entity_oa_get_result)that);
      return false;
    }

    public boolean equals(Entity_oa_get_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_get_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_get_result typedOther = (Entity_oa_get_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Attribute();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_get_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_get_blob_args implements TBase<Entity_oa_get_blob_args, Entity_oa_get_blob_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_get_blob_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField _SELF_FIELD_DESC = new TField("_self", TType.I64, (short)2);
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)3);

    public String token;
    public long _self;
    public String name;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      _SELF((short)2, "_self"),
      NAME((short)3, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // _SELF
            return _SELF;
          case 3: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SELF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields._SELF, new FieldMetaData("_self", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64          , "EntityId")));
      tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_get_blob_args.class, metaDataMap);
    }

    public Entity_oa_get_blob_args() {
    }

    public Entity_oa_get_blob_args(
      String token,
      long _self,
      String name)
    {
      this();
      this.token = token;
      this._self = _self;
      set_selfIsSet(true);
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_get_blob_args(Entity_oa_get_blob_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this._self = other._self;
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public Entity_oa_get_blob_args deepCopy() {
      return new Entity_oa_get_blob_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      set_selfIsSet(false);
      this._self = 0;
      this.name = null;
    }

    public String getToken() {
      return this.token;
    }

    public Entity_oa_get_blob_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long get_self() {
      return this._self;
    }

    public Entity_oa_get_blob_args set_self(long _self) {
      this._self = _self;
      set_selfIsSet(true);
      return this;
    }

    public void unset_self() {
      __isset_bit_vector.clear(___SELF_ISSET_ID);
    }

    /** Returns true if field _self is set (has been asigned a value) and false otherwise */
    public boolean isSet_self() {
      return __isset_bit_vector.get(___SELF_ISSET_ID);
    }

    public void set_selfIsSet(boolean value) {
      __isset_bit_vector.set(___SELF_ISSET_ID, value);
    }

    public String getName() {
      return this.name;
    }

    public Entity_oa_get_blob_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been asigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case _SELF:
        if (value == null) {
          unset_self();
        } else {
          set_self((Long)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case _SELF:
        return new Long(get_self());

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case _SELF:
        return isSet_self();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_get_blob_args)
        return this.equals((Entity_oa_get_blob_args)that);
      return false;
    }

    public boolean equals(Entity_oa_get_blob_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present__self = true;
      boolean that_present__self = true;
      if (this_present__self || that_present__self) {
        if (!(this_present__self && that_present__self))
          return false;
        if (this._self != that._self)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_get_blob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_get_blob_args typedOther = (Entity_oa_get_blob_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_self()).compareTo(typedOther.isSet_self());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_self()) {
        lastComparison = TBaseHelper.compareTo(this._self, typedOther._self);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // _SELF
            if (field.type == TType.I64) {
              this._self = iprot.readI64();
              set_selfIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NAME
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_SELF_FIELD_DESC);
      oprot.writeI64(this._self);
      oprot.writeFieldEnd();
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_get_blob_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_self:");
      sb.append(this._self);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_get_blob_result implements TBase<Entity_oa_get_blob_result, Entity_oa_get_blob_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_get_blob_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);
    private static final TField ERROR6_FIELD_DESC = new TField("error6", TType.STRUCT, (short)6);

    public String success;
    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;
    public BadAttributeType error6;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5"),
      ERROR6((short)6, "error6");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          case 6: // ERROR6
            return ERROR6;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR6, new FieldMetaData("error6", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_get_blob_result.class, metaDataMap);
    }

    public Entity_oa_get_blob_result() {
    }

    public Entity_oa_get_blob_result(
      String success,
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5,
      BadAttributeType error6)
    {
      this();
      this.success = success;
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
      this.error6 = error6;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_get_blob_result(Entity_oa_get_blob_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
      if (other.isSetError6()) {
        this.error6 = new BadAttributeType(other.error6);
      }
    }

    public Entity_oa_get_blob_result deepCopy() {
      return new Entity_oa_get_blob_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
      this.error6 = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public Entity_oa_get_blob_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public Entity_oa_get_blob_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public Entity_oa_get_blob_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public Entity_oa_get_blob_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public Entity_oa_get_blob_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public Entity_oa_get_blob_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public BadAttributeType getError6() {
      return this.error6;
    }

    public Entity_oa_get_blob_result setError6(BadAttributeType error6) {
      this.error6 = error6;
      return this;
    }

    public void unsetError6() {
      this.error6 = null;
    }

    /** Returns true if field error6 is set (has been asigned a value) and false otherwise */
    public boolean isSetError6() {
      return this.error6 != null;
    }

    public void setError6IsSet(boolean value) {
      if (!value) {
        this.error6 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      case ERROR6:
        if (value == null) {
          unsetError6();
        } else {
          setError6((BadAttributeType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      case ERROR6:
        return getError6();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      case ERROR6:
        return isSetError6();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_get_blob_result)
        return this.equals((Entity_oa_get_blob_result)that);
      return false;
    }

    public boolean equals(Entity_oa_get_blob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      boolean this_present_error6 = true && this.isSetError6();
      boolean that_present_error6 = true && that.isSetError6();
      if (this_present_error6 || that_present_error6) {
        if (!(this_present_error6 && that_present_error6))
          return false;
        if (!this.error6.equals(that.error6))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_get_blob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_get_blob_result typedOther = (Entity_oa_get_blob_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError6()).compareTo(typedOther.isSetError6());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError6()) {
        lastComparison = TBaseHelper.compareTo(this.error6, typedOther.error6);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // ERROR6
            if (field.type == TType.STRUCT) {
              this.error6 = new BadAttributeType();
              this.error6.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError6()) {
        oprot.writeFieldBegin(ERROR6_FIELD_DESC);
        this.error6.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_get_blob_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error6:");
      if (this.error6 == null) {
        sb.append("null");
      } else {
        sb.append(this.error6);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_get_blob_hash_args implements TBase<Entity_oa_get_blob_hash_args, Entity_oa_get_blob_hash_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_get_blob_hash_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField _SELF_FIELD_DESC = new TField("_self", TType.I64, (short)2);
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)3);

    public String token;
    public long _self;
    public String name;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      _SELF((short)2, "_self"),
      NAME((short)3, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // _SELF
            return _SELF;
          case 3: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SELF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields._SELF, new FieldMetaData("_self", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64          , "EntityId")));
      tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_get_blob_hash_args.class, metaDataMap);
    }

    public Entity_oa_get_blob_hash_args() {
    }

    public Entity_oa_get_blob_hash_args(
      String token,
      long _self,
      String name)
    {
      this();
      this.token = token;
      this._self = _self;
      set_selfIsSet(true);
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_get_blob_hash_args(Entity_oa_get_blob_hash_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this._self = other._self;
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public Entity_oa_get_blob_hash_args deepCopy() {
      return new Entity_oa_get_blob_hash_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      set_selfIsSet(false);
      this._self = 0;
      this.name = null;
    }

    public String getToken() {
      return this.token;
    }

    public Entity_oa_get_blob_hash_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long get_self() {
      return this._self;
    }

    public Entity_oa_get_blob_hash_args set_self(long _self) {
      this._self = _self;
      set_selfIsSet(true);
      return this;
    }

    public void unset_self() {
      __isset_bit_vector.clear(___SELF_ISSET_ID);
    }

    /** Returns true if field _self is set (has been asigned a value) and false otherwise */
    public boolean isSet_self() {
      return __isset_bit_vector.get(___SELF_ISSET_ID);
    }

    public void set_selfIsSet(boolean value) {
      __isset_bit_vector.set(___SELF_ISSET_ID, value);
    }

    public String getName() {
      return this.name;
    }

    public Entity_oa_get_blob_hash_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been asigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case _SELF:
        if (value == null) {
          unset_self();
        } else {
          set_self((Long)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case _SELF:
        return new Long(get_self());

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case _SELF:
        return isSet_self();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_get_blob_hash_args)
        return this.equals((Entity_oa_get_blob_hash_args)that);
      return false;
    }

    public boolean equals(Entity_oa_get_blob_hash_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present__self = true;
      boolean that_present__self = true;
      if (this_present__self || that_present__self) {
        if (!(this_present__self && that_present__self))
          return false;
        if (this._self != that._self)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_get_blob_hash_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_get_blob_hash_args typedOther = (Entity_oa_get_blob_hash_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_self()).compareTo(typedOther.isSet_self());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_self()) {
        lastComparison = TBaseHelper.compareTo(this._self, typedOther._self);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // _SELF
            if (field.type == TType.I64) {
              this._self = iprot.readI64();
              set_selfIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NAME
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_SELF_FIELD_DESC);
      oprot.writeI64(this._self);
      oprot.writeFieldEnd();
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_get_blob_hash_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_self:");
      sb.append(this._self);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_get_blob_hash_result implements TBase<Entity_oa_get_blob_hash_result, Entity_oa_get_blob_hash_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_get_blob_hash_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);
    private static final TField ERROR6_FIELD_DESC = new TField("error6", TType.STRUCT, (short)6);

    public String success;
    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;
    public BadAttributeType error6;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5"),
      ERROR6((short)6, "error6");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          case 6: // ERROR6
            return ERROR6;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR6, new FieldMetaData("error6", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_get_blob_hash_result.class, metaDataMap);
    }

    public Entity_oa_get_blob_hash_result() {
    }

    public Entity_oa_get_blob_hash_result(
      String success,
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5,
      BadAttributeType error6)
    {
      this();
      this.success = success;
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
      this.error6 = error6;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_get_blob_hash_result(Entity_oa_get_blob_hash_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
      if (other.isSetError6()) {
        this.error6 = new BadAttributeType(other.error6);
      }
    }

    public Entity_oa_get_blob_hash_result deepCopy() {
      return new Entity_oa_get_blob_hash_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
      this.error6 = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public Entity_oa_get_blob_hash_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public Entity_oa_get_blob_hash_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public Entity_oa_get_blob_hash_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public Entity_oa_get_blob_hash_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public Entity_oa_get_blob_hash_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public Entity_oa_get_blob_hash_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public BadAttributeType getError6() {
      return this.error6;
    }

    public Entity_oa_get_blob_hash_result setError6(BadAttributeType error6) {
      this.error6 = error6;
      return this;
    }

    public void unsetError6() {
      this.error6 = null;
    }

    /** Returns true if field error6 is set (has been asigned a value) and false otherwise */
    public boolean isSetError6() {
      return this.error6 != null;
    }

    public void setError6IsSet(boolean value) {
      if (!value) {
        this.error6 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      case ERROR6:
        if (value == null) {
          unsetError6();
        } else {
          setError6((BadAttributeType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      case ERROR6:
        return getError6();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      case ERROR6:
        return isSetError6();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_get_blob_hash_result)
        return this.equals((Entity_oa_get_blob_hash_result)that);
      return false;
    }

    public boolean equals(Entity_oa_get_blob_hash_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      boolean this_present_error6 = true && this.isSetError6();
      boolean that_present_error6 = true && that.isSetError6();
      if (this_present_error6 || that_present_error6) {
        if (!(this_present_error6 && that_present_error6))
          return false;
        if (!this.error6.equals(that.error6))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_get_blob_hash_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_get_blob_hash_result typedOther = (Entity_oa_get_blob_hash_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError6()).compareTo(typedOther.isSetError6());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError6()) {
        lastComparison = TBaseHelper.compareTo(this.error6, typedOther.error6);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // ERROR6
            if (field.type == TType.STRUCT) {
              this.error6 = new BadAttributeType();
              this.error6.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError6()) {
        oprot.writeFieldBegin(ERROR6_FIELD_DESC);
        this.error6.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_get_blob_hash_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error6:");
      if (this.error6 == null) {
        sb.append("null");
      } else {
        sb.append(this.error6);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_get_list_args implements TBase<Entity_oa_get_list_args, Entity_oa_get_list_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_get_list_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField _SELF_FIELD_DESC = new TField("_self", TType.I64, (short)2);

    public String token;
    public long _self;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      _SELF((short)2, "_self");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // _SELF
            return _SELF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SELF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields._SELF, new FieldMetaData("_self", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64          , "EntityId")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_get_list_args.class, metaDataMap);
    }

    public Entity_oa_get_list_args() {
    }

    public Entity_oa_get_list_args(
      String token,
      long _self)
    {
      this();
      this.token = token;
      this._self = _self;
      set_selfIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_get_list_args(Entity_oa_get_list_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this._self = other._self;
    }

    public Entity_oa_get_list_args deepCopy() {
      return new Entity_oa_get_list_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      set_selfIsSet(false);
      this._self = 0;
    }

    public String getToken() {
      return this.token;
    }

    public Entity_oa_get_list_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long get_self() {
      return this._self;
    }

    public Entity_oa_get_list_args set_self(long _self) {
      this._self = _self;
      set_selfIsSet(true);
      return this;
    }

    public void unset_self() {
      __isset_bit_vector.clear(___SELF_ISSET_ID);
    }

    /** Returns true if field _self is set (has been asigned a value) and false otherwise */
    public boolean isSet_self() {
      return __isset_bit_vector.get(___SELF_ISSET_ID);
    }

    public void set_selfIsSet(boolean value) {
      __isset_bit_vector.set(___SELF_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case _SELF:
        if (value == null) {
          unset_self();
        } else {
          set_self((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case _SELF:
        return new Long(get_self());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case _SELF:
        return isSet_self();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_get_list_args)
        return this.equals((Entity_oa_get_list_args)that);
      return false;
    }

    public boolean equals(Entity_oa_get_list_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present__self = true;
      boolean that_present__self = true;
      if (this_present__self || that_present__self) {
        if (!(this_present__self && that_present__self))
          return false;
        if (this._self != that._self)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_get_list_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_get_list_args typedOther = (Entity_oa_get_list_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_self()).compareTo(typedOther.isSet_self());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_self()) {
        lastComparison = TBaseHelper.compareTo(this._self, typedOther._self);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // _SELF
            if (field.type == TType.I64) {
              this._self = iprot.readI64();
              set_selfIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_SELF_FIELD_DESC);
      oprot.writeI64(this._self);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_get_list_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_self:");
      sb.append(this._self);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_get_list_result implements TBase<Entity_oa_get_list_result, Entity_oa_get_list_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_get_list_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);

    public List<Attribute> success;
    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, Attribute.class))));
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_get_list_result.class, metaDataMap);
    }

    public Entity_oa_get_list_result() {
    }

    public Entity_oa_get_list_result(
      List<Attribute> success,
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5)
    {
      this();
      this.success = success;
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_get_list_result(Entity_oa_get_list_result other) {
      if (other.isSetSuccess()) {
        List<Attribute> __this__success = new ArrayList<Attribute>();
        for (Attribute other_element : other.success) {
          __this__success.add(new Attribute(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
    }

    public Entity_oa_get_list_result deepCopy() {
      return new Entity_oa_get_list_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Attribute> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Attribute elem) {
      if (this.success == null) {
        this.success = new ArrayList<Attribute>();
      }
      this.success.add(elem);
    }

    public List<Attribute> getSuccess() {
      return this.success;
    }

    public Entity_oa_get_list_result setSuccess(List<Attribute> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public Entity_oa_get_list_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public Entity_oa_get_list_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public Entity_oa_get_list_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public Entity_oa_get_list_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public Entity_oa_get_list_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Attribute>)value);
        }
        break;

      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_get_list_result)
        return this.equals((Entity_oa_get_list_result)that);
      return false;
    }

    public boolean equals(Entity_oa_get_list_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_get_list_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_get_list_result typedOther = (Entity_oa_get_list_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list35 = iprot.readListBegin();
                this.success = new ArrayList<Attribute>(_list35.size);
                for (int _i36 = 0; _i36 < _list35.size; ++_i36)
                {
                  Attribute _elem37;
                  _elem37 = new Attribute();
                  _elem37.read(iprot);
                  this.success.add(_elem37);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Attribute _iter38 : this.success)
          {
            _iter38.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_get_list_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_get_map_args implements TBase<Entity_oa_get_map_args, Entity_oa_get_map_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_get_map_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField _SELF_FIELD_DESC = new TField("_self", TType.I64, (short)2);

    public String token;
    public long _self;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      _SELF((short)2, "_self");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // _SELF
            return _SELF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SELF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields._SELF, new FieldMetaData("_self", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64          , "EntityId")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_get_map_args.class, metaDataMap);
    }

    public Entity_oa_get_map_args() {
    }

    public Entity_oa_get_map_args(
      String token,
      long _self)
    {
      this();
      this.token = token;
      this._self = _self;
      set_selfIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_get_map_args(Entity_oa_get_map_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this._self = other._self;
    }

    public Entity_oa_get_map_args deepCopy() {
      return new Entity_oa_get_map_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      set_selfIsSet(false);
      this._self = 0;
    }

    public String getToken() {
      return this.token;
    }

    public Entity_oa_get_map_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long get_self() {
      return this._self;
    }

    public Entity_oa_get_map_args set_self(long _self) {
      this._self = _self;
      set_selfIsSet(true);
      return this;
    }

    public void unset_self() {
      __isset_bit_vector.clear(___SELF_ISSET_ID);
    }

    /** Returns true if field _self is set (has been asigned a value) and false otherwise */
    public boolean isSet_self() {
      return __isset_bit_vector.get(___SELF_ISSET_ID);
    }

    public void set_selfIsSet(boolean value) {
      __isset_bit_vector.set(___SELF_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case _SELF:
        if (value == null) {
          unset_self();
        } else {
          set_self((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case _SELF:
        return new Long(get_self());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case _SELF:
        return isSet_self();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_get_map_args)
        return this.equals((Entity_oa_get_map_args)that);
      return false;
    }

    public boolean equals(Entity_oa_get_map_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present__self = true;
      boolean that_present__self = true;
      if (this_present__self || that_present__self) {
        if (!(this_present__self && that_present__self))
          return false;
        if (this._self != that._self)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_get_map_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_get_map_args typedOther = (Entity_oa_get_map_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_self()).compareTo(typedOther.isSet_self());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_self()) {
        lastComparison = TBaseHelper.compareTo(this._self, typedOther._self);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // _SELF
            if (field.type == TType.I64) {
              this._self = iprot.readI64();
              set_selfIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_SELF_FIELD_DESC);
      oprot.writeI64(this._self);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_get_map_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_self:");
      sb.append(this._self);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_get_map_result implements TBase<Entity_oa_get_map_result, Entity_oa_get_map_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_get_map_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);

    public Map<String,AnonymousAttribute> success;
    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new MapMetaData(TType.MAP, 
              new FieldValueMetaData(TType.STRING), 
              new StructMetaData(TType.STRUCT, AnonymousAttribute.class))));
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_get_map_result.class, metaDataMap);
    }

    public Entity_oa_get_map_result() {
    }

    public Entity_oa_get_map_result(
      Map<String,AnonymousAttribute> success,
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5)
    {
      this();
      this.success = success;
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_get_map_result(Entity_oa_get_map_result other) {
      if (other.isSetSuccess()) {
        Map<String,AnonymousAttribute> __this__success = new HashMap<String,AnonymousAttribute>();
        for (Map.Entry<String, AnonymousAttribute> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          AnonymousAttribute other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          AnonymousAttribute __this__success_copy_value = new AnonymousAttribute(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
    }

    public Entity_oa_get_map_result deepCopy() {
      return new Entity_oa_get_map_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, AnonymousAttribute val) {
      if (this.success == null) {
        this.success = new HashMap<String,AnonymousAttribute>();
      }
      this.success.put(key, val);
    }

    public Map<String,AnonymousAttribute> getSuccess() {
      return this.success;
    }

    public Entity_oa_get_map_result setSuccess(Map<String,AnonymousAttribute> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public Entity_oa_get_map_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public Entity_oa_get_map_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public Entity_oa_get_map_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public Entity_oa_get_map_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public Entity_oa_get_map_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,AnonymousAttribute>)value);
        }
        break;

      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_get_map_result)
        return this.equals((Entity_oa_get_map_result)that);
      return false;
    }

    public boolean equals(Entity_oa_get_map_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_get_map_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_get_map_result typedOther = (Entity_oa_get_map_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map39 = iprot.readMapBegin();
                this.success = new HashMap<String,AnonymousAttribute>(2*_map39.size);
                for (int _i40 = 0; _i40 < _map39.size; ++_i40)
                {
                  String _key41;
                  AnonymousAttribute _val42;
                  _key41 = iprot.readString();
                  _val42 = new AnonymousAttribute();
                  _val42.read(iprot);
                  this.success.put(_key41, _val42);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.success.size()));
          for (Map.Entry<String, AnonymousAttribute> _iter43 : this.success.entrySet())
          {
            oprot.writeString(_iter43.getKey());
            _iter43.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_get_map_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_get_str_args implements TBase<Entity_oa_get_str_args, Entity_oa_get_str_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_get_str_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField _SELF_FIELD_DESC = new TField("_self", TType.I64, (short)2);
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)3);

    public String token;
    public long _self;
    public String name;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      _SELF((short)2, "_self"),
      NAME((short)3, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // _SELF
            return _SELF;
          case 3: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SELF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields._SELF, new FieldMetaData("_self", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64          , "EntityId")));
      tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_get_str_args.class, metaDataMap);
    }

    public Entity_oa_get_str_args() {
    }

    public Entity_oa_get_str_args(
      String token,
      long _self,
      String name)
    {
      this();
      this.token = token;
      this._self = _self;
      set_selfIsSet(true);
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_get_str_args(Entity_oa_get_str_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this._self = other._self;
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public Entity_oa_get_str_args deepCopy() {
      return new Entity_oa_get_str_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      set_selfIsSet(false);
      this._self = 0;
      this.name = null;
    }

    public String getToken() {
      return this.token;
    }

    public Entity_oa_get_str_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long get_self() {
      return this._self;
    }

    public Entity_oa_get_str_args set_self(long _self) {
      this._self = _self;
      set_selfIsSet(true);
      return this;
    }

    public void unset_self() {
      __isset_bit_vector.clear(___SELF_ISSET_ID);
    }

    /** Returns true if field _self is set (has been asigned a value) and false otherwise */
    public boolean isSet_self() {
      return __isset_bit_vector.get(___SELF_ISSET_ID);
    }

    public void set_selfIsSet(boolean value) {
      __isset_bit_vector.set(___SELF_ISSET_ID, value);
    }

    public String getName() {
      return this.name;
    }

    public Entity_oa_get_str_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been asigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case _SELF:
        if (value == null) {
          unset_self();
        } else {
          set_self((Long)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case _SELF:
        return new Long(get_self());

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case _SELF:
        return isSet_self();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_get_str_args)
        return this.equals((Entity_oa_get_str_args)that);
      return false;
    }

    public boolean equals(Entity_oa_get_str_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present__self = true;
      boolean that_present__self = true;
      if (this_present__self || that_present__self) {
        if (!(this_present__self && that_present__self))
          return false;
        if (this._self != that._self)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_get_str_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_get_str_args typedOther = (Entity_oa_get_str_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_self()).compareTo(typedOther.isSet_self());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_self()) {
        lastComparison = TBaseHelper.compareTo(this._self, typedOther._self);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // _SELF
            if (field.type == TType.I64) {
              this._self = iprot.readI64();
              set_selfIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NAME
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_SELF_FIELD_DESC);
      oprot.writeI64(this._self);
      oprot.writeFieldEnd();
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_get_str_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_self:");
      sb.append(this._self);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_get_str_result implements TBase<Entity_oa_get_str_result, Entity_oa_get_str_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_get_str_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);
    private static final TField ERROR6_FIELD_DESC = new TField("error6", TType.STRUCT, (short)6);

    public String success;
    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;
    public BadAttributeType error6;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5"),
      ERROR6((short)6, "error6");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          case 6: // ERROR6
            return ERROR6;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR6, new FieldMetaData("error6", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_get_str_result.class, metaDataMap);
    }

    public Entity_oa_get_str_result() {
    }

    public Entity_oa_get_str_result(
      String success,
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5,
      BadAttributeType error6)
    {
      this();
      this.success = success;
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
      this.error6 = error6;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_get_str_result(Entity_oa_get_str_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
      if (other.isSetError6()) {
        this.error6 = new BadAttributeType(other.error6);
      }
    }

    public Entity_oa_get_str_result deepCopy() {
      return new Entity_oa_get_str_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
      this.error6 = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public Entity_oa_get_str_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public Entity_oa_get_str_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public Entity_oa_get_str_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public Entity_oa_get_str_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public Entity_oa_get_str_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public Entity_oa_get_str_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public BadAttributeType getError6() {
      return this.error6;
    }

    public Entity_oa_get_str_result setError6(BadAttributeType error6) {
      this.error6 = error6;
      return this;
    }

    public void unsetError6() {
      this.error6 = null;
    }

    /** Returns true if field error6 is set (has been asigned a value) and false otherwise */
    public boolean isSetError6() {
      return this.error6 != null;
    }

    public void setError6IsSet(boolean value) {
      if (!value) {
        this.error6 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      case ERROR6:
        if (value == null) {
          unsetError6();
        } else {
          setError6((BadAttributeType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      case ERROR6:
        return getError6();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      case ERROR6:
        return isSetError6();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_get_str_result)
        return this.equals((Entity_oa_get_str_result)that);
      return false;
    }

    public boolean equals(Entity_oa_get_str_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      boolean this_present_error6 = true && this.isSetError6();
      boolean that_present_error6 = true && that.isSetError6();
      if (this_present_error6 || that_present_error6) {
        if (!(this_present_error6 && that_present_error6))
          return false;
        if (!this.error6.equals(that.error6))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_get_str_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_get_str_result typedOther = (Entity_oa_get_str_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError6()).compareTo(typedOther.isSetError6());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError6()) {
        lastComparison = TBaseHelper.compareTo(this.error6, typedOther.error6);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // ERROR6
            if (field.type == TType.STRUCT) {
              this.error6 = new BadAttributeType();
              this.error6.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError6()) {
        oprot.writeFieldBegin(ERROR6_FIELD_DESC);
        this.error6.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_get_str_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error6:");
      if (this.error6 == null) {
        sb.append("null");
      } else {
        sb.append(this.error6);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_set_args implements TBase<Entity_oa_set_args, Entity_oa_set_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_set_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField _SELF_FIELD_DESC = new TField("_self", TType.I64, (short)2);
    private static final TField VALUE_FIELD_DESC = new TField("value", TType.STRUCT, (short)3);

    public String token;
    public long _self;
    public Attribute value;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      _SELF((short)2, "_self"),
      VALUE((short)3, "value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // _SELF
            return _SELF;
          case 3: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SELF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields._SELF, new FieldMetaData("_self", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64          , "EntityId")));
      tmpMap.put(_Fields.VALUE, new FieldMetaData("value", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Attribute.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_set_args.class, metaDataMap);
    }

    public Entity_oa_set_args() {
    }

    public Entity_oa_set_args(
      String token,
      long _self,
      Attribute value)
    {
      this();
      this.token = token;
      this._self = _self;
      set_selfIsSet(true);
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_set_args(Entity_oa_set_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this._self = other._self;
      if (other.isSetValue()) {
        this.value = new Attribute(other.value);
      }
    }

    public Entity_oa_set_args deepCopy() {
      return new Entity_oa_set_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      set_selfIsSet(false);
      this._self = 0;
      this.value = null;
    }

    public String getToken() {
      return this.token;
    }

    public Entity_oa_set_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long get_self() {
      return this._self;
    }

    public Entity_oa_set_args set_self(long _self) {
      this._self = _self;
      set_selfIsSet(true);
      return this;
    }

    public void unset_self() {
      __isset_bit_vector.clear(___SELF_ISSET_ID);
    }

    /** Returns true if field _self is set (has been asigned a value) and false otherwise */
    public boolean isSet_self() {
      return __isset_bit_vector.get(___SELF_ISSET_ID);
    }

    public void set_selfIsSet(boolean value) {
      __isset_bit_vector.set(___SELF_ISSET_ID, value);
    }

    public Attribute getValue() {
      return this.value;
    }

    public Entity_oa_set_args setValue(Attribute value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been asigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case _SELF:
        if (value == null) {
          unset_self();
        } else {
          set_self((Long)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((Attribute)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case _SELF:
        return new Long(get_self());

      case VALUE:
        return getValue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case _SELF:
        return isSet_self();
      case VALUE:
        return isSetValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_set_args)
        return this.equals((Entity_oa_set_args)that);
      return false;
    }

    public boolean equals(Entity_oa_set_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present__self = true;
      boolean that_present__self = true;
      if (this_present__self || that_present__self) {
        if (!(this_present__self && that_present__self))
          return false;
        if (this._self != that._self)
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_set_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_set_args typedOther = (Entity_oa_set_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_self()).compareTo(typedOther.isSet_self());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_self()) {
        lastComparison = TBaseHelper.compareTo(this._self, typedOther._self);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = TBaseHelper.compareTo(this.value, typedOther.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // _SELF
            if (field.type == TType.I64) {
              this._self = iprot.readI64();
              set_selfIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // VALUE
            if (field.type == TType.STRUCT) {
              this.value = new Attribute();
              this.value.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_SELF_FIELD_DESC);
      oprot.writeI64(this._self);
      oprot.writeFieldEnd();
      if (this.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        this.value.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_set_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_self:");
      sb.append(this._self);
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_set_result implements TBase<Entity_oa_set_result, Entity_oa_set_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_set_result");

    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);

    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_set_result.class, metaDataMap);
    }

    public Entity_oa_set_result() {
    }

    public Entity_oa_set_result(
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5)
    {
      this();
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_set_result(Entity_oa_set_result other) {
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
    }

    public Entity_oa_set_result deepCopy() {
      return new Entity_oa_set_result(this);
    }

    @Override
    public void clear() {
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public Entity_oa_set_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public Entity_oa_set_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public Entity_oa_set_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public Entity_oa_set_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public Entity_oa_set_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_set_result)
        return this.equals((Entity_oa_set_result)that);
      return false;
    }

    public boolean equals(Entity_oa_set_result that) {
      if (that == null)
        return false;

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_set_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_set_result typedOther = (Entity_oa_set_result)other;

      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_set_result(");
      boolean first = true;

      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_set_blob_args implements TBase<Entity_oa_set_blob_args, Entity_oa_set_blob_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_set_blob_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField _SELF_FIELD_DESC = new TField("_self", TType.I64, (short)2);
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)3);
    private static final TField LENGTH_FIELD_DESC = new TField("length", TType.I32, (short)4);
    private static final TField FILENAME_FIELD_DESC = new TField("filename", TType.STRING, (short)5);

    public String token;
    public long _self;
    public String name;
    public int length;
    public String filename;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      _SELF((short)2, "_self"),
      NAME((short)3, "name"),
      LENGTH((short)4, "length"),
      FILENAME((short)5, "filename");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // _SELF
            return _SELF;
          case 3: // NAME
            return NAME;
          case 4: // LENGTH
            return LENGTH;
          case 5: // FILENAME
            return FILENAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SELF_ISSET_ID = 0;
    private static final int __LENGTH_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields._SELF, new FieldMetaData("_self", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64          , "EntityId")));
      tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.LENGTH, new FieldMetaData("length", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.FILENAME, new FieldMetaData("filename", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_set_blob_args.class, metaDataMap);
    }

    public Entity_oa_set_blob_args() {
    }

    public Entity_oa_set_blob_args(
      String token,
      long _self,
      String name,
      int length,
      String filename)
    {
      this();
      this.token = token;
      this._self = _self;
      set_selfIsSet(true);
      this.name = name;
      this.length = length;
      setLengthIsSet(true);
      this.filename = filename;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_set_blob_args(Entity_oa_set_blob_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this._self = other._self;
      if (other.isSetName()) {
        this.name = other.name;
      }
      this.length = other.length;
      if (other.isSetFilename()) {
        this.filename = other.filename;
      }
    }

    public Entity_oa_set_blob_args deepCopy() {
      return new Entity_oa_set_blob_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      set_selfIsSet(false);
      this._self = 0;
      this.name = null;
      setLengthIsSet(false);
      this.length = 0;
      this.filename = null;
    }

    public String getToken() {
      return this.token;
    }

    public Entity_oa_set_blob_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long get_self() {
      return this._self;
    }

    public Entity_oa_set_blob_args set_self(long _self) {
      this._self = _self;
      set_selfIsSet(true);
      return this;
    }

    public void unset_self() {
      __isset_bit_vector.clear(___SELF_ISSET_ID);
    }

    /** Returns true if field _self is set (has been asigned a value) and false otherwise */
    public boolean isSet_self() {
      return __isset_bit_vector.get(___SELF_ISSET_ID);
    }

    public void set_selfIsSet(boolean value) {
      __isset_bit_vector.set(___SELF_ISSET_ID, value);
    }

    public String getName() {
      return this.name;
    }

    public Entity_oa_set_blob_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been asigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public int getLength() {
      return this.length;
    }

    public Entity_oa_set_blob_args setLength(int length) {
      this.length = length;
      setLengthIsSet(true);
      return this;
    }

    public void unsetLength() {
      __isset_bit_vector.clear(__LENGTH_ISSET_ID);
    }

    /** Returns true if field length is set (has been asigned a value) and false otherwise */
    public boolean isSetLength() {
      return __isset_bit_vector.get(__LENGTH_ISSET_ID);
    }

    public void setLengthIsSet(boolean value) {
      __isset_bit_vector.set(__LENGTH_ISSET_ID, value);
    }

    public String getFilename() {
      return this.filename;
    }

    public Entity_oa_set_blob_args setFilename(String filename) {
      this.filename = filename;
      return this;
    }

    public void unsetFilename() {
      this.filename = null;
    }

    /** Returns true if field filename is set (has been asigned a value) and false otherwise */
    public boolean isSetFilename() {
      return this.filename != null;
    }

    public void setFilenameIsSet(boolean value) {
      if (!value) {
        this.filename = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case _SELF:
        if (value == null) {
          unset_self();
        } else {
          set_self((Long)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case LENGTH:
        if (value == null) {
          unsetLength();
        } else {
          setLength((Integer)value);
        }
        break;

      case FILENAME:
        if (value == null) {
          unsetFilename();
        } else {
          setFilename((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case _SELF:
        return new Long(get_self());

      case NAME:
        return getName();

      case LENGTH:
        return new Integer(getLength());

      case FILENAME:
        return getFilename();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case _SELF:
        return isSet_self();
      case NAME:
        return isSetName();
      case LENGTH:
        return isSetLength();
      case FILENAME:
        return isSetFilename();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_set_blob_args)
        return this.equals((Entity_oa_set_blob_args)that);
      return false;
    }

    public boolean equals(Entity_oa_set_blob_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present__self = true;
      boolean that_present__self = true;
      if (this_present__self || that_present__self) {
        if (!(this_present__self && that_present__self))
          return false;
        if (this._self != that._self)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      boolean this_present_filename = true && this.isSetFilename();
      boolean that_present_filename = true && that.isSetFilename();
      if (this_present_filename || that_present_filename) {
        if (!(this_present_filename && that_present_filename))
          return false;
        if (!this.filename.equals(that.filename))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_set_blob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_set_blob_args typedOther = (Entity_oa_set_blob_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_self()).compareTo(typedOther.isSet_self());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_self()) {
        lastComparison = TBaseHelper.compareTo(this._self, typedOther._self);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLength()).compareTo(typedOther.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = TBaseHelper.compareTo(this.length, typedOther.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilename()).compareTo(typedOther.isSetFilename());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilename()) {
        lastComparison = TBaseHelper.compareTo(this.filename, typedOther.filename);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // _SELF
            if (field.type == TType.I64) {
              this._self = iprot.readI64();
              set_selfIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NAME
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // LENGTH
            if (field.type == TType.I32) {
              this.length = iprot.readI32();
              setLengthIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // FILENAME
            if (field.type == TType.STRING) {
              this.filename = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_SELF_FIELD_DESC);
      oprot.writeI64(this._self);
      oprot.writeFieldEnd();
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeI32(this.length);
      oprot.writeFieldEnd();
      if (this.filename != null) {
        oprot.writeFieldBegin(FILENAME_FIELD_DESC);
        oprot.writeString(this.filename);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_set_blob_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_self:");
      sb.append(this._self);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
      if (!first) sb.append(", ");
      sb.append("filename:");
      if (this.filename == null) {
        sb.append("null");
      } else {
        sb.append(this.filename);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_set_blob_result implements TBase<Entity_oa_set_blob_result, Entity_oa_set_blob_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_set_blob_result");

    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);

    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_set_blob_result.class, metaDataMap);
    }

    public Entity_oa_set_blob_result() {
    }

    public Entity_oa_set_blob_result(
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5)
    {
      this();
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_set_blob_result(Entity_oa_set_blob_result other) {
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
    }

    public Entity_oa_set_blob_result deepCopy() {
      return new Entity_oa_set_blob_result(this);
    }

    @Override
    public void clear() {
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public Entity_oa_set_blob_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public Entity_oa_set_blob_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public Entity_oa_set_blob_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public Entity_oa_set_blob_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public Entity_oa_set_blob_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_set_blob_result)
        return this.equals((Entity_oa_set_blob_result)that);
      return false;
    }

    public boolean equals(Entity_oa_set_blob_result that) {
      if (that == null)
        return false;

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_set_blob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_set_blob_result typedOther = (Entity_oa_set_blob_result)other;

      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_set_blob_result(");
      boolean first = true;

      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_set_blob_hash_args implements TBase<Entity_oa_set_blob_hash_args, Entity_oa_set_blob_hash_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_set_blob_hash_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField _SELF_FIELD_DESC = new TField("_self", TType.I64, (short)2);
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)3);
    private static final TField VALUE_FIELD_DESC = new TField("value", TType.STRING, (short)4);
    private static final TField FILENAME_FIELD_DESC = new TField("filename", TType.STRING, (short)5);

    public String token;
    public long _self;
    public String name;
    public String value;
    public String filename;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      _SELF((short)2, "_self"),
      NAME((short)3, "name"),
      VALUE((short)4, "value"),
      FILENAME((short)5, "filename");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // _SELF
            return _SELF;
          case 3: // NAME
            return NAME;
          case 4: // VALUE
            return VALUE;
          case 5: // FILENAME
            return FILENAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SELF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields._SELF, new FieldMetaData("_self", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64          , "EntityId")));
      tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.VALUE, new FieldMetaData("value", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.FILENAME, new FieldMetaData("filename", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_set_blob_hash_args.class, metaDataMap);
    }

    public Entity_oa_set_blob_hash_args() {
    }

    public Entity_oa_set_blob_hash_args(
      String token,
      long _self,
      String name,
      String value,
      String filename)
    {
      this();
      this.token = token;
      this._self = _self;
      set_selfIsSet(true);
      this.name = name;
      this.value = value;
      this.filename = filename;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_set_blob_hash_args(Entity_oa_set_blob_hash_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this._self = other._self;
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
      if (other.isSetFilename()) {
        this.filename = other.filename;
      }
    }

    public Entity_oa_set_blob_hash_args deepCopy() {
      return new Entity_oa_set_blob_hash_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      set_selfIsSet(false);
      this._self = 0;
      this.name = null;
      this.value = null;
      this.filename = null;
    }

    public String getToken() {
      return this.token;
    }

    public Entity_oa_set_blob_hash_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long get_self() {
      return this._self;
    }

    public Entity_oa_set_blob_hash_args set_self(long _self) {
      this._self = _self;
      set_selfIsSet(true);
      return this;
    }

    public void unset_self() {
      __isset_bit_vector.clear(___SELF_ISSET_ID);
    }

    /** Returns true if field _self is set (has been asigned a value) and false otherwise */
    public boolean isSet_self() {
      return __isset_bit_vector.get(___SELF_ISSET_ID);
    }

    public void set_selfIsSet(boolean value) {
      __isset_bit_vector.set(___SELF_ISSET_ID, value);
    }

    public String getName() {
      return this.name;
    }

    public Entity_oa_set_blob_hash_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been asigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getValue() {
      return this.value;
    }

    public Entity_oa_set_blob_hash_args setValue(String value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been asigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public String getFilename() {
      return this.filename;
    }

    public Entity_oa_set_blob_hash_args setFilename(String filename) {
      this.filename = filename;
      return this;
    }

    public void unsetFilename() {
      this.filename = null;
    }

    /** Returns true if field filename is set (has been asigned a value) and false otherwise */
    public boolean isSetFilename() {
      return this.filename != null;
    }

    public void setFilenameIsSet(boolean value) {
      if (!value) {
        this.filename = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case _SELF:
        if (value == null) {
          unset_self();
        } else {
          set_self((Long)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((String)value);
        }
        break;

      case FILENAME:
        if (value == null) {
          unsetFilename();
        } else {
          setFilename((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case _SELF:
        return new Long(get_self());

      case NAME:
        return getName();

      case VALUE:
        return getValue();

      case FILENAME:
        return getFilename();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case _SELF:
        return isSet_self();
      case NAME:
        return isSetName();
      case VALUE:
        return isSetValue();
      case FILENAME:
        return isSetFilename();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_set_blob_hash_args)
        return this.equals((Entity_oa_set_blob_hash_args)that);
      return false;
    }

    public boolean equals(Entity_oa_set_blob_hash_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present__self = true;
      boolean that_present__self = true;
      if (this_present__self || that_present__self) {
        if (!(this_present__self && that_present__self))
          return false;
        if (this._self != that._self)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      boolean this_present_filename = true && this.isSetFilename();
      boolean that_present_filename = true && that.isSetFilename();
      if (this_present_filename || that_present_filename) {
        if (!(this_present_filename && that_present_filename))
          return false;
        if (!this.filename.equals(that.filename))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_set_blob_hash_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_set_blob_hash_args typedOther = (Entity_oa_set_blob_hash_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_self()).compareTo(typedOther.isSet_self());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_self()) {
        lastComparison = TBaseHelper.compareTo(this._self, typedOther._self);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = TBaseHelper.compareTo(this.value, typedOther.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilename()).compareTo(typedOther.isSetFilename());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilename()) {
        lastComparison = TBaseHelper.compareTo(this.filename, typedOther.filename);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // _SELF
            if (field.type == TType.I64) {
              this._self = iprot.readI64();
              set_selfIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NAME
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // VALUE
            if (field.type == TType.STRING) {
              this.value = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // FILENAME
            if (field.type == TType.STRING) {
              this.filename = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_SELF_FIELD_DESC);
      oprot.writeI64(this._self);
      oprot.writeFieldEnd();
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      if (this.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(this.value);
        oprot.writeFieldEnd();
      }
      if (this.filename != null) {
        oprot.writeFieldBegin(FILENAME_FIELD_DESC);
        oprot.writeString(this.filename);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_set_blob_hash_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_self:");
      sb.append(this._self);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filename:");
      if (this.filename == null) {
        sb.append("null");
      } else {
        sb.append(this.filename);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_set_blob_hash_result implements TBase<Entity_oa_set_blob_hash_result, Entity_oa_set_blob_hash_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_set_blob_hash_result");

    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);

    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_set_blob_hash_result.class, metaDataMap);
    }

    public Entity_oa_set_blob_hash_result() {
    }

    public Entity_oa_set_blob_hash_result(
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5)
    {
      this();
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_set_blob_hash_result(Entity_oa_set_blob_hash_result other) {
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
    }

    public Entity_oa_set_blob_hash_result deepCopy() {
      return new Entity_oa_set_blob_hash_result(this);
    }

    @Override
    public void clear() {
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public Entity_oa_set_blob_hash_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public Entity_oa_set_blob_hash_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public Entity_oa_set_blob_hash_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public Entity_oa_set_blob_hash_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public Entity_oa_set_blob_hash_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_set_blob_hash_result)
        return this.equals((Entity_oa_set_blob_hash_result)that);
      return false;
    }

    public boolean equals(Entity_oa_set_blob_hash_result that) {
      if (that == null)
        return false;

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_set_blob_hash_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_set_blob_hash_result typedOther = (Entity_oa_set_blob_hash_result)other;

      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_set_blob_hash_result(");
      boolean first = true;

      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_set_list_args implements TBase<Entity_oa_set_list_args, Entity_oa_set_list_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_set_list_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField _SELF_FIELD_DESC = new TField("_self", TType.I64, (short)2);
    private static final TField ATTRIBUTES_FIELD_DESC = new TField("attributes", TType.LIST, (short)3);

    public String token;
    public long _self;
    public List<Attribute> attributes;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      _SELF((short)2, "_self"),
      ATTRIBUTES((short)3, "attributes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // _SELF
            return _SELF;
          case 3: // ATTRIBUTES
            return ATTRIBUTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SELF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields._SELF, new FieldMetaData("_self", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64          , "EntityId")));
      tmpMap.put(_Fields.ATTRIBUTES, new FieldMetaData("attributes", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, Attribute.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_set_list_args.class, metaDataMap);
    }

    public Entity_oa_set_list_args() {
    }

    public Entity_oa_set_list_args(
      String token,
      long _self,
      List<Attribute> attributes)
    {
      this();
      this.token = token;
      this._self = _self;
      set_selfIsSet(true);
      this.attributes = attributes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_set_list_args(Entity_oa_set_list_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this._self = other._self;
      if (other.isSetAttributes()) {
        List<Attribute> __this__attributes = new ArrayList<Attribute>();
        for (Attribute other_element : other.attributes) {
          __this__attributes.add(new Attribute(other_element));
        }
        this.attributes = __this__attributes;
      }
    }

    public Entity_oa_set_list_args deepCopy() {
      return new Entity_oa_set_list_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      set_selfIsSet(false);
      this._self = 0;
      this.attributes = null;
    }

    public String getToken() {
      return this.token;
    }

    public Entity_oa_set_list_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long get_self() {
      return this._self;
    }

    public Entity_oa_set_list_args set_self(long _self) {
      this._self = _self;
      set_selfIsSet(true);
      return this;
    }

    public void unset_self() {
      __isset_bit_vector.clear(___SELF_ISSET_ID);
    }

    /** Returns true if field _self is set (has been asigned a value) and false otherwise */
    public boolean isSet_self() {
      return __isset_bit_vector.get(___SELF_ISSET_ID);
    }

    public void set_selfIsSet(boolean value) {
      __isset_bit_vector.set(___SELF_ISSET_ID, value);
    }

    public int getAttributesSize() {
      return (this.attributes == null) ? 0 : this.attributes.size();
    }

    public java.util.Iterator<Attribute> getAttributesIterator() {
      return (this.attributes == null) ? null : this.attributes.iterator();
    }

    public void addToAttributes(Attribute elem) {
      if (this.attributes == null) {
        this.attributes = new ArrayList<Attribute>();
      }
      this.attributes.add(elem);
    }

    public List<Attribute> getAttributes() {
      return this.attributes;
    }

    public Entity_oa_set_list_args setAttributes(List<Attribute> attributes) {
      this.attributes = attributes;
      return this;
    }

    public void unsetAttributes() {
      this.attributes = null;
    }

    /** Returns true if field attributes is set (has been asigned a value) and false otherwise */
    public boolean isSetAttributes() {
      return this.attributes != null;
    }

    public void setAttributesIsSet(boolean value) {
      if (!value) {
        this.attributes = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case _SELF:
        if (value == null) {
          unset_self();
        } else {
          set_self((Long)value);
        }
        break;

      case ATTRIBUTES:
        if (value == null) {
          unsetAttributes();
        } else {
          setAttributes((List<Attribute>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case _SELF:
        return new Long(get_self());

      case ATTRIBUTES:
        return getAttributes();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case _SELF:
        return isSet_self();
      case ATTRIBUTES:
        return isSetAttributes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_set_list_args)
        return this.equals((Entity_oa_set_list_args)that);
      return false;
    }

    public boolean equals(Entity_oa_set_list_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present__self = true;
      boolean that_present__self = true;
      if (this_present__self || that_present__self) {
        if (!(this_present__self && that_present__self))
          return false;
        if (this._self != that._self)
          return false;
      }

      boolean this_present_attributes = true && this.isSetAttributes();
      boolean that_present_attributes = true && that.isSetAttributes();
      if (this_present_attributes || that_present_attributes) {
        if (!(this_present_attributes && that_present_attributes))
          return false;
        if (!this.attributes.equals(that.attributes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_set_list_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_set_list_args typedOther = (Entity_oa_set_list_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_self()).compareTo(typedOther.isSet_self());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_self()) {
        lastComparison = TBaseHelper.compareTo(this._self, typedOther._self);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttributes()) {
        lastComparison = TBaseHelper.compareTo(this.attributes, typedOther.attributes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // _SELF
            if (field.type == TType.I64) {
              this._self = iprot.readI64();
              set_selfIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ATTRIBUTES
            if (field.type == TType.LIST) {
              {
                TList _list44 = iprot.readListBegin();
                this.attributes = new ArrayList<Attribute>(_list44.size);
                for (int _i45 = 0; _i45 < _list44.size; ++_i45)
                {
                  Attribute _elem46;
                  _elem46 = new Attribute();
                  _elem46.read(iprot);
                  this.attributes.add(_elem46);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_SELF_FIELD_DESC);
      oprot.writeI64(this._self);
      oprot.writeFieldEnd();
      if (this.attributes != null) {
        oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.attributes.size()));
          for (Attribute _iter47 : this.attributes)
          {
            _iter47.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_set_list_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_self:");
      sb.append(this._self);
      first = false;
      if (!first) sb.append(", ");
      sb.append("attributes:");
      if (this.attributes == null) {
        sb.append("null");
      } else {
        sb.append(this.attributes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_set_list_result implements TBase<Entity_oa_set_list_result, Entity_oa_set_list_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_set_list_result");

    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);

    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_set_list_result.class, metaDataMap);
    }

    public Entity_oa_set_list_result() {
    }

    public Entity_oa_set_list_result(
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5)
    {
      this();
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_set_list_result(Entity_oa_set_list_result other) {
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
    }

    public Entity_oa_set_list_result deepCopy() {
      return new Entity_oa_set_list_result(this);
    }

    @Override
    public void clear() {
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public Entity_oa_set_list_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public Entity_oa_set_list_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public Entity_oa_set_list_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public Entity_oa_set_list_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public Entity_oa_set_list_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_set_list_result)
        return this.equals((Entity_oa_set_list_result)that);
      return false;
    }

    public boolean equals(Entity_oa_set_list_result that) {
      if (that == null)
        return false;

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_set_list_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_set_list_result typedOther = (Entity_oa_set_list_result)other;

      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_set_list_result(");
      boolean first = true;

      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_set_map_args implements TBase<Entity_oa_set_map_args, Entity_oa_set_map_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_set_map_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField _SELF_FIELD_DESC = new TField("_self", TType.I64, (short)2);
    private static final TField ATTRIBUTES_FIELD_DESC = new TField("attributes", TType.MAP, (short)3);

    public String token;
    public long _self;
    public Map<String,AnonymousAttribute> attributes;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      _SELF((short)2, "_self"),
      ATTRIBUTES((short)3, "attributes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // _SELF
            return _SELF;
          case 3: // ATTRIBUTES
            return ATTRIBUTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SELF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields._SELF, new FieldMetaData("_self", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64          , "EntityId")));
      tmpMap.put(_Fields.ATTRIBUTES, new FieldMetaData("attributes", TFieldRequirementType.DEFAULT, 
          new MapMetaData(TType.MAP, 
              new FieldValueMetaData(TType.STRING), 
              new StructMetaData(TType.STRUCT, AnonymousAttribute.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_set_map_args.class, metaDataMap);
    }

    public Entity_oa_set_map_args() {
    }

    public Entity_oa_set_map_args(
      String token,
      long _self,
      Map<String,AnonymousAttribute> attributes)
    {
      this();
      this.token = token;
      this._self = _self;
      set_selfIsSet(true);
      this.attributes = attributes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_set_map_args(Entity_oa_set_map_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this._self = other._self;
      if (other.isSetAttributes()) {
        Map<String,AnonymousAttribute> __this__attributes = new HashMap<String,AnonymousAttribute>();
        for (Map.Entry<String, AnonymousAttribute> other_element : other.attributes.entrySet()) {

          String other_element_key = other_element.getKey();
          AnonymousAttribute other_element_value = other_element.getValue();

          String __this__attributes_copy_key = other_element_key;

          AnonymousAttribute __this__attributes_copy_value = new AnonymousAttribute(other_element_value);

          __this__attributes.put(__this__attributes_copy_key, __this__attributes_copy_value);
        }
        this.attributes = __this__attributes;
      }
    }

    public Entity_oa_set_map_args deepCopy() {
      return new Entity_oa_set_map_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      set_selfIsSet(false);
      this._self = 0;
      this.attributes = null;
    }

    public String getToken() {
      return this.token;
    }

    public Entity_oa_set_map_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long get_self() {
      return this._self;
    }

    public Entity_oa_set_map_args set_self(long _self) {
      this._self = _self;
      set_selfIsSet(true);
      return this;
    }

    public void unset_self() {
      __isset_bit_vector.clear(___SELF_ISSET_ID);
    }

    /** Returns true if field _self is set (has been asigned a value) and false otherwise */
    public boolean isSet_self() {
      return __isset_bit_vector.get(___SELF_ISSET_ID);
    }

    public void set_selfIsSet(boolean value) {
      __isset_bit_vector.set(___SELF_ISSET_ID, value);
    }

    public int getAttributesSize() {
      return (this.attributes == null) ? 0 : this.attributes.size();
    }

    public void putToAttributes(String key, AnonymousAttribute val) {
      if (this.attributes == null) {
        this.attributes = new HashMap<String,AnonymousAttribute>();
      }
      this.attributes.put(key, val);
    }

    public Map<String,AnonymousAttribute> getAttributes() {
      return this.attributes;
    }

    public Entity_oa_set_map_args setAttributes(Map<String,AnonymousAttribute> attributes) {
      this.attributes = attributes;
      return this;
    }

    public void unsetAttributes() {
      this.attributes = null;
    }

    /** Returns true if field attributes is set (has been asigned a value) and false otherwise */
    public boolean isSetAttributes() {
      return this.attributes != null;
    }

    public void setAttributesIsSet(boolean value) {
      if (!value) {
        this.attributes = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case _SELF:
        if (value == null) {
          unset_self();
        } else {
          set_self((Long)value);
        }
        break;

      case ATTRIBUTES:
        if (value == null) {
          unsetAttributes();
        } else {
          setAttributes((Map<String,AnonymousAttribute>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case _SELF:
        return new Long(get_self());

      case ATTRIBUTES:
        return getAttributes();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case _SELF:
        return isSet_self();
      case ATTRIBUTES:
        return isSetAttributes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_set_map_args)
        return this.equals((Entity_oa_set_map_args)that);
      return false;
    }

    public boolean equals(Entity_oa_set_map_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present__self = true;
      boolean that_present__self = true;
      if (this_present__self || that_present__self) {
        if (!(this_present__self && that_present__self))
          return false;
        if (this._self != that._self)
          return false;
      }

      boolean this_present_attributes = true && this.isSetAttributes();
      boolean that_present_attributes = true && that.isSetAttributes();
      if (this_present_attributes || that_present_attributes) {
        if (!(this_present_attributes && that_present_attributes))
          return false;
        if (!this.attributes.equals(that.attributes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_set_map_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_set_map_args typedOther = (Entity_oa_set_map_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_self()).compareTo(typedOther.isSet_self());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_self()) {
        lastComparison = TBaseHelper.compareTo(this._self, typedOther._self);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttributes()) {
        lastComparison = TBaseHelper.compareTo(this.attributes, typedOther.attributes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // _SELF
            if (field.type == TType.I64) {
              this._self = iprot.readI64();
              set_selfIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ATTRIBUTES
            if (field.type == TType.MAP) {
              {
                TMap _map48 = iprot.readMapBegin();
                this.attributes = new HashMap<String,AnonymousAttribute>(2*_map48.size);
                for (int _i49 = 0; _i49 < _map48.size; ++_i49)
                {
                  String _key50;
                  AnonymousAttribute _val51;
                  _key50 = iprot.readString();
                  _val51 = new AnonymousAttribute();
                  _val51.read(iprot);
                  this.attributes.put(_key50, _val51);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_SELF_FIELD_DESC);
      oprot.writeI64(this._self);
      oprot.writeFieldEnd();
      if (this.attributes != null) {
        oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.attributes.size()));
          for (Map.Entry<String, AnonymousAttribute> _iter52 : this.attributes.entrySet())
          {
            oprot.writeString(_iter52.getKey());
            _iter52.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_set_map_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_self:");
      sb.append(this._self);
      first = false;
      if (!first) sb.append(", ");
      sb.append("attributes:");
      if (this.attributes == null) {
        sb.append("null");
      } else {
        sb.append(this.attributes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_set_map_result implements TBase<Entity_oa_set_map_result, Entity_oa_set_map_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_set_map_result");

    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);

    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_set_map_result.class, metaDataMap);
    }

    public Entity_oa_set_map_result() {
    }

    public Entity_oa_set_map_result(
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5)
    {
      this();
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_set_map_result(Entity_oa_set_map_result other) {
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
    }

    public Entity_oa_set_map_result deepCopy() {
      return new Entity_oa_set_map_result(this);
    }

    @Override
    public void clear() {
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public Entity_oa_set_map_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public Entity_oa_set_map_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public Entity_oa_set_map_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public Entity_oa_set_map_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public Entity_oa_set_map_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_set_map_result)
        return this.equals((Entity_oa_set_map_result)that);
      return false;
    }

    public boolean equals(Entity_oa_set_map_result that) {
      if (that == null)
        return false;

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_set_map_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_set_map_result typedOther = (Entity_oa_set_map_result)other;

      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_set_map_result(");
      boolean first = true;

      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_set_str_args implements TBase<Entity_oa_set_str_args, Entity_oa_set_str_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_set_str_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField _SELF_FIELD_DESC = new TField("_self", TType.I64, (short)2);
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)3);
    private static final TField VALUE_FIELD_DESC = new TField("value", TType.STRING, (short)4);

    public String token;
    public long _self;
    public String name;
    public String value;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      _SELF((short)2, "_self"),
      NAME((short)3, "name"),
      VALUE((short)4, "value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // _SELF
            return _SELF;
          case 3: // NAME
            return NAME;
          case 4: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SELF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields._SELF, new FieldMetaData("_self", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64          , "EntityId")));
      tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.VALUE, new FieldMetaData("value", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_set_str_args.class, metaDataMap);
    }

    public Entity_oa_set_str_args() {
    }

    public Entity_oa_set_str_args(
      String token,
      long _self,
      String name,
      String value)
    {
      this();
      this.token = token;
      this._self = _self;
      set_selfIsSet(true);
      this.name = name;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_set_str_args(Entity_oa_set_str_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this._self = other._self;
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
    }

    public Entity_oa_set_str_args deepCopy() {
      return new Entity_oa_set_str_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      set_selfIsSet(false);
      this._self = 0;
      this.name = null;
      this.value = null;
    }

    public String getToken() {
      return this.token;
    }

    public Entity_oa_set_str_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long get_self() {
      return this._self;
    }

    public Entity_oa_set_str_args set_self(long _self) {
      this._self = _self;
      set_selfIsSet(true);
      return this;
    }

    public void unset_self() {
      __isset_bit_vector.clear(___SELF_ISSET_ID);
    }

    /** Returns true if field _self is set (has been asigned a value) and false otherwise */
    public boolean isSet_self() {
      return __isset_bit_vector.get(___SELF_ISSET_ID);
    }

    public void set_selfIsSet(boolean value) {
      __isset_bit_vector.set(___SELF_ISSET_ID, value);
    }

    public String getName() {
      return this.name;
    }

    public Entity_oa_set_str_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been asigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getValue() {
      return this.value;
    }

    public Entity_oa_set_str_args setValue(String value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been asigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case _SELF:
        if (value == null) {
          unset_self();
        } else {
          set_self((Long)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case _SELF:
        return new Long(get_self());

      case NAME:
        return getName();

      case VALUE:
        return getValue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case _SELF:
        return isSet_self();
      case NAME:
        return isSetName();
      case VALUE:
        return isSetValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_set_str_args)
        return this.equals((Entity_oa_set_str_args)that);
      return false;
    }

    public boolean equals(Entity_oa_set_str_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present__self = true;
      boolean that_present__self = true;
      if (this_present__self || that_present__self) {
        if (!(this_present__self && that_present__self))
          return false;
        if (this._self != that._self)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_set_str_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_set_str_args typedOther = (Entity_oa_set_str_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_self()).compareTo(typedOther.isSet_self());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_self()) {
        lastComparison = TBaseHelper.compareTo(this._self, typedOther._self);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = TBaseHelper.compareTo(this.value, typedOther.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // _SELF
            if (field.type == TType.I64) {
              this._self = iprot.readI64();
              set_selfIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NAME
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // VALUE
            if (field.type == TType.STRING) {
              this.value = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_SELF_FIELD_DESC);
      oprot.writeI64(this._self);
      oprot.writeFieldEnd();
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      if (this.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(this.value);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_set_str_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_self:");
      sb.append(this._self);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class Entity_oa_set_str_result implements TBase<Entity_oa_set_str_result, Entity_oa_set_str_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("Entity_oa_set_str_result");

    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);

    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(Entity_oa_set_str_result.class, metaDataMap);
    }

    public Entity_oa_set_str_result() {
    }

    public Entity_oa_set_str_result(
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5)
    {
      this();
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Entity_oa_set_str_result(Entity_oa_set_str_result other) {
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
    }

    public Entity_oa_set_str_result deepCopy() {
      return new Entity_oa_set_str_result(this);
    }

    @Override
    public void clear() {
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public Entity_oa_set_str_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public Entity_oa_set_str_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public Entity_oa_set_str_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public Entity_oa_set_str_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public Entity_oa_set_str_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Entity_oa_set_str_result)
        return this.equals((Entity_oa_set_str_result)that);
      return false;
    }

    public boolean equals(Entity_oa_set_str_result that) {
      if (that == null)
        return false;

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Entity_oa_set_str_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Entity_oa_set_str_result typedOther = (Entity_oa_set_str_result)other;

      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Entity_oa_set_str_result(");
      boolean first = true;

      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
