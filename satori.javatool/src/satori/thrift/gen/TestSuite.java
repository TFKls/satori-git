/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package satori.thrift.gen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class TestSuite {

  public interface Iface extends Entity.Iface {

    public TestSuiteStruct TestSuite_create(String token, TestSuiteStruct fields, List<Long> test_list) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, CannotSetField, TException;

    public void TestSuite_delete(String token, long _self) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException;

    public List<TestSuiteStruct> TestSuite_filter(String token, TestSuiteStruct arg_struct) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException;

    public TestSuiteStruct TestSuite_get_struct(String token, long _self) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException;

    public List<TestStruct> TestSuite_get_tests(String token, long _self) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException;

    public TestSuiteStruct TestSuite_modify(String token, long _self, TestSuiteStruct fields) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, CannotSetField, TException;

    public TestSuiteStruct TestSuite_modify_full(String token, long _self, TestSuiteStruct fields, List<Long> test_list) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, CannotSetField, TException;

  }

  public interface AsyncIface extends Entity .AsyncIface {

    public void TestSuite_create(String token, TestSuiteStruct fields, List<Long> test_list, AsyncMethodCallback<AsyncClient.TestSuite_create_call> resultHandler) throws TException;

    public void TestSuite_delete(String token, long _self, AsyncMethodCallback<AsyncClient.TestSuite_delete_call> resultHandler) throws TException;

    public void TestSuite_filter(String token, TestSuiteStruct arg_struct, AsyncMethodCallback<AsyncClient.TestSuite_filter_call> resultHandler) throws TException;

    public void TestSuite_get_struct(String token, long _self, AsyncMethodCallback<AsyncClient.TestSuite_get_struct_call> resultHandler) throws TException;

    public void TestSuite_get_tests(String token, long _self, AsyncMethodCallback<AsyncClient.TestSuite_get_tests_call> resultHandler) throws TException;

    public void TestSuite_modify(String token, long _self, TestSuiteStruct fields, AsyncMethodCallback<AsyncClient.TestSuite_modify_call> resultHandler) throws TException;

    public void TestSuite_modify_full(String token, long _self, TestSuiteStruct fields, List<Long> test_list, AsyncMethodCallback<AsyncClient.TestSuite_modify_full_call> resultHandler) throws TException;

  }

  public static class Client extends Entity.Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      super(iprot, oprot);
    }

    public TestSuiteStruct TestSuite_create(String token, TestSuiteStruct fields, List<Long> test_list) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, CannotSetField, TException
    {
      send_TestSuite_create(token, fields, test_list);
      return recv_TestSuite_create();
    }

    public void send_TestSuite_create(String token, TestSuiteStruct fields, List<Long> test_list) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("TestSuite_create", TMessageType.CALL, ++seqid_));
      TestSuite_create_args args = new TestSuite_create_args();
      args.setToken(token);
      args.setFields(fields);
      args.setTest_list(test_list);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public TestSuiteStruct recv_TestSuite_create() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, CannotSetField, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "TestSuite_create failed: out of sequence response");
      }
      TestSuite_create_result result = new TestSuite_create_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      if (result.error6 != null) {
        throw result.error6;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "TestSuite_create failed: unknown result");
    }

    public void TestSuite_delete(String token, long _self) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      send_TestSuite_delete(token, _self);
      recv_TestSuite_delete();
    }

    public void send_TestSuite_delete(String token, long _self) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("TestSuite_delete", TMessageType.CALL, ++seqid_));
      TestSuite_delete_args args = new TestSuite_delete_args();
      args.setToken(token);
      args.set_self(_self);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_TestSuite_delete() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "TestSuite_delete failed: out of sequence response");
      }
      TestSuite_delete_result result = new TestSuite_delete_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      return;
    }

    public List<TestSuiteStruct> TestSuite_filter(String token, TestSuiteStruct arg_struct) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      send_TestSuite_filter(token, arg_struct);
      return recv_TestSuite_filter();
    }

    public void send_TestSuite_filter(String token, TestSuiteStruct arg_struct) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("TestSuite_filter", TMessageType.CALL, ++seqid_));
      TestSuite_filter_args args = new TestSuite_filter_args();
      args.setToken(token);
      args.setArg_struct(arg_struct);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<TestSuiteStruct> recv_TestSuite_filter() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "TestSuite_filter failed: out of sequence response");
      }
      TestSuite_filter_result result = new TestSuite_filter_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "TestSuite_filter failed: unknown result");
    }

    public TestSuiteStruct TestSuite_get_struct(String token, long _self) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      send_TestSuite_get_struct(token, _self);
      return recv_TestSuite_get_struct();
    }

    public void send_TestSuite_get_struct(String token, long _self) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("TestSuite_get_struct", TMessageType.CALL, ++seqid_));
      TestSuite_get_struct_args args = new TestSuite_get_struct_args();
      args.setToken(token);
      args.set_self(_self);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public TestSuiteStruct recv_TestSuite_get_struct() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "TestSuite_get_struct failed: out of sequence response");
      }
      TestSuite_get_struct_result result = new TestSuite_get_struct_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "TestSuite_get_struct failed: unknown result");
    }

    public List<TestStruct> TestSuite_get_tests(String token, long _self) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      send_TestSuite_get_tests(token, _self);
      return recv_TestSuite_get_tests();
    }

    public void send_TestSuite_get_tests(String token, long _self) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("TestSuite_get_tests", TMessageType.CALL, ++seqid_));
      TestSuite_get_tests_args args = new TestSuite_get_tests_args();
      args.setToken(token);
      args.set_self(_self);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<TestStruct> recv_TestSuite_get_tests() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "TestSuite_get_tests failed: out of sequence response");
      }
      TestSuite_get_tests_result result = new TestSuite_get_tests_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "TestSuite_get_tests failed: unknown result");
    }

    public TestSuiteStruct TestSuite_modify(String token, long _self, TestSuiteStruct fields) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, CannotSetField, TException
    {
      send_TestSuite_modify(token, _self, fields);
      return recv_TestSuite_modify();
    }

    public void send_TestSuite_modify(String token, long _self, TestSuiteStruct fields) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("TestSuite_modify", TMessageType.CALL, ++seqid_));
      TestSuite_modify_args args = new TestSuite_modify_args();
      args.setToken(token);
      args.set_self(_self);
      args.setFields(fields);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public TestSuiteStruct recv_TestSuite_modify() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, CannotSetField, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "TestSuite_modify failed: out of sequence response");
      }
      TestSuite_modify_result result = new TestSuite_modify_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      if (result.error6 != null) {
        throw result.error6;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "TestSuite_modify failed: unknown result");
    }

    public TestSuiteStruct TestSuite_modify_full(String token, long _self, TestSuiteStruct fields, List<Long> test_list) throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, CannotSetField, TException
    {
      send_TestSuite_modify_full(token, _self, fields, test_list);
      return recv_TestSuite_modify_full();
    }

    public void send_TestSuite_modify_full(String token, long _self, TestSuiteStruct fields, List<Long> test_list) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("TestSuite_modify_full", TMessageType.CALL, ++seqid_));
      TestSuite_modify_full_args args = new TestSuite_modify_full_args();
      args.setToken(token);
      args.set_self(_self);
      args.setFields(fields);
      args.setTest_list(test_list);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public TestSuiteStruct recv_TestSuite_modify_full() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, CannotSetField, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "TestSuite_modify_full failed: out of sequence response");
      }
      TestSuite_modify_full_result result = new TestSuite_modify_full_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error1 != null) {
        throw result.error1;
      }
      if (result.error2 != null) {
        throw result.error2;
      }
      if (result.error3 != null) {
        throw result.error3;
      }
      if (result.error4 != null) {
        throw result.error4;
      }
      if (result.error5 != null) {
        throw result.error5;
      }
      if (result.error6 != null) {
        throw result.error6;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "TestSuite_modify_full failed: unknown result");
    }

  }
  public static class AsyncClient extends Entity.AsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void TestSuite_create(String token, TestSuiteStruct fields, List<Long> test_list, AsyncMethodCallback<TestSuite_create_call> resultHandler) throws TException {
      checkReady();
      TestSuite_create_call method_call = new TestSuite_create_call(token, fields, test_list, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class TestSuite_create_call extends TAsyncMethodCall {
      private String token;
      private TestSuiteStruct fields;
      private List<Long> test_list;
      public TestSuite_create_call(String token, TestSuiteStruct fields, List<Long> test_list, AsyncMethodCallback<TestSuite_create_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.fields = fields;
        this.test_list = test_list;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("TestSuite_create", TMessageType.CALL, 0));
        TestSuite_create_args args = new TestSuite_create_args();
        args.setToken(token);
        args.setFields(fields);
        args.setTest_list(test_list);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TestSuiteStruct getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, CannotSetField, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_TestSuite_create();
      }
    }

    public void TestSuite_delete(String token, long _self, AsyncMethodCallback<TestSuite_delete_call> resultHandler) throws TException {
      checkReady();
      TestSuite_delete_call method_call = new TestSuite_delete_call(token, _self, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class TestSuite_delete_call extends TAsyncMethodCall {
      private String token;
      private long _self;
      public TestSuite_delete_call(String token, long _self, AsyncMethodCallback<TestSuite_delete_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this._self = _self;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("TestSuite_delete", TMessageType.CALL, 0));
        TestSuite_delete_args args = new TestSuite_delete_args();
        args.setToken(token);
        args.set_self(_self);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_TestSuite_delete();
      }
    }

    public void TestSuite_filter(String token, TestSuiteStruct arg_struct, AsyncMethodCallback<TestSuite_filter_call> resultHandler) throws TException {
      checkReady();
      TestSuite_filter_call method_call = new TestSuite_filter_call(token, arg_struct, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class TestSuite_filter_call extends TAsyncMethodCall {
      private String token;
      private TestSuiteStruct arg_struct;
      public TestSuite_filter_call(String token, TestSuiteStruct arg_struct, AsyncMethodCallback<TestSuite_filter_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.arg_struct = arg_struct;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("TestSuite_filter", TMessageType.CALL, 0));
        TestSuite_filter_args args = new TestSuite_filter_args();
        args.setToken(token);
        args.setArg_struct(arg_struct);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TestSuiteStruct> getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_TestSuite_filter();
      }
    }

    public void TestSuite_get_struct(String token, long _self, AsyncMethodCallback<TestSuite_get_struct_call> resultHandler) throws TException {
      checkReady();
      TestSuite_get_struct_call method_call = new TestSuite_get_struct_call(token, _self, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class TestSuite_get_struct_call extends TAsyncMethodCall {
      private String token;
      private long _self;
      public TestSuite_get_struct_call(String token, long _self, AsyncMethodCallback<TestSuite_get_struct_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this._self = _self;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("TestSuite_get_struct", TMessageType.CALL, 0));
        TestSuite_get_struct_args args = new TestSuite_get_struct_args();
        args.setToken(token);
        args.set_self(_self);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TestSuiteStruct getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_TestSuite_get_struct();
      }
    }

    public void TestSuite_get_tests(String token, long _self, AsyncMethodCallback<TestSuite_get_tests_call> resultHandler) throws TException {
      checkReady();
      TestSuite_get_tests_call method_call = new TestSuite_get_tests_call(token, _self, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class TestSuite_get_tests_call extends TAsyncMethodCall {
      private String token;
      private long _self;
      public TestSuite_get_tests_call(String token, long _self, AsyncMethodCallback<TestSuite_get_tests_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this._self = _self;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("TestSuite_get_tests", TMessageType.CALL, 0));
        TestSuite_get_tests_args args = new TestSuite_get_tests_args();
        args.setToken(token);
        args.set_self(_self);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TestStruct> getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_TestSuite_get_tests();
      }
    }

    public void TestSuite_modify(String token, long _self, TestSuiteStruct fields, AsyncMethodCallback<TestSuite_modify_call> resultHandler) throws TException {
      checkReady();
      TestSuite_modify_call method_call = new TestSuite_modify_call(token, _self, fields, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class TestSuite_modify_call extends TAsyncMethodCall {
      private String token;
      private long _self;
      private TestSuiteStruct fields;
      public TestSuite_modify_call(String token, long _self, TestSuiteStruct fields, AsyncMethodCallback<TestSuite_modify_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this._self = _self;
        this.fields = fields;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("TestSuite_modify", TMessageType.CALL, 0));
        TestSuite_modify_args args = new TestSuite_modify_args();
        args.setToken(token);
        args.set_self(_self);
        args.setFields(fields);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TestSuiteStruct getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, CannotSetField, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_TestSuite_modify();
      }
    }

    public void TestSuite_modify_full(String token, long _self, TestSuiteStruct fields, List<Long> test_list, AsyncMethodCallback<TestSuite_modify_full_call> resultHandler) throws TException {
      checkReady();
      TestSuite_modify_full_call method_call = new TestSuite_modify_full_call(token, _self, fields, test_list, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class TestSuite_modify_full_call extends TAsyncMethodCall {
      private String token;
      private long _self;
      private TestSuiteStruct fields;
      private List<Long> test_list;
      public TestSuite_modify_full_call(String token, long _self, TestSuiteStruct fields, List<Long> test_list, AsyncMethodCallback<TestSuite_modify_full_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this._self = _self;
        this.fields = fields;
        this.test_list = test_list;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("TestSuite_modify_full", TMessageType.CALL, 0));
        TestSuite_modify_full_args args = new TestSuite_modify_full_args();
        args.setToken(token);
        args.set_self(_self);
        args.setFields(fields);
        args.setTest_list(test_list);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TestSuiteStruct getResult() throws TokenInvalid, TokenExpired, AccessDenied, ArgumentNotFound, CannotReturnObject, CannotSetField, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_TestSuite_modify_full();
      }
    }

  }

  public static class Processor extends Entity.Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      super(iface);
      iface_ = iface;
      processMap_.put("TestSuite_create", new TestSuite_create());
      processMap_.put("TestSuite_delete", new TestSuite_delete());
      processMap_.put("TestSuite_filter", new TestSuite_filter());
      processMap_.put("TestSuite_get_struct", new TestSuite_get_struct());
      processMap_.put("TestSuite_get_tests", new TestSuite_get_tests());
      processMap_.put("TestSuite_modify", new TestSuite_modify());
      processMap_.put("TestSuite_modify_full", new TestSuite_modify_full());
    }

    private Iface iface_;

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class TestSuite_create implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        TestSuite_create_args args = new TestSuite_create_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("TestSuite_create", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        TestSuite_create_result result = new TestSuite_create_result();
        try {
          result.success = iface_.TestSuite_create(args.token, args.fields, args.test_list);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (CannotSetField error6) {
          result.error6 = error6;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing TestSuite_create", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing TestSuite_create");
          oprot.writeMessageBegin(new TMessage("TestSuite_create", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("TestSuite_create", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class TestSuite_delete implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        TestSuite_delete_args args = new TestSuite_delete_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("TestSuite_delete", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        TestSuite_delete_result result = new TestSuite_delete_result();
        try {
          iface_.TestSuite_delete(args.token, args._self);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing TestSuite_delete", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing TestSuite_delete");
          oprot.writeMessageBegin(new TMessage("TestSuite_delete", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("TestSuite_delete", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class TestSuite_filter implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        TestSuite_filter_args args = new TestSuite_filter_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("TestSuite_filter", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        TestSuite_filter_result result = new TestSuite_filter_result();
        try {
          result.success = iface_.TestSuite_filter(args.token, args.arg_struct);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing TestSuite_filter", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing TestSuite_filter");
          oprot.writeMessageBegin(new TMessage("TestSuite_filter", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("TestSuite_filter", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class TestSuite_get_struct implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        TestSuite_get_struct_args args = new TestSuite_get_struct_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("TestSuite_get_struct", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        TestSuite_get_struct_result result = new TestSuite_get_struct_result();
        try {
          result.success = iface_.TestSuite_get_struct(args.token, args._self);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing TestSuite_get_struct", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing TestSuite_get_struct");
          oprot.writeMessageBegin(new TMessage("TestSuite_get_struct", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("TestSuite_get_struct", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class TestSuite_get_tests implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        TestSuite_get_tests_args args = new TestSuite_get_tests_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("TestSuite_get_tests", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        TestSuite_get_tests_result result = new TestSuite_get_tests_result();
        try {
          result.success = iface_.TestSuite_get_tests(args.token, args._self);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing TestSuite_get_tests", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing TestSuite_get_tests");
          oprot.writeMessageBegin(new TMessage("TestSuite_get_tests", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("TestSuite_get_tests", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class TestSuite_modify implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        TestSuite_modify_args args = new TestSuite_modify_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("TestSuite_modify", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        TestSuite_modify_result result = new TestSuite_modify_result();
        try {
          result.success = iface_.TestSuite_modify(args.token, args._self, args.fields);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (CannotSetField error6) {
          result.error6 = error6;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing TestSuite_modify", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing TestSuite_modify");
          oprot.writeMessageBegin(new TMessage("TestSuite_modify", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("TestSuite_modify", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class TestSuite_modify_full implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        TestSuite_modify_full_args args = new TestSuite_modify_full_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("TestSuite_modify_full", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        TestSuite_modify_full_result result = new TestSuite_modify_full_result();
        try {
          result.success = iface_.TestSuite_modify_full(args.token, args._self, args.fields, args.test_list);
        } catch (TokenInvalid error1) {
          result.error1 = error1;
        } catch (TokenExpired error2) {
          result.error2 = error2;
        } catch (AccessDenied error3) {
          result.error3 = error3;
        } catch (ArgumentNotFound error4) {
          result.error4 = error4;
        } catch (CannotReturnObject error5) {
          result.error5 = error5;
        } catch (CannotSetField error6) {
          result.error6 = error6;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing TestSuite_modify_full", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing TestSuite_modify_full");
          oprot.writeMessageBegin(new TMessage("TestSuite_modify_full", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("TestSuite_modify_full", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class TestSuite_create_args implements TBase<TestSuite_create_args, TestSuite_create_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("TestSuite_create_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField FIELDS_FIELD_DESC = new TField("fields", TType.STRUCT, (short)2);
    private static final TField TEST_LIST_FIELD_DESC = new TField("test_list", TType.LIST, (short)3);

    public String token;
    public TestSuiteStruct fields;
    public List<Long> test_list;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      FIELDS((short)2, "fields"),
      TEST_LIST((short)3, "test_list");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // FIELDS
            return FIELDS;
          case 3: // TEST_LIST
            return TEST_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.FIELDS, new FieldMetaData("fields", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, TestSuiteStruct.class)));
      tmpMap.put(_Fields.TEST_LIST, new FieldMetaData("test_list", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.I64              , "TestId"))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(TestSuite_create_args.class, metaDataMap);
    }

    public TestSuite_create_args() {
    }

    public TestSuite_create_args(
      String token,
      TestSuiteStruct fields,
      List<Long> test_list)
    {
      this();
      this.token = token;
      this.fields = fields;
      this.test_list = test_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TestSuite_create_args(TestSuite_create_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetFields()) {
        this.fields = new TestSuiteStruct(other.fields);
      }
      if (other.isSetTest_list()) {
        List<Long> __this__test_list = new ArrayList<Long>();
        for (Long other_element : other.test_list) {
          __this__test_list.add(other_element);
        }
        this.test_list = __this__test_list;
      }
    }

    public TestSuite_create_args deepCopy() {
      return new TestSuite_create_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.fields = null;
      this.test_list = null;
    }

    public String getToken() {
      return this.token;
    }

    public TestSuite_create_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public TestSuiteStruct getFields() {
      return this.fields;
    }

    public TestSuite_create_args setFields(TestSuiteStruct fields) {
      this.fields = fields;
      return this;
    }

    public void unsetFields() {
      this.fields = null;
    }

    /** Returns true if field fields is set (has been asigned a value) and false otherwise */
    public boolean isSetFields() {
      return this.fields != null;
    }

    public void setFieldsIsSet(boolean value) {
      if (!value) {
        this.fields = null;
      }
    }

    public int getTest_listSize() {
      return (this.test_list == null) ? 0 : this.test_list.size();
    }

    public java.util.Iterator<Long> getTest_listIterator() {
      return (this.test_list == null) ? null : this.test_list.iterator();
    }

    public void addToTest_list(long elem) {
      if (this.test_list == null) {
        this.test_list = new ArrayList<Long>();
      }
      this.test_list.add(elem);
    }

    public List<Long> getTest_list() {
      return this.test_list;
    }

    public TestSuite_create_args setTest_list(List<Long> test_list) {
      this.test_list = test_list;
      return this;
    }

    public void unsetTest_list() {
      this.test_list = null;
    }

    /** Returns true if field test_list is set (has been asigned a value) and false otherwise */
    public boolean isSetTest_list() {
      return this.test_list != null;
    }

    public void setTest_listIsSet(boolean value) {
      if (!value) {
        this.test_list = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case FIELDS:
        if (value == null) {
          unsetFields();
        } else {
          setFields((TestSuiteStruct)value);
        }
        break;

      case TEST_LIST:
        if (value == null) {
          unsetTest_list();
        } else {
          setTest_list((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case FIELDS:
        return getFields();

      case TEST_LIST:
        return getTest_list();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case FIELDS:
        return isSetFields();
      case TEST_LIST:
        return isSetTest_list();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof TestSuite_create_args)
        return this.equals((TestSuite_create_args)that);
      return false;
    }

    public boolean equals(TestSuite_create_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_fields = true && this.isSetFields();
      boolean that_present_fields = true && that.isSetFields();
      if (this_present_fields || that_present_fields) {
        if (!(this_present_fields && that_present_fields))
          return false;
        if (!this.fields.equals(that.fields))
          return false;
      }

      boolean this_present_test_list = true && this.isSetTest_list();
      boolean that_present_test_list = true && that.isSetTest_list();
      if (this_present_test_list || that_present_test_list) {
        if (!(this_present_test_list && that_present_test_list))
          return false;
        if (!this.test_list.equals(that.test_list))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(TestSuite_create_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      TestSuite_create_args typedOther = (TestSuite_create_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFields()).compareTo(typedOther.isSetFields());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFields()) {
        lastComparison = TBaseHelper.compareTo(this.fields, typedOther.fields);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTest_list()).compareTo(typedOther.isSetTest_list());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTest_list()) {
        lastComparison = TBaseHelper.compareTo(this.test_list, typedOther.test_list);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // FIELDS
            if (field.type == TType.STRUCT) {
              this.fields = new TestSuiteStruct();
              this.fields.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TEST_LIST
            if (field.type == TType.LIST) {
              {
                TList _list381 = iprot.readListBegin();
                this.test_list = new ArrayList<Long>(_list381.size);
                for (int _i382 = 0; _i382 < _list381.size; ++_i382)
                {
                  long _elem383;
                  _elem383 = iprot.readI64();
                  this.test_list.add(_elem383);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.fields != null) {
        oprot.writeFieldBegin(FIELDS_FIELD_DESC);
        this.fields.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.test_list != null) {
        oprot.writeFieldBegin(TEST_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I64, this.test_list.size()));
          for (long _iter384 : this.test_list)
          {
            oprot.writeI64(_iter384);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("TestSuite_create_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fields:");
      if (this.fields == null) {
        sb.append("null");
      } else {
        sb.append(this.fields);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("test_list:");
      if (this.test_list == null) {
        sb.append("null");
      } else {
        sb.append(this.test_list);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class TestSuite_create_result implements TBase<TestSuite_create_result, TestSuite_create_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("TestSuite_create_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);
    private static final TField ERROR6_FIELD_DESC = new TField("error6", TType.STRUCT, (short)6);

    public TestSuiteStruct success;
    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;
    public CannotSetField error6;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5"),
      ERROR6((short)6, "error6");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          case 6: // ERROR6
            return ERROR6;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, TestSuiteStruct.class)));
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR6, new FieldMetaData("error6", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(TestSuite_create_result.class, metaDataMap);
    }

    public TestSuite_create_result() {
    }

    public TestSuite_create_result(
      TestSuiteStruct success,
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5,
      CannotSetField error6)
    {
      this();
      this.success = success;
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
      this.error6 = error6;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TestSuite_create_result(TestSuite_create_result other) {
      if (other.isSetSuccess()) {
        this.success = new TestSuiteStruct(other.success);
      }
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
      if (other.isSetError6()) {
        this.error6 = new CannotSetField(other.error6);
      }
    }

    public TestSuite_create_result deepCopy() {
      return new TestSuite_create_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
      this.error6 = null;
    }

    public TestSuiteStruct getSuccess() {
      return this.success;
    }

    public TestSuite_create_result setSuccess(TestSuiteStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public TestSuite_create_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public TestSuite_create_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public TestSuite_create_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public TestSuite_create_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public TestSuite_create_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public CannotSetField getError6() {
      return this.error6;
    }

    public TestSuite_create_result setError6(CannotSetField error6) {
      this.error6 = error6;
      return this;
    }

    public void unsetError6() {
      this.error6 = null;
    }

    /** Returns true if field error6 is set (has been asigned a value) and false otherwise */
    public boolean isSetError6() {
      return this.error6 != null;
    }

    public void setError6IsSet(boolean value) {
      if (!value) {
        this.error6 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TestSuiteStruct)value);
        }
        break;

      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      case ERROR6:
        if (value == null) {
          unsetError6();
        } else {
          setError6((CannotSetField)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      case ERROR6:
        return getError6();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      case ERROR6:
        return isSetError6();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof TestSuite_create_result)
        return this.equals((TestSuite_create_result)that);
      return false;
    }

    public boolean equals(TestSuite_create_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      boolean this_present_error6 = true && this.isSetError6();
      boolean that_present_error6 = true && that.isSetError6();
      if (this_present_error6 || that_present_error6) {
        if (!(this_present_error6 && that_present_error6))
          return false;
        if (!this.error6.equals(that.error6))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(TestSuite_create_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      TestSuite_create_result typedOther = (TestSuite_create_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError6()).compareTo(typedOther.isSetError6());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError6()) {
        lastComparison = TBaseHelper.compareTo(this.error6, typedOther.error6);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new TestSuiteStruct();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // ERROR6
            if (field.type == TType.STRUCT) {
              this.error6 = new CannotSetField();
              this.error6.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError6()) {
        oprot.writeFieldBegin(ERROR6_FIELD_DESC);
        this.error6.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("TestSuite_create_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error6:");
      if (this.error6 == null) {
        sb.append("null");
      } else {
        sb.append(this.error6);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class TestSuite_delete_args implements TBase<TestSuite_delete_args, TestSuite_delete_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("TestSuite_delete_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField _SELF_FIELD_DESC = new TField("_self", TType.I64, (short)2);

    public String token;
    public long _self;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      _SELF((short)2, "_self");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // _SELF
            return _SELF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SELF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields._SELF, new FieldMetaData("_self", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64          , "TestSuiteId")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(TestSuite_delete_args.class, metaDataMap);
    }

    public TestSuite_delete_args() {
    }

    public TestSuite_delete_args(
      String token,
      long _self)
    {
      this();
      this.token = token;
      this._self = _self;
      set_selfIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TestSuite_delete_args(TestSuite_delete_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this._self = other._self;
    }

    public TestSuite_delete_args deepCopy() {
      return new TestSuite_delete_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      set_selfIsSet(false);
      this._self = 0;
    }

    public String getToken() {
      return this.token;
    }

    public TestSuite_delete_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long get_self() {
      return this._self;
    }

    public TestSuite_delete_args set_self(long _self) {
      this._self = _self;
      set_selfIsSet(true);
      return this;
    }

    public void unset_self() {
      __isset_bit_vector.clear(___SELF_ISSET_ID);
    }

    /** Returns true if field _self is set (has been asigned a value) and false otherwise */
    public boolean isSet_self() {
      return __isset_bit_vector.get(___SELF_ISSET_ID);
    }

    public void set_selfIsSet(boolean value) {
      __isset_bit_vector.set(___SELF_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case _SELF:
        if (value == null) {
          unset_self();
        } else {
          set_self((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case _SELF:
        return new Long(get_self());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case _SELF:
        return isSet_self();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof TestSuite_delete_args)
        return this.equals((TestSuite_delete_args)that);
      return false;
    }

    public boolean equals(TestSuite_delete_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present__self = true;
      boolean that_present__self = true;
      if (this_present__self || that_present__self) {
        if (!(this_present__self && that_present__self))
          return false;
        if (this._self != that._self)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(TestSuite_delete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      TestSuite_delete_args typedOther = (TestSuite_delete_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_self()).compareTo(typedOther.isSet_self());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_self()) {
        lastComparison = TBaseHelper.compareTo(this._self, typedOther._self);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // _SELF
            if (field.type == TType.I64) {
              this._self = iprot.readI64();
              set_selfIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_SELF_FIELD_DESC);
      oprot.writeI64(this._self);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("TestSuite_delete_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_self:");
      sb.append(this._self);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class TestSuite_delete_result implements TBase<TestSuite_delete_result, TestSuite_delete_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("TestSuite_delete_result");

    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);

    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(TestSuite_delete_result.class, metaDataMap);
    }

    public TestSuite_delete_result() {
    }

    public TestSuite_delete_result(
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5)
    {
      this();
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TestSuite_delete_result(TestSuite_delete_result other) {
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
    }

    public TestSuite_delete_result deepCopy() {
      return new TestSuite_delete_result(this);
    }

    @Override
    public void clear() {
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public TestSuite_delete_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public TestSuite_delete_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public TestSuite_delete_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public TestSuite_delete_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public TestSuite_delete_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof TestSuite_delete_result)
        return this.equals((TestSuite_delete_result)that);
      return false;
    }

    public boolean equals(TestSuite_delete_result that) {
      if (that == null)
        return false;

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(TestSuite_delete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      TestSuite_delete_result typedOther = (TestSuite_delete_result)other;

      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("TestSuite_delete_result(");
      boolean first = true;

      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class TestSuite_filter_args implements TBase<TestSuite_filter_args, TestSuite_filter_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("TestSuite_filter_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField ARG_STRUCT_FIELD_DESC = new TField("arg_struct", TType.STRUCT, (short)2);

    public String token;
    public TestSuiteStruct arg_struct;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      ARG_STRUCT((short)2, "arg_struct");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // ARG_STRUCT
            return ARG_STRUCT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.ARG_STRUCT, new FieldMetaData("arg_struct", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, TestSuiteStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(TestSuite_filter_args.class, metaDataMap);
    }

    public TestSuite_filter_args() {
    }

    public TestSuite_filter_args(
      String token,
      TestSuiteStruct arg_struct)
    {
      this();
      this.token = token;
      this.arg_struct = arg_struct;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TestSuite_filter_args(TestSuite_filter_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetArg_struct()) {
        this.arg_struct = new TestSuiteStruct(other.arg_struct);
      }
    }

    public TestSuite_filter_args deepCopy() {
      return new TestSuite_filter_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.arg_struct = null;
    }

    public String getToken() {
      return this.token;
    }

    public TestSuite_filter_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public TestSuiteStruct getArg_struct() {
      return this.arg_struct;
    }

    public TestSuite_filter_args setArg_struct(TestSuiteStruct arg_struct) {
      this.arg_struct = arg_struct;
      return this;
    }

    public void unsetArg_struct() {
      this.arg_struct = null;
    }

    /** Returns true if field arg_struct is set (has been asigned a value) and false otherwise */
    public boolean isSetArg_struct() {
      return this.arg_struct != null;
    }

    public void setArg_structIsSet(boolean value) {
      if (!value) {
        this.arg_struct = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case ARG_STRUCT:
        if (value == null) {
          unsetArg_struct();
        } else {
          setArg_struct((TestSuiteStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case ARG_STRUCT:
        return getArg_struct();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case ARG_STRUCT:
        return isSetArg_struct();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof TestSuite_filter_args)
        return this.equals((TestSuite_filter_args)that);
      return false;
    }

    public boolean equals(TestSuite_filter_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_arg_struct = true && this.isSetArg_struct();
      boolean that_present_arg_struct = true && that.isSetArg_struct();
      if (this_present_arg_struct || that_present_arg_struct) {
        if (!(this_present_arg_struct && that_present_arg_struct))
          return false;
        if (!this.arg_struct.equals(that.arg_struct))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(TestSuite_filter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      TestSuite_filter_args typedOther = (TestSuite_filter_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg_struct()).compareTo(typedOther.isSetArg_struct());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg_struct()) {
        lastComparison = TBaseHelper.compareTo(this.arg_struct, typedOther.arg_struct);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ARG_STRUCT
            if (field.type == TType.STRUCT) {
              this.arg_struct = new TestSuiteStruct();
              this.arg_struct.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.arg_struct != null) {
        oprot.writeFieldBegin(ARG_STRUCT_FIELD_DESC);
        this.arg_struct.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("TestSuite_filter_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg_struct:");
      if (this.arg_struct == null) {
        sb.append("null");
      } else {
        sb.append(this.arg_struct);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class TestSuite_filter_result implements TBase<TestSuite_filter_result, TestSuite_filter_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("TestSuite_filter_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);

    public List<TestSuiteStruct> success;
    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, TestSuiteStruct.class))));
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(TestSuite_filter_result.class, metaDataMap);
    }

    public TestSuite_filter_result() {
    }

    public TestSuite_filter_result(
      List<TestSuiteStruct> success,
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5)
    {
      this();
      this.success = success;
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TestSuite_filter_result(TestSuite_filter_result other) {
      if (other.isSetSuccess()) {
        List<TestSuiteStruct> __this__success = new ArrayList<TestSuiteStruct>();
        for (TestSuiteStruct other_element : other.success) {
          __this__success.add(new TestSuiteStruct(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
    }

    public TestSuite_filter_result deepCopy() {
      return new TestSuite_filter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TestSuiteStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TestSuiteStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<TestSuiteStruct>();
      }
      this.success.add(elem);
    }

    public List<TestSuiteStruct> getSuccess() {
      return this.success;
    }

    public TestSuite_filter_result setSuccess(List<TestSuiteStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public TestSuite_filter_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public TestSuite_filter_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public TestSuite_filter_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public TestSuite_filter_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public TestSuite_filter_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TestSuiteStruct>)value);
        }
        break;

      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof TestSuite_filter_result)
        return this.equals((TestSuite_filter_result)that);
      return false;
    }

    public boolean equals(TestSuite_filter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(TestSuite_filter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      TestSuite_filter_result typedOther = (TestSuite_filter_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list385 = iprot.readListBegin();
                this.success = new ArrayList<TestSuiteStruct>(_list385.size);
                for (int _i386 = 0; _i386 < _list385.size; ++_i386)
                {
                  TestSuiteStruct _elem387;
                  _elem387 = new TestSuiteStruct();
                  _elem387.read(iprot);
                  this.success.add(_elem387);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (TestSuiteStruct _iter388 : this.success)
          {
            _iter388.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("TestSuite_filter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class TestSuite_get_struct_args implements TBase<TestSuite_get_struct_args, TestSuite_get_struct_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("TestSuite_get_struct_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField _SELF_FIELD_DESC = new TField("_self", TType.I64, (short)2);

    public String token;
    public long _self;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      _SELF((short)2, "_self");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // _SELF
            return _SELF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SELF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields._SELF, new FieldMetaData("_self", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64          , "TestSuiteId")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(TestSuite_get_struct_args.class, metaDataMap);
    }

    public TestSuite_get_struct_args() {
    }

    public TestSuite_get_struct_args(
      String token,
      long _self)
    {
      this();
      this.token = token;
      this._self = _self;
      set_selfIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TestSuite_get_struct_args(TestSuite_get_struct_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this._self = other._self;
    }

    public TestSuite_get_struct_args deepCopy() {
      return new TestSuite_get_struct_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      set_selfIsSet(false);
      this._self = 0;
    }

    public String getToken() {
      return this.token;
    }

    public TestSuite_get_struct_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long get_self() {
      return this._self;
    }

    public TestSuite_get_struct_args set_self(long _self) {
      this._self = _self;
      set_selfIsSet(true);
      return this;
    }

    public void unset_self() {
      __isset_bit_vector.clear(___SELF_ISSET_ID);
    }

    /** Returns true if field _self is set (has been asigned a value) and false otherwise */
    public boolean isSet_self() {
      return __isset_bit_vector.get(___SELF_ISSET_ID);
    }

    public void set_selfIsSet(boolean value) {
      __isset_bit_vector.set(___SELF_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case _SELF:
        if (value == null) {
          unset_self();
        } else {
          set_self((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case _SELF:
        return new Long(get_self());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case _SELF:
        return isSet_self();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof TestSuite_get_struct_args)
        return this.equals((TestSuite_get_struct_args)that);
      return false;
    }

    public boolean equals(TestSuite_get_struct_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present__self = true;
      boolean that_present__self = true;
      if (this_present__self || that_present__self) {
        if (!(this_present__self && that_present__self))
          return false;
        if (this._self != that._self)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(TestSuite_get_struct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      TestSuite_get_struct_args typedOther = (TestSuite_get_struct_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_self()).compareTo(typedOther.isSet_self());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_self()) {
        lastComparison = TBaseHelper.compareTo(this._self, typedOther._self);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // _SELF
            if (field.type == TType.I64) {
              this._self = iprot.readI64();
              set_selfIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_SELF_FIELD_DESC);
      oprot.writeI64(this._self);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("TestSuite_get_struct_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_self:");
      sb.append(this._self);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class TestSuite_get_struct_result implements TBase<TestSuite_get_struct_result, TestSuite_get_struct_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("TestSuite_get_struct_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);

    public TestSuiteStruct success;
    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, TestSuiteStruct.class)));
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(TestSuite_get_struct_result.class, metaDataMap);
    }

    public TestSuite_get_struct_result() {
    }

    public TestSuite_get_struct_result(
      TestSuiteStruct success,
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5)
    {
      this();
      this.success = success;
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TestSuite_get_struct_result(TestSuite_get_struct_result other) {
      if (other.isSetSuccess()) {
        this.success = new TestSuiteStruct(other.success);
      }
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
    }

    public TestSuite_get_struct_result deepCopy() {
      return new TestSuite_get_struct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
    }

    public TestSuiteStruct getSuccess() {
      return this.success;
    }

    public TestSuite_get_struct_result setSuccess(TestSuiteStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public TestSuite_get_struct_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public TestSuite_get_struct_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public TestSuite_get_struct_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public TestSuite_get_struct_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public TestSuite_get_struct_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TestSuiteStruct)value);
        }
        break;

      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof TestSuite_get_struct_result)
        return this.equals((TestSuite_get_struct_result)that);
      return false;
    }

    public boolean equals(TestSuite_get_struct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(TestSuite_get_struct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      TestSuite_get_struct_result typedOther = (TestSuite_get_struct_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new TestSuiteStruct();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("TestSuite_get_struct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class TestSuite_get_tests_args implements TBase<TestSuite_get_tests_args, TestSuite_get_tests_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("TestSuite_get_tests_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField _SELF_FIELD_DESC = new TField("_self", TType.I64, (short)2);

    public String token;
    public long _self;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      _SELF((short)2, "_self");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // _SELF
            return _SELF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SELF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields._SELF, new FieldMetaData("_self", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64          , "TestSuiteId")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(TestSuite_get_tests_args.class, metaDataMap);
    }

    public TestSuite_get_tests_args() {
    }

    public TestSuite_get_tests_args(
      String token,
      long _self)
    {
      this();
      this.token = token;
      this._self = _self;
      set_selfIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TestSuite_get_tests_args(TestSuite_get_tests_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this._self = other._self;
    }

    public TestSuite_get_tests_args deepCopy() {
      return new TestSuite_get_tests_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      set_selfIsSet(false);
      this._self = 0;
    }

    public String getToken() {
      return this.token;
    }

    public TestSuite_get_tests_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long get_self() {
      return this._self;
    }

    public TestSuite_get_tests_args set_self(long _self) {
      this._self = _self;
      set_selfIsSet(true);
      return this;
    }

    public void unset_self() {
      __isset_bit_vector.clear(___SELF_ISSET_ID);
    }

    /** Returns true if field _self is set (has been asigned a value) and false otherwise */
    public boolean isSet_self() {
      return __isset_bit_vector.get(___SELF_ISSET_ID);
    }

    public void set_selfIsSet(boolean value) {
      __isset_bit_vector.set(___SELF_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case _SELF:
        if (value == null) {
          unset_self();
        } else {
          set_self((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case _SELF:
        return new Long(get_self());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case _SELF:
        return isSet_self();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof TestSuite_get_tests_args)
        return this.equals((TestSuite_get_tests_args)that);
      return false;
    }

    public boolean equals(TestSuite_get_tests_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present__self = true;
      boolean that_present__self = true;
      if (this_present__self || that_present__self) {
        if (!(this_present__self && that_present__self))
          return false;
        if (this._self != that._self)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(TestSuite_get_tests_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      TestSuite_get_tests_args typedOther = (TestSuite_get_tests_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_self()).compareTo(typedOther.isSet_self());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_self()) {
        lastComparison = TBaseHelper.compareTo(this._self, typedOther._self);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // _SELF
            if (field.type == TType.I64) {
              this._self = iprot.readI64();
              set_selfIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_SELF_FIELD_DESC);
      oprot.writeI64(this._self);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("TestSuite_get_tests_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_self:");
      sb.append(this._self);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class TestSuite_get_tests_result implements TBase<TestSuite_get_tests_result, TestSuite_get_tests_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("TestSuite_get_tests_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);

    public List<TestStruct> success;
    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, TestStruct.class))));
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(TestSuite_get_tests_result.class, metaDataMap);
    }

    public TestSuite_get_tests_result() {
    }

    public TestSuite_get_tests_result(
      List<TestStruct> success,
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5)
    {
      this();
      this.success = success;
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TestSuite_get_tests_result(TestSuite_get_tests_result other) {
      if (other.isSetSuccess()) {
        List<TestStruct> __this__success = new ArrayList<TestStruct>();
        for (TestStruct other_element : other.success) {
          __this__success.add(new TestStruct(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
    }

    public TestSuite_get_tests_result deepCopy() {
      return new TestSuite_get_tests_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TestStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TestStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<TestStruct>();
      }
      this.success.add(elem);
    }

    public List<TestStruct> getSuccess() {
      return this.success;
    }

    public TestSuite_get_tests_result setSuccess(List<TestStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public TestSuite_get_tests_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public TestSuite_get_tests_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public TestSuite_get_tests_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public TestSuite_get_tests_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public TestSuite_get_tests_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TestStruct>)value);
        }
        break;

      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof TestSuite_get_tests_result)
        return this.equals((TestSuite_get_tests_result)that);
      return false;
    }

    public boolean equals(TestSuite_get_tests_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(TestSuite_get_tests_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      TestSuite_get_tests_result typedOther = (TestSuite_get_tests_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list389 = iprot.readListBegin();
                this.success = new ArrayList<TestStruct>(_list389.size);
                for (int _i390 = 0; _i390 < _list389.size; ++_i390)
                {
                  TestStruct _elem391;
                  _elem391 = new TestStruct();
                  _elem391.read(iprot);
                  this.success.add(_elem391);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (TestStruct _iter392 : this.success)
          {
            _iter392.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("TestSuite_get_tests_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class TestSuite_modify_args implements TBase<TestSuite_modify_args, TestSuite_modify_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("TestSuite_modify_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField _SELF_FIELD_DESC = new TField("_self", TType.I64, (short)2);
    private static final TField FIELDS_FIELD_DESC = new TField("fields", TType.STRUCT, (short)3);

    public String token;
    public long _self;
    public TestSuiteStruct fields;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      _SELF((short)2, "_self"),
      FIELDS((short)3, "fields");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // _SELF
            return _SELF;
          case 3: // FIELDS
            return FIELDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SELF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields._SELF, new FieldMetaData("_self", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64          , "TestSuiteId")));
      tmpMap.put(_Fields.FIELDS, new FieldMetaData("fields", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, TestSuiteStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(TestSuite_modify_args.class, metaDataMap);
    }

    public TestSuite_modify_args() {
    }

    public TestSuite_modify_args(
      String token,
      long _self,
      TestSuiteStruct fields)
    {
      this();
      this.token = token;
      this._self = _self;
      set_selfIsSet(true);
      this.fields = fields;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TestSuite_modify_args(TestSuite_modify_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this._self = other._self;
      if (other.isSetFields()) {
        this.fields = new TestSuiteStruct(other.fields);
      }
    }

    public TestSuite_modify_args deepCopy() {
      return new TestSuite_modify_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      set_selfIsSet(false);
      this._self = 0;
      this.fields = null;
    }

    public String getToken() {
      return this.token;
    }

    public TestSuite_modify_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long get_self() {
      return this._self;
    }

    public TestSuite_modify_args set_self(long _self) {
      this._self = _self;
      set_selfIsSet(true);
      return this;
    }

    public void unset_self() {
      __isset_bit_vector.clear(___SELF_ISSET_ID);
    }

    /** Returns true if field _self is set (has been asigned a value) and false otherwise */
    public boolean isSet_self() {
      return __isset_bit_vector.get(___SELF_ISSET_ID);
    }

    public void set_selfIsSet(boolean value) {
      __isset_bit_vector.set(___SELF_ISSET_ID, value);
    }

    public TestSuiteStruct getFields() {
      return this.fields;
    }

    public TestSuite_modify_args setFields(TestSuiteStruct fields) {
      this.fields = fields;
      return this;
    }

    public void unsetFields() {
      this.fields = null;
    }

    /** Returns true if field fields is set (has been asigned a value) and false otherwise */
    public boolean isSetFields() {
      return this.fields != null;
    }

    public void setFieldsIsSet(boolean value) {
      if (!value) {
        this.fields = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case _SELF:
        if (value == null) {
          unset_self();
        } else {
          set_self((Long)value);
        }
        break;

      case FIELDS:
        if (value == null) {
          unsetFields();
        } else {
          setFields((TestSuiteStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case _SELF:
        return new Long(get_self());

      case FIELDS:
        return getFields();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case _SELF:
        return isSet_self();
      case FIELDS:
        return isSetFields();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof TestSuite_modify_args)
        return this.equals((TestSuite_modify_args)that);
      return false;
    }

    public boolean equals(TestSuite_modify_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present__self = true;
      boolean that_present__self = true;
      if (this_present__self || that_present__self) {
        if (!(this_present__self && that_present__self))
          return false;
        if (this._self != that._self)
          return false;
      }

      boolean this_present_fields = true && this.isSetFields();
      boolean that_present_fields = true && that.isSetFields();
      if (this_present_fields || that_present_fields) {
        if (!(this_present_fields && that_present_fields))
          return false;
        if (!this.fields.equals(that.fields))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(TestSuite_modify_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      TestSuite_modify_args typedOther = (TestSuite_modify_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_self()).compareTo(typedOther.isSet_self());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_self()) {
        lastComparison = TBaseHelper.compareTo(this._self, typedOther._self);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFields()).compareTo(typedOther.isSetFields());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFields()) {
        lastComparison = TBaseHelper.compareTo(this.fields, typedOther.fields);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // _SELF
            if (field.type == TType.I64) {
              this._self = iprot.readI64();
              set_selfIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // FIELDS
            if (field.type == TType.STRUCT) {
              this.fields = new TestSuiteStruct();
              this.fields.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_SELF_FIELD_DESC);
      oprot.writeI64(this._self);
      oprot.writeFieldEnd();
      if (this.fields != null) {
        oprot.writeFieldBegin(FIELDS_FIELD_DESC);
        this.fields.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("TestSuite_modify_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_self:");
      sb.append(this._self);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fields:");
      if (this.fields == null) {
        sb.append("null");
      } else {
        sb.append(this.fields);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class TestSuite_modify_result implements TBase<TestSuite_modify_result, TestSuite_modify_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("TestSuite_modify_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);
    private static final TField ERROR6_FIELD_DESC = new TField("error6", TType.STRUCT, (short)6);

    public TestSuiteStruct success;
    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;
    public CannotSetField error6;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5"),
      ERROR6((short)6, "error6");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          case 6: // ERROR6
            return ERROR6;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, TestSuiteStruct.class)));
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR6, new FieldMetaData("error6", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(TestSuite_modify_result.class, metaDataMap);
    }

    public TestSuite_modify_result() {
    }

    public TestSuite_modify_result(
      TestSuiteStruct success,
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5,
      CannotSetField error6)
    {
      this();
      this.success = success;
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
      this.error6 = error6;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TestSuite_modify_result(TestSuite_modify_result other) {
      if (other.isSetSuccess()) {
        this.success = new TestSuiteStruct(other.success);
      }
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
      if (other.isSetError6()) {
        this.error6 = new CannotSetField(other.error6);
      }
    }

    public TestSuite_modify_result deepCopy() {
      return new TestSuite_modify_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
      this.error6 = null;
    }

    public TestSuiteStruct getSuccess() {
      return this.success;
    }

    public TestSuite_modify_result setSuccess(TestSuiteStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public TestSuite_modify_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public TestSuite_modify_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public TestSuite_modify_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public TestSuite_modify_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public TestSuite_modify_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public CannotSetField getError6() {
      return this.error6;
    }

    public TestSuite_modify_result setError6(CannotSetField error6) {
      this.error6 = error6;
      return this;
    }

    public void unsetError6() {
      this.error6 = null;
    }

    /** Returns true if field error6 is set (has been asigned a value) and false otherwise */
    public boolean isSetError6() {
      return this.error6 != null;
    }

    public void setError6IsSet(boolean value) {
      if (!value) {
        this.error6 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TestSuiteStruct)value);
        }
        break;

      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      case ERROR6:
        if (value == null) {
          unsetError6();
        } else {
          setError6((CannotSetField)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      case ERROR6:
        return getError6();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      case ERROR6:
        return isSetError6();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof TestSuite_modify_result)
        return this.equals((TestSuite_modify_result)that);
      return false;
    }

    public boolean equals(TestSuite_modify_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      boolean this_present_error6 = true && this.isSetError6();
      boolean that_present_error6 = true && that.isSetError6();
      if (this_present_error6 || that_present_error6) {
        if (!(this_present_error6 && that_present_error6))
          return false;
        if (!this.error6.equals(that.error6))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(TestSuite_modify_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      TestSuite_modify_result typedOther = (TestSuite_modify_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError6()).compareTo(typedOther.isSetError6());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError6()) {
        lastComparison = TBaseHelper.compareTo(this.error6, typedOther.error6);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new TestSuiteStruct();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // ERROR6
            if (field.type == TType.STRUCT) {
              this.error6 = new CannotSetField();
              this.error6.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError6()) {
        oprot.writeFieldBegin(ERROR6_FIELD_DESC);
        this.error6.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("TestSuite_modify_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error6:");
      if (this.error6 == null) {
        sb.append("null");
      } else {
        sb.append(this.error6);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class TestSuite_modify_full_args implements TBase<TestSuite_modify_full_args, TestSuite_modify_full_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("TestSuite_modify_full_args");

    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
    private static final TField _SELF_FIELD_DESC = new TField("_self", TType.I64, (short)2);
    private static final TField FIELDS_FIELD_DESC = new TField("fields", TType.STRUCT, (short)3);
    private static final TField TEST_LIST_FIELD_DESC = new TField("test_list", TType.LIST, (short)4);

    public String token;
    public long _self;
    public TestSuiteStruct fields;
    public List<Long> test_list;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TOKEN((short)1, "token"),
      _SELF((short)2, "_self"),
      FIELDS((short)3, "fields"),
      TEST_LIST((short)4, "test_list");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // _SELF
            return _SELF;
          case 3: // FIELDS
            return FIELDS;
          case 4: // TEST_LIST
            return TEST_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SELF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new FieldMetaData("token", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields._SELF, new FieldMetaData("_self", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64          , "TestSuiteId")));
      tmpMap.put(_Fields.FIELDS, new FieldMetaData("fields", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, TestSuiteStruct.class)));
      tmpMap.put(_Fields.TEST_LIST, new FieldMetaData("test_list", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.I64              , "TestId"))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(TestSuite_modify_full_args.class, metaDataMap);
    }

    public TestSuite_modify_full_args() {
    }

    public TestSuite_modify_full_args(
      String token,
      long _self,
      TestSuiteStruct fields,
      List<Long> test_list)
    {
      this();
      this.token = token;
      this._self = _self;
      set_selfIsSet(true);
      this.fields = fields;
      this.test_list = test_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TestSuite_modify_full_args(TestSuite_modify_full_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this._self = other._self;
      if (other.isSetFields()) {
        this.fields = new TestSuiteStruct(other.fields);
      }
      if (other.isSetTest_list()) {
        List<Long> __this__test_list = new ArrayList<Long>();
        for (Long other_element : other.test_list) {
          __this__test_list.add(other_element);
        }
        this.test_list = __this__test_list;
      }
    }

    public TestSuite_modify_full_args deepCopy() {
      return new TestSuite_modify_full_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      set_selfIsSet(false);
      this._self = 0;
      this.fields = null;
      this.test_list = null;
    }

    public String getToken() {
      return this.token;
    }

    public TestSuite_modify_full_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been asigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long get_self() {
      return this._self;
    }

    public TestSuite_modify_full_args set_self(long _self) {
      this._self = _self;
      set_selfIsSet(true);
      return this;
    }

    public void unset_self() {
      __isset_bit_vector.clear(___SELF_ISSET_ID);
    }

    /** Returns true if field _self is set (has been asigned a value) and false otherwise */
    public boolean isSet_self() {
      return __isset_bit_vector.get(___SELF_ISSET_ID);
    }

    public void set_selfIsSet(boolean value) {
      __isset_bit_vector.set(___SELF_ISSET_ID, value);
    }

    public TestSuiteStruct getFields() {
      return this.fields;
    }

    public TestSuite_modify_full_args setFields(TestSuiteStruct fields) {
      this.fields = fields;
      return this;
    }

    public void unsetFields() {
      this.fields = null;
    }

    /** Returns true if field fields is set (has been asigned a value) and false otherwise */
    public boolean isSetFields() {
      return this.fields != null;
    }

    public void setFieldsIsSet(boolean value) {
      if (!value) {
        this.fields = null;
      }
    }

    public int getTest_listSize() {
      return (this.test_list == null) ? 0 : this.test_list.size();
    }

    public java.util.Iterator<Long> getTest_listIterator() {
      return (this.test_list == null) ? null : this.test_list.iterator();
    }

    public void addToTest_list(long elem) {
      if (this.test_list == null) {
        this.test_list = new ArrayList<Long>();
      }
      this.test_list.add(elem);
    }

    public List<Long> getTest_list() {
      return this.test_list;
    }

    public TestSuite_modify_full_args setTest_list(List<Long> test_list) {
      this.test_list = test_list;
      return this;
    }

    public void unsetTest_list() {
      this.test_list = null;
    }

    /** Returns true if field test_list is set (has been asigned a value) and false otherwise */
    public boolean isSetTest_list() {
      return this.test_list != null;
    }

    public void setTest_listIsSet(boolean value) {
      if (!value) {
        this.test_list = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case _SELF:
        if (value == null) {
          unset_self();
        } else {
          set_self((Long)value);
        }
        break;

      case FIELDS:
        if (value == null) {
          unsetFields();
        } else {
          setFields((TestSuiteStruct)value);
        }
        break;

      case TEST_LIST:
        if (value == null) {
          unsetTest_list();
        } else {
          setTest_list((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case _SELF:
        return new Long(get_self());

      case FIELDS:
        return getFields();

      case TEST_LIST:
        return getTest_list();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case _SELF:
        return isSet_self();
      case FIELDS:
        return isSetFields();
      case TEST_LIST:
        return isSetTest_list();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof TestSuite_modify_full_args)
        return this.equals((TestSuite_modify_full_args)that);
      return false;
    }

    public boolean equals(TestSuite_modify_full_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present__self = true;
      boolean that_present__self = true;
      if (this_present__self || that_present__self) {
        if (!(this_present__self && that_present__self))
          return false;
        if (this._self != that._self)
          return false;
      }

      boolean this_present_fields = true && this.isSetFields();
      boolean that_present_fields = true && that.isSetFields();
      if (this_present_fields || that_present_fields) {
        if (!(this_present_fields && that_present_fields))
          return false;
        if (!this.fields.equals(that.fields))
          return false;
      }

      boolean this_present_test_list = true && this.isSetTest_list();
      boolean that_present_test_list = true && that.isSetTest_list();
      if (this_present_test_list || that_present_test_list) {
        if (!(this_present_test_list && that_present_test_list))
          return false;
        if (!this.test_list.equals(that.test_list))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(TestSuite_modify_full_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      TestSuite_modify_full_args typedOther = (TestSuite_modify_full_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_self()).compareTo(typedOther.isSet_self());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_self()) {
        lastComparison = TBaseHelper.compareTo(this._self, typedOther._self);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFields()).compareTo(typedOther.isSetFields());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFields()) {
        lastComparison = TBaseHelper.compareTo(this.fields, typedOther.fields);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTest_list()).compareTo(typedOther.isSetTest_list());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTest_list()) {
        lastComparison = TBaseHelper.compareTo(this.test_list, typedOther.test_list);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // _SELF
            if (field.type == TType.I64) {
              this._self = iprot.readI64();
              set_selfIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // FIELDS
            if (field.type == TType.STRUCT) {
              this.fields = new TestSuiteStruct();
              this.fields.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // TEST_LIST
            if (field.type == TType.LIST) {
              {
                TList _list393 = iprot.readListBegin();
                this.test_list = new ArrayList<Long>(_list393.size);
                for (int _i394 = 0; _i394 < _list393.size; ++_i394)
                {
                  long _elem395;
                  _elem395 = iprot.readI64();
                  this.test_list.add(_elem395);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_SELF_FIELD_DESC);
      oprot.writeI64(this._self);
      oprot.writeFieldEnd();
      if (this.fields != null) {
        oprot.writeFieldBegin(FIELDS_FIELD_DESC);
        this.fields.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.test_list != null) {
        oprot.writeFieldBegin(TEST_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I64, this.test_list.size()));
          for (long _iter396 : this.test_list)
          {
            oprot.writeI64(_iter396);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("TestSuite_modify_full_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_self:");
      sb.append(this._self);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fields:");
      if (this.fields == null) {
        sb.append("null");
      } else {
        sb.append(this.fields);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("test_list:");
      if (this.test_list == null) {
        sb.append("null");
      } else {
        sb.append(this.test_list);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class TestSuite_modify_full_result implements TBase<TestSuite_modify_full_result, TestSuite_modify_full_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("TestSuite_modify_full_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField ERROR1_FIELD_DESC = new TField("error1", TType.STRUCT, (short)1);
    private static final TField ERROR2_FIELD_DESC = new TField("error2", TType.STRUCT, (short)2);
    private static final TField ERROR3_FIELD_DESC = new TField("error3", TType.STRUCT, (short)3);
    private static final TField ERROR4_FIELD_DESC = new TField("error4", TType.STRUCT, (short)4);
    private static final TField ERROR5_FIELD_DESC = new TField("error5", TType.STRUCT, (short)5);
    private static final TField ERROR6_FIELD_DESC = new TField("error6", TType.STRUCT, (short)6);

    public TestSuiteStruct success;
    public TokenInvalid error1;
    public TokenExpired error2;
    public AccessDenied error3;
    public ArgumentNotFound error4;
    public CannotReturnObject error5;
    public CannotSetField error6;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR1((short)1, "error1"),
      ERROR2((short)2, "error2"),
      ERROR3((short)3, "error3"),
      ERROR4((short)4, "error4"),
      ERROR5((short)5, "error5"),
      ERROR6((short)6, "error6");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR1
            return ERROR1;
          case 2: // ERROR2
            return ERROR2;
          case 3: // ERROR3
            return ERROR3;
          case 4: // ERROR4
            return ERROR4;
          case 5: // ERROR5
            return ERROR5;
          case 6: // ERROR6
            return ERROR6;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, TestSuiteStruct.class)));
      tmpMap.put(_Fields.ERROR1, new FieldMetaData("error1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR2, new FieldMetaData("error2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR3, new FieldMetaData("error3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR4, new FieldMetaData("error4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR5, new FieldMetaData("error5", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.ERROR6, new FieldMetaData("error6", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(TestSuite_modify_full_result.class, metaDataMap);
    }

    public TestSuite_modify_full_result() {
    }

    public TestSuite_modify_full_result(
      TestSuiteStruct success,
      TokenInvalid error1,
      TokenExpired error2,
      AccessDenied error3,
      ArgumentNotFound error4,
      CannotReturnObject error5,
      CannotSetField error6)
    {
      this();
      this.success = success;
      this.error1 = error1;
      this.error2 = error2;
      this.error3 = error3;
      this.error4 = error4;
      this.error5 = error5;
      this.error6 = error6;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TestSuite_modify_full_result(TestSuite_modify_full_result other) {
      if (other.isSetSuccess()) {
        this.success = new TestSuiteStruct(other.success);
      }
      if (other.isSetError1()) {
        this.error1 = new TokenInvalid(other.error1);
      }
      if (other.isSetError2()) {
        this.error2 = new TokenExpired(other.error2);
      }
      if (other.isSetError3()) {
        this.error3 = new AccessDenied(other.error3);
      }
      if (other.isSetError4()) {
        this.error4 = new ArgumentNotFound(other.error4);
      }
      if (other.isSetError5()) {
        this.error5 = new CannotReturnObject(other.error5);
      }
      if (other.isSetError6()) {
        this.error6 = new CannotSetField(other.error6);
      }
    }

    public TestSuite_modify_full_result deepCopy() {
      return new TestSuite_modify_full_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.error1 = null;
      this.error2 = null;
      this.error3 = null;
      this.error4 = null;
      this.error5 = null;
      this.error6 = null;
    }

    public TestSuiteStruct getSuccess() {
      return this.success;
    }

    public TestSuite_modify_full_result setSuccess(TestSuiteStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TokenInvalid getError1() {
      return this.error1;
    }

    public TestSuite_modify_full_result setError1(TokenInvalid error1) {
      this.error1 = error1;
      return this;
    }

    public void unsetError1() {
      this.error1 = null;
    }

    /** Returns true if field error1 is set (has been asigned a value) and false otherwise */
    public boolean isSetError1() {
      return this.error1 != null;
    }

    public void setError1IsSet(boolean value) {
      if (!value) {
        this.error1 = null;
      }
    }

    public TokenExpired getError2() {
      return this.error2;
    }

    public TestSuite_modify_full_result setError2(TokenExpired error2) {
      this.error2 = error2;
      return this;
    }

    public void unsetError2() {
      this.error2 = null;
    }

    /** Returns true if field error2 is set (has been asigned a value) and false otherwise */
    public boolean isSetError2() {
      return this.error2 != null;
    }

    public void setError2IsSet(boolean value) {
      if (!value) {
        this.error2 = null;
      }
    }

    public AccessDenied getError3() {
      return this.error3;
    }

    public TestSuite_modify_full_result setError3(AccessDenied error3) {
      this.error3 = error3;
      return this;
    }

    public void unsetError3() {
      this.error3 = null;
    }

    /** Returns true if field error3 is set (has been asigned a value) and false otherwise */
    public boolean isSetError3() {
      return this.error3 != null;
    }

    public void setError3IsSet(boolean value) {
      if (!value) {
        this.error3 = null;
      }
    }

    public ArgumentNotFound getError4() {
      return this.error4;
    }

    public TestSuite_modify_full_result setError4(ArgumentNotFound error4) {
      this.error4 = error4;
      return this;
    }

    public void unsetError4() {
      this.error4 = null;
    }

    /** Returns true if field error4 is set (has been asigned a value) and false otherwise */
    public boolean isSetError4() {
      return this.error4 != null;
    }

    public void setError4IsSet(boolean value) {
      if (!value) {
        this.error4 = null;
      }
    }

    public CannotReturnObject getError5() {
      return this.error5;
    }

    public TestSuite_modify_full_result setError5(CannotReturnObject error5) {
      this.error5 = error5;
      return this;
    }

    public void unsetError5() {
      this.error5 = null;
    }

    /** Returns true if field error5 is set (has been asigned a value) and false otherwise */
    public boolean isSetError5() {
      return this.error5 != null;
    }

    public void setError5IsSet(boolean value) {
      if (!value) {
        this.error5 = null;
      }
    }

    public CannotSetField getError6() {
      return this.error6;
    }

    public TestSuite_modify_full_result setError6(CannotSetField error6) {
      this.error6 = error6;
      return this;
    }

    public void unsetError6() {
      this.error6 = null;
    }

    /** Returns true if field error6 is set (has been asigned a value) and false otherwise */
    public boolean isSetError6() {
      return this.error6 != null;
    }

    public void setError6IsSet(boolean value) {
      if (!value) {
        this.error6 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TestSuiteStruct)value);
        }
        break;

      case ERROR1:
        if (value == null) {
          unsetError1();
        } else {
          setError1((TokenInvalid)value);
        }
        break;

      case ERROR2:
        if (value == null) {
          unsetError2();
        } else {
          setError2((TokenExpired)value);
        }
        break;

      case ERROR3:
        if (value == null) {
          unsetError3();
        } else {
          setError3((AccessDenied)value);
        }
        break;

      case ERROR4:
        if (value == null) {
          unsetError4();
        } else {
          setError4((ArgumentNotFound)value);
        }
        break;

      case ERROR5:
        if (value == null) {
          unsetError5();
        } else {
          setError5((CannotReturnObject)value);
        }
        break;

      case ERROR6:
        if (value == null) {
          unsetError6();
        } else {
          setError6((CannotSetField)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR1:
        return getError1();

      case ERROR2:
        return getError2();

      case ERROR3:
        return getError3();

      case ERROR4:
        return getError4();

      case ERROR5:
        return getError5();

      case ERROR6:
        return getError6();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR1:
        return isSetError1();
      case ERROR2:
        return isSetError2();
      case ERROR3:
        return isSetError3();
      case ERROR4:
        return isSetError4();
      case ERROR5:
        return isSetError5();
      case ERROR6:
        return isSetError6();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof TestSuite_modify_full_result)
        return this.equals((TestSuite_modify_full_result)that);
      return false;
    }

    public boolean equals(TestSuite_modify_full_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error1 = true && this.isSetError1();
      boolean that_present_error1 = true && that.isSetError1();
      if (this_present_error1 || that_present_error1) {
        if (!(this_present_error1 && that_present_error1))
          return false;
        if (!this.error1.equals(that.error1))
          return false;
      }

      boolean this_present_error2 = true && this.isSetError2();
      boolean that_present_error2 = true && that.isSetError2();
      if (this_present_error2 || that_present_error2) {
        if (!(this_present_error2 && that_present_error2))
          return false;
        if (!this.error2.equals(that.error2))
          return false;
      }

      boolean this_present_error3 = true && this.isSetError3();
      boolean that_present_error3 = true && that.isSetError3();
      if (this_present_error3 || that_present_error3) {
        if (!(this_present_error3 && that_present_error3))
          return false;
        if (!this.error3.equals(that.error3))
          return false;
      }

      boolean this_present_error4 = true && this.isSetError4();
      boolean that_present_error4 = true && that.isSetError4();
      if (this_present_error4 || that_present_error4) {
        if (!(this_present_error4 && that_present_error4))
          return false;
        if (!this.error4.equals(that.error4))
          return false;
      }

      boolean this_present_error5 = true && this.isSetError5();
      boolean that_present_error5 = true && that.isSetError5();
      if (this_present_error5 || that_present_error5) {
        if (!(this_present_error5 && that_present_error5))
          return false;
        if (!this.error5.equals(that.error5))
          return false;
      }

      boolean this_present_error6 = true && this.isSetError6();
      boolean that_present_error6 = true && that.isSetError6();
      if (this_present_error6 || that_present_error6) {
        if (!(this_present_error6 && that_present_error6))
          return false;
        if (!this.error6.equals(that.error6))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(TestSuite_modify_full_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      TestSuite_modify_full_result typedOther = (TestSuite_modify_full_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError1()).compareTo(typedOther.isSetError1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError1()) {
        lastComparison = TBaseHelper.compareTo(this.error1, typedOther.error1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError2()).compareTo(typedOther.isSetError2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError2()) {
        lastComparison = TBaseHelper.compareTo(this.error2, typedOther.error2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError3()).compareTo(typedOther.isSetError3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError3()) {
        lastComparison = TBaseHelper.compareTo(this.error3, typedOther.error3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError4()).compareTo(typedOther.isSetError4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError4()) {
        lastComparison = TBaseHelper.compareTo(this.error4, typedOther.error4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError5()).compareTo(typedOther.isSetError5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError5()) {
        lastComparison = TBaseHelper.compareTo(this.error5, typedOther.error5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError6()).compareTo(typedOther.isSetError6());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError6()) {
        lastComparison = TBaseHelper.compareTo(this.error6, typedOther.error6);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new TestSuiteStruct();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ERROR1
            if (field.type == TType.STRUCT) {
              this.error1 = new TokenInvalid();
              this.error1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR2
            if (field.type == TType.STRUCT) {
              this.error2 = new TokenExpired();
              this.error2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ERROR3
            if (field.type == TType.STRUCT) {
              this.error3 = new AccessDenied();
              this.error3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR4
            if (field.type == TType.STRUCT) {
              this.error4 = new ArgumentNotFound();
              this.error4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR5
            if (field.type == TType.STRUCT) {
              this.error5 = new CannotReturnObject();
              this.error5.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // ERROR6
            if (field.type == TType.STRUCT) {
              this.error6 = new CannotSetField();
              this.error6.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError1()) {
        oprot.writeFieldBegin(ERROR1_FIELD_DESC);
        this.error1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError2()) {
        oprot.writeFieldBegin(ERROR2_FIELD_DESC);
        this.error2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError3()) {
        oprot.writeFieldBegin(ERROR3_FIELD_DESC);
        this.error3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError4()) {
        oprot.writeFieldBegin(ERROR4_FIELD_DESC);
        this.error4.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError5()) {
        oprot.writeFieldBegin(ERROR5_FIELD_DESC);
        this.error5.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetError6()) {
        oprot.writeFieldBegin(ERROR6_FIELD_DESC);
        this.error6.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("TestSuite_modify_full_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error1:");
      if (this.error1 == null) {
        sb.append("null");
      } else {
        sb.append(this.error1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error2:");
      if (this.error2 == null) {
        sb.append("null");
      } else {
        sb.append(this.error2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error3:");
      if (this.error3 == null) {
        sb.append("null");
      } else {
        sb.append(this.error3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error4:");
      if (this.error4 == null) {
        sb.append("null");
      } else {
        sb.append(this.error4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error5:");
      if (this.error5 == null) {
        sb.append("null");
      } else {
        sb.append(this.error5);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error6:");
      if (this.error6 == null) {
        sb.append("null");
      } else {
        sb.append(this.error6);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
